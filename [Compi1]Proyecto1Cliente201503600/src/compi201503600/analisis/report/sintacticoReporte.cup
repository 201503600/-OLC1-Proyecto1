package compi201503600.analisis.report;

import java_cup.runtime.*;
import java.io.FileReader;
import compi201503600.beans.*;

//PARSER 
parser code
{://Codigo visible

    public Result resultado;

    public void setResult(Result resultado){
        this.resultado = resultado;
    }

    public String textohtml = "";
    public String getHtml(){
        return textohtml;
    }

    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            ScannerSintaxReport asin = new ScannerSintaxReport(
                    new ScannerLexReport( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

:}

action code
{:
:}



   
/* ------------Declaracion de simbolos terminales y no terminales---------- */
   
/* Terminales (tokens obtenidos por el analizador lexico).  

   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los enteros son listados en la segunda o demas lineas. */
terminal String TEXTOHTML, CADENA, ID;
terminal Integer ENTERO;
terminal double  DECIMAL;
terminal    OPIGUAL, OPASIGSUMA, OPASIGRESTA, OPASIGMULT, OPINCREMENT, OPDECREMENT, PARA, PARC, CORA, CORC, PCOMA, COMA, PUNTO, OPSUMA, OPRESTA, OPMULT, OPDIV, 
            OPMODULO, OPMEN, OPMAY, OPMENIGUAL, OPMAYIGUAL, OPCOMPARADOR, OPDISTINTO, OPAND, OPOR, OPNOT, RESULT, SCORE, VARIABLES, NOMBRE, CANTIDAD, CLASES, 
            METODOS, TINT, TDOUBLE, TCHAR, TSTRING, TBOOL, PRINT, HTML, HEAD, BODY, TITLE, H1, H2, H3, H4, H5, H6, TABLE, TH, TD, TR, DIV, P, BR, HR, COLOR, TEXTCOLOR, ALIGN, FONT, DOLLAR;
   
/* No terminales usados en la seccion gramatical. 

   Primero se lista los no terminales que tienen un valor Object y despues
   se lista los no terminales que tienen un entero. Un Object se refiere a que
   no tienen tipo, pudiendo ser entero o String. */
non terminal String     OPASIGNA;
non terminal Object     S0, INICIO, SENTSHTML, SENTHTML, SENTSHEAD, SENTHEAD, SENTSTITLE, SENTTITLE, SENTSBODY, SENTBODY, SENTSTABLE, SENTTABLE, 
                        SENTSROW, SENTROW, SENTSP, SENTP, EPS, CPREPORT, DECLARACION, TIPO, LISTAID, ASIGNA, ASIGNACION, IMPRIMIR, COND, 
                        RELACIONAL, EXP, LLAMADA, LLAMAR, ARRAY, TEXTOPLANO;
   

/* -------------Seccion de predencia y asociacion de los terminales----------- */
   
  precedence left OPAND, OPOR;
  precedence right OPNOT;
  precedence left OPMEN, OPMAY, OPMENIGUAL, OPMAYIGUAL, OPIGUAL, OPDISTINTO;
  precedence left OPSUMA, OPRESTA;
  precedence left OPMULT, OPDIV;
  precedence left OPMODULO;


/* ------------------- Seccion de la gramatica ------------------------ */

S0 ::=  S0 INICIO
        | INICIO
        ;

INICIO ::=  DOLLAR CPREPORT DOLLAR
            | OPMEN HTML OPMAY  {: parser.textohtml += "<html>"; :} SENTSHTML OPMEN OPDIV HTML OPMAY {: parser.textohtml += "</html>"; :}
            | error OPMAY
            | TEXTOPLANO
            ;

SENTSHTML ::=   SENTSHTML SENTHTML
                | SENTHTML
                ;

SENTHTML ::=    DOLLAR CPREPORT DOLLAR
                | OPMEN HEAD OPMAY {: parser.textohtml += "<head>"; :} SENTSHEAD OPMEN OPDIV HEAD OPMAY {:parser.textohtml += "</head>"; :}
                | OPMEN BODY OPMAY {: parser.textohtml += "<body>"; :} SENTSBODY OPMEN OPDIV BODY OPMAY {:parser.textohtml += "</body>"; :}
                | error OPMAY
                | TEXTOPLANO
                ;

SENTSHEAD ::=   SENTSHEAD SENTHEAD
                | SENTHEAD
                ;

SENTHEAD ::=    DOLLAR CPREPORT DOLLAR
                | OPMEN TITLE OPMAY {: parser.textohtml += "<title>"; :} SENTSTITLE OPMEN OPDIV TITLE OPMAY {:parser.textohtml += "</title>"; :}
                | error OPMAY
                | TEXTOPLANO
                ;

SENTSTITLE ::=  SENTSTITLE SENTTITLE
                | SENTTITLE
                ;

SENTTITLE ::=   DOLLAR CPREPORT DOLLAR
                | TEXTOPLANO
                ;

SENTSBODY ::=   SENTSBODY SENTBODY
                | SENTBODY
                ;

SENTBODY ::=    DOLLAR CPREPORT DOLLAR
                | OPMEN H1 OPMAY {: parser.textohtml += "<h1>"; :}  SENTSTITLE OPMEN OPDIV H1 OPMAY {:parser.textohtml += "</h1>"; :}
                | OPMEN H2 OPMAY {: parser.textohtml += "<h2>"; :}  SENTSTITLE OPMEN OPDIV H2 OPMAY {:parser.textohtml += "</h2>"; :}
                | OPMEN H3 OPMAY {: parser.textohtml += "<h3>"; :}  SENTSTITLE OPMEN OPDIV H3 OPMAY {:parser.textohtml += "</h3>"; :}
                | OPMEN H4 OPMAY {: parser.textohtml += "<h4>"; :}  SENTSTITLE OPMEN OPDIV H4 OPMAY {:parser.textohtml += "</h4>"; :}
                | OPMEN H5 OPMAY {: parser.textohtml += "<h5>"; :}  SENTSTITLE OPMEN OPDIV H5 OPMAY {:parser.textohtml += "</h5>"; :}
                | OPMEN H6 OPMAY {: parser.textohtml += "<h6>"; :}  SENTSTITLE OPMEN OPDIV H6 OPMAY {:parser.textohtml += "</h6>"; :}
                | OPMEN TABLE OPMAY {: parser.textohtml += "<table>"; :}  SENTSTABLE OPMEN OPDIV TABLE OPMAY {:parser.textohtml += "</table>"; :}
                | OPMEN DIV OPMAY {: parser.textohtml += "<div>"; :}  SENTSBODY OPMEN OPDIV DIV OPMAY {:parser.textohtml += "</div>"; :}
                | OPMEN P OPMAY {: parser.textohtml += "<p>"; :}  SENTSP OPMEN OPDIV P OPMAY {:parser.textohtml += "</p>"; :}
                | OPMEN HR OPMAY {: parser.textohtml += "<hr>"; :} 
                | OPMEN BR OPMAY {: parser.textohtml += "<br>"; :} 
                | error OPMAY
                | TEXTOPLANO
                ;

SENTSTABLE ::=  SENTSTABLE SENTTABLE
                | SENTTABLE
                ;

SENTTABLE ::=   DOLLAR CPREPORT DOLLAR
                | OPMEN TR OPMAY {: parser.textohtml += "<tr>"; :} SENTSROW OPMEN OPDIV TR OPMAY {: parser.textohtml += "</tr>"; :}
                | error OPMAY
                | TEXTOPLANO
                ;

SENTSROW ::=    SENTSROW SENTROW
                | SENTROW
                ;

SENTROW ::= DOLLAR CPREPORT DOLLAR
            | OPMEN TH OPMAY {: parser.textohtml += "<th>"; :} SENTSBODY OPMEN OPDIV TH OPMAY {:parser.textohtml += "</th>"; :}
            | OPMEN TD OPMAY {: parser.textohtml += "<td>"; :} SENTSBODY OPMEN OPDIV TD OPMAY {:parser.textohtml += "</td>"; :}
            | error OPMAY
            | TEXTOPLANO
            ;

SENTSP ::=  SENTSP SENTP
            | SENTP
            ;

SENTP ::=   DOLLAR CPREPORT DOLLAR
            | OPMEN HR OPMAY {: parser.textohtml += "<hr>"; :}
            | OPMEN BR OPMAY {: parser.textohtml += "<br>"; :}
            | TEXTOPLANO
            ;

EPS ::= ;

CPREPORT ::=    DECLARACION
                | ASIGNACION
                | IMPRIMIR
                | error PCOMA
                | EPS
                ;

DECLARACION ::= TIPO LISTAID PCOMA
                ;

TIPO ::=    TINT
            | TDOUBLE
            | TCHAR
            | TSTRING
            | TBOOL
            ;

LISTAID ::= LISTAID COMA ID ASIGNA 
            | ID ASIGNA
            ;

ASIGNA ::=  OPIGUAL COND
            | EPS
            ;

ASIGNACION ::=  ID OPASIGNA COND PCOMA
                ;

OPASIGNA ::=    OPIGUAL         {: RESULT = "="; :}
                | OPASIGSUMA    {: RESULT = "+="; :}
                | OPASIGRESTA   {: RESULT = "-="; :}
                | OPASIGMULT    {: RESULT = "*="; :}
                ;

IMPRIMIR ::=    PRINT PARA COND PARC PCOMA
                ;

COND ::=    COND OPOR COND
            | COND OPAND COND
            | OPNOT COND
            | EXP RELACIONAL EXP
            | EXP
            ;

RELACIONAL ::=  OPCOMPARADOR
                | OPDISTINTO
                | OPMAYIGUAL
                | OPMENIGUAL
                | OPMAY
                | OPMEN
                ;

EXP ::= EXP OPSUMA EXP
        | EXP OPRESTA EXP
        | EXP OPMULT EXP
        | EXP OPDIV EXP
        | EXP OPMODULO EXP
        | OPRESTA EXP
        | EXP OPINCREMENT
        | EXP OPDECREMENT
        | PARA COND PARC
        | ENTERO
        | DECIMAL
        | CADENA
        | ID
        | LLAMADA
        ;

LLAMADA ::= RESULT PUNTO LLAMAR PCOMA
            ;

LLAMAR ::=  SCORE
            | ARRAY 
            | ARRAY PUNTO NOMBRE
            | ARRAY PUNTO CANTIDAD
            | ARRAY CORA ENTERO CORC PUNTO NOMBRE
            ;

ARRAY ::=   VARIABLES
            | METODOS
            | CLASES
            ;

TEXTOPLANO ::=  TEXTOHTML:t     {: parser.textohtml += t; :}
                | CADENA:c      {: parser.textohtml += c; :}
                | ID:id         {: parser.textohtml += id; :}
                | ENTERO:e      {: parser.textohtml += e; :}
                | DECIMAL:d     {: parser.textohtml += d; :}
                | FONT          {: parser.textohtml += "font"; :}
                | ALIGN         {: parser.textohtml += "align"; :}
                | TEXTCOLOR     {: parser.textohtml += "textcolor"; :}
                | COLOR         {: parser.textohtml += "color"; :}
                | HR            {: parser.textohtml += "hr"; :}
                | BR            {: parser.textohtml += "br"; :}
                | P             {: parser.textohtml += "p"; :}
                | DIV           {: parser.textohtml += "div"; :}
                | TR            {: parser.textohtml += "tr"; :}
                | TD            {: parser.textohtml += "td"; :}
                | TH            {: parser.textohtml += "th"; :}
                | TABLE         {: parser.textohtml += "table"; :}
                | H1            {: parser.textohtml += "h1"; :}
                | H2            {: parser.textohtml += "h2"; :}
                | H3            {: parser.textohtml += "h3"; :}
                | H4            {: parser.textohtml += "h4"; :}
                | H5            {: parser.textohtml += "h5"; :}
                | H6            {: parser.textohtml += "h6"; :}
                | TITLE         {: parser.textohtml += "title"; :}
                | BODY          {: parser.textohtml += "body"; :}
                | HEAD          {: parser.textohtml += "head"; :}
                | HTML          {: parser.textohtml += "html"; :}
                | PRINT         {: parser.textohtml += "print"; :}
                | TIPO          {: parser.textohtml += "tipo"; :}
                | CLASES        {: parser.textohtml += "clases"; :}
                | METODOS       {: parser.textohtml += "metodos"; :}
                | CANTIDAD      {: parser.textohtml += "cantidad"; :}
                | NOMBRE        {: parser.textohtml += "nombre"; :}
                | VARIABLES     {: parser.textohtml += "variables"; :}
                | SCORE         {: parser.textohtml += "score"; :}
                | RESULT        {: parser.textohtml += "result"; :}
                | OPNOT         {: parser.textohtml += "!"; :}
                | OPOR          {: parser.textohtml += "||"; :}
                | OPAND         {: parser.textohtml += "&&"; :}
                | OPDISTINTO    {: parser.textohtml += "!="; :}
                | OPCOMPARADOR  {: parser.textohtml += "=="; :}
                | OPMAYIGUAL    {: parser.textohtml += ">="; :}
                | OPMENIGUAL    {: parser.textohtml += "<="; :} 
                | OPMEN         {: parser.textohtml += "<"; :}
                | OPMAY         {: parser.textohtml += ">"; :}
                | OPMODULO      {: parser.textohtml += "%"; :}
                | OPDIV         {: parser.textohtml += "/"; :}
                | OPMULT        {: parser.textohtml += "*"; :}
                | OPSUMA        {: parser.textohtml += "+"; :}
                | OPRESTA       {: parser.textohtml += "-"; :}
                | CORA          {: parser.textohtml += "["; :}
                | CORC          {: parser.textohtml += "]"; :}
                | COMA          {: parser.textohtml += ","; :}
                | PUNTO         {: parser.textohtml += "."; :}
                | PCOMA         {: parser.textohtml += ";"; :}
                | PARA          {: parser.textohtml += "("; :}
                | PARC          {: parser.textohtml += ")"; :}
                | OPINCREMENT   {: parser.textohtml += "++"; :}
                | OPDECREMENT   {: parser.textohtml += "--"; :}
                | OPASIGNA:t    {: parser.textohtml += t; :}      
                ;
