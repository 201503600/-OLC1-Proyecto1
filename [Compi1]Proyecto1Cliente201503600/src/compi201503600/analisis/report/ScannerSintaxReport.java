
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 29 16:14:48 CST 2018
//----------------------------------------------------

package compi201503600.analisis.report;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 29 16:14:48 CST 2018
  */
public class ScannerSintaxReport extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ScannerSintaxReport() {super();}

  /** Constructor which sets the default scanner. */
  public ScannerSintaxReport(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ScannerSintaxReport(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\260\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\012\000\002\003\004" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\004\000\002\005\003\000\002\006\005\000\002" +
    "\006\012\000\002\006\012\000\002\006\004\000\002\006" +
    "\003\000\002\007\004\000\002\007\003\000\002\010\005" +
    "\000\002\010\012\000\002\010\004\000\002\010\003\000" +
    "\002\011\004\000\002\011\003\000\002\012\005\000\002" +
    "\012\003\000\002\013\004\000\002\013\003\000\002\014" +
    "\005\000\002\014\012\000\002\014\012\000\002\014\012" +
    "\000\002\014\012\000\002\014\012\000\002\014\012\000" +
    "\002\014\012\000\002\014\012\000\002\014\012\000\002" +
    "\014\005\000\002\014\005\000\002\014\004\000\002\014" +
    "\003\000\002\015\004\000\002\015\003\000\002\016\005" +
    "\000\002\016\012\000\002\016\004\000\002\016\003\000" +
    "\002\017\004\000\002\017\003\000\002\020\005\000\002" +
    "\020\012\000\002\020\012\000\002\020\004\000\002\020" +
    "\003\000\002\021\004\000\002\021\003\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\003\000" +
    "\002\023\002\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\004\000\002\024\003\000\002\025" +
    "\005\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\027\006\000" +
    "\002\027\004\000\002\030\004\000\002\030\003\000\002" +
    "\031\006\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\033\007\000\002\034\005" +
    "\000\002\034\005\000\002\034\004\000\002\034\005\000" +
    "\002\034\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\004\000" +
    "\002\036\004\000\002\036\004\000\002\036\005\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\037\006\000\002\040\003" +
    "\000\002\040\003\000\002\040\005\000\002\040\005\000" +
    "\002\040\010\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0154\000\214\003\067\004\106\005\041\006\047\007" +
    "\032\010\062\011\015\012\033\013\031\014\055\015\054" +
    "\016\030\017\035\020\057\021\103\022\021\023\072\024" +
    "\070\025\013\026\017\027\071\030\051\031\110\032\056" +
    "\033\052\034\016\035\026\036\042\037\040\040\112\041" +
    "\100\042\046\043\102\044\060\045\107\046\075\047\023" +
    "\050\063\051\115\052\022\053\061\054\036\055\045\056" +
    "\073\057\027\060\076\061\065\062\066\063\012\064\011" +
    "\065\010\066\007\067\006\070\005\071\014\072\114\073" +
    "\004\074\111\075\050\076\053\077\101\100\104\101\074" +
    "\102\077\103\044\104\024\105\037\106\105\107\034\001" +
    "\002\000\216\002\uff7e\003\uff7e\004\uff7e\005\uff7e\006\uff7e" +
    "\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e\015" +
    "\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e" +
    "\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032" +
    "\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e" +
    "\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047" +
    "\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e" +
    "\056\uff7e\057\uff7e\060\uff7e\061\uff7e\062\uff7e\063\uff7e\064" +
    "\uff7e\065\uff7e\066\uff7e\067\uff7e\070\uff7e\071\uff7e\072\uff7e" +
    "\073\uff7e\074\uff7e\075\uff7e\076\uff7e\077\uff7e\100\uff7e\101" +
    "\uff7e\102\uff7e\103\uff7e\104\uff7e\105\uff7e\106\uff7e\107\uff7e" +
    "\001\002\000\216\002\uff76\003\uff76\004\uff76\005\uff76\006" +
    "\uff76\007\uff76\010\uff76\011\uff76\012\uff76\013\uff76\014\uff76" +
    "\015\uff76\016\uff76\017\uff76\020\uff76\021\uff76\022\uff76\023" +
    "\uff76\024\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76" +
    "\032\uff76\033\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040" +
    "\uff76\041\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76" +
    "\047\uff76\050\uff76\051\uff76\052\uff76\053\uff76\054\uff76\055" +
    "\uff76\056\uff76\057\uff76\060\uff76\061\uff76\062\uff76\063\uff76" +
    "\064\uff76\065\uff76\066\uff76\067\uff76\070\uff76\071\uff76\072" +
    "\uff76\073\uff76\074\uff76\075\uff76\076\uff76\077\uff76\100\uff76" +
    "\101\uff76\102\uff76\103\uff76\104\uff76\105\uff76\106\uff76\107" +
    "\uff76\001\002\000\216\002\uff77\003\uff77\004\uff77\005\uff77" +
    "\006\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77\014" +
    "\uff77\015\uff77\016\uff77\017\uff77\020\uff77\021\uff77\022\uff77" +
    "\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77\030\uff77\031" +
    "\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036\uff77\037\uff77" +
    "\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77\045\uff77\046" +
    "\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77\054\uff77" +
    "\055\uff77\056\uff77\057\uff77\060\uff77\061\uff77\062\uff77\063" +
    "\uff77\064\uff77\065\uff77\066\uff77\067\uff77\070\uff77\071\uff77" +
    "\072\uff77\073\uff77\074\uff77\075\uff77\076\uff77\077\uff77\100" +
    "\uff77\101\uff77\102\uff77\103\uff77\104\uff77\105\uff77\106\uff77" +
    "\107\uff77\001\002\000\216\002\uff78\003\uff78\004\uff78\005" +
    "\uff78\006\uff78\007\uff78\010\uff78\011\uff78\012\uff78\013\uff78" +
    "\014\uff78\015\uff78\016\uff78\017\uff78\020\uff78\021\uff78\022" +
    "\uff78\023\uff78\024\uff78\025\uff78\026\uff78\027\uff78\030\uff78" +
    "\031\uff78\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78\037" +
    "\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\045\uff78" +
    "\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78\054" +
    "\uff78\055\uff78\056\uff78\057\uff78\060\uff78\061\uff78\062\uff78" +
    "\063\uff78\064\uff78\065\uff78\066\uff78\067\uff78\070\uff78\071" +
    "\uff78\072\uff78\073\uff78\074\uff78\075\uff78\076\uff78\077\uff78" +
    "\100\uff78\101\uff78\102\uff78\103\uff78\104\uff78\105\uff78\106" +
    "\uff78\107\uff78\001\002\000\216\002\uff79\003\uff79\004\uff79" +
    "\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79\013" +
    "\uff79\014\uff79\015\uff79\016\uff79\017\uff79\020\uff79\021\uff79" +
    "\022\uff79\023\uff79\024\uff79\025\uff79\026\uff79\027\uff79\030" +
    "\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035\uff79\036\uff79" +
    "\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\045" +
    "\uff79\046\uff79\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79" +
    "\054\uff79\055\uff79\056\uff79\057\uff79\060\uff79\061\uff79\062" +
    "\uff79\063\uff79\064\uff79\065\uff79\066\uff79\067\uff79\070\uff79" +
    "\071\uff79\072\uff79\073\uff79\074\uff79\075\uff79\076\uff79\077" +
    "\uff79\100\uff79\101\uff79\102\uff79\103\uff79\104\uff79\105\uff79" +
    "\106\uff79\107\uff79\001\002\000\216\002\uff7a\003\uff7a\004" +
    "\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a" +
    "\013\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020\uff7a\021" +
    "\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a" +
    "\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\036" +
    "\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a" +
    "\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053" +
    "\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a" +
    "\062\uff7a\063\uff7a\064\uff7a\065\uff7a\066\uff7a\067\uff7a\070" +
    "\uff7a\071\uff7a\072\uff7a\073\uff7a\074\uff7a\075\uff7a\076\uff7a" +
    "\077\uff7a\100\uff7a\101\uff7a\102\uff7a\103\uff7a\104\uff7a\105" +
    "\uff7a\106\uff7a\107\uff7a\001\002\000\216\002\uff7b\003\uff7b" +
    "\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012" +
    "\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\020\uff7b" +
    "\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027" +
    "\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b" +
    "\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044" +
    "\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b" +
    "\053\uff7b\054\uff7b\055\uff7b\056\uff7b\057\uff7b\060\uff7b\061" +
    "\uff7b\062\uff7b\063\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b" +
    "\070\uff7b\071\uff7b\072\uff7b\073\uff7b\074\uff7b\075\uff7b\076" +
    "\uff7b\077\uff7b\100\uff7b\101\uff7b\102\uff7b\103\uff7b\104\uff7b" +
    "\105\uff7b\106\uff7b\107\uff7b\001\002\000\216\002\uff60\003" +
    "\uff60\004\uff60\005\uff60\006\uff60\007\uff60\010\uff60\011\uff60" +
    "\012\uff60\013\uff60\014\uff60\015\uff60\016\uff60\017\uff60\020" +
    "\uff60\021\uff60\022\uff60\023\uff60\024\uff60\025\uff60\026\uff60" +
    "\027\uff60\030\uff60\031\uff60\032\uff60\033\uff60\034\uff60\035" +
    "\uff60\036\uff60\037\uff60\040\uff60\041\uff60\042\uff60\043\uff60" +
    "\044\uff60\045\uff60\046\uff60\047\uff60\050\uff60\051\uff60\052" +
    "\uff60\053\uff60\054\uff60\055\uff60\056\uff60\057\uff60\060\uff60" +
    "\061\uff60\062\uff60\063\uff60\064\uff60\065\uff60\066\uff60\067" +
    "\uff60\070\uff60\071\uff60\072\uff60\073\uff60\074\uff60\075\uff60" +
    "\076\uff60\077\uff60\100\uff60\101\uff60\102\uff60\103\uff60\104" +
    "\uff60\105\uff60\106\uff60\107\uff60\001\002\000\216\002\uff7c" +
    "\003\uff7c\004\uff7c\005\uff7c\006\uff7c\007\uff7c\010\uff7c\011" +
    "\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c\016\uff7c\017\uff7c" +
    "\020\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\026" +
    "\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c" +
    "\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043" +
    "\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c" +
    "\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c\060" +
    "\uff7c\061\uff7c\062\uff7c\063\uff7c\064\uff7c\065\uff7c\066\uff7c" +
    "\067\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c\075" +
    "\uff7c\076\uff7c\077\uff7c\100\uff7c\101\uff7c\102\uff7c\103\uff7c" +
    "\104\uff7c\105\uff7c\106\uff7c\107\uff7c\001\002\000\216\002" +
    "\uff53\003\uff53\004\uff53\005\uff53\006\uff53\007\uff53\010\uff53" +
    "\011\uff53\012\uff53\013\uff53\014\uff53\015\uff53\016\uff53\017" +
    "\uff53\020\uff53\021\uff53\022\uff53\023\uff53\024\uff53\025\uff53" +
    "\026\uff53\027\uff53\030\uff53\031\uff53\032\uff53\033\uff53\034" +
    "\uff53\035\uff53\036\uff53\037\uff53\040\uff53\041\uff53\042\uff53" +
    "\043\uff53\044\uff53\045\uff53\046\uff53\047\uff53\050\uff53\051" +
    "\uff53\052\uff53\053\uff53\054\uff53\055\uff53\056\uff53\057\uff53" +
    "\060\uff53\061\uff53\062\uff53\063\uff53\064\uff53\065\uff53\066" +
    "\uff53\067\uff53\070\uff53\071\uff53\072\uff53\073\uff53\074\uff53" +
    "\075\uff53\076\uff53\077\uff53\100\uff53\101\uff53\102\uff53\103" +
    "\uff53\104\uff53\105\uff53\106\uff53\107\uff53\001\002\000\216" +
    "\002\uff66\003\uff66\004\uff66\005\uff66\006\uff66\007\uff66\010" +
    "\uff66\011\uff66\012\uff66\013\uff66\014\uff66\015\uff66\016\uff66" +
    "\017\uff66\020\uff66\021\uff66\022\uff66\023\uff66\024\uff66\025" +
    "\uff66\026\uff66\027\uff66\030\uff66\031\uff66\032\uff66\033\uff66" +
    "\034\uff66\035\uff66\036\uff66\037\uff66\040\uff66\041\uff66\042" +
    "\uff66\043\uff66\044\uff66\045\uff66\046\uff66\047\uff66\050\uff66" +
    "\051\uff66\052\uff66\053\uff66\054\uff66\055\uff66\056\uff66\057" +
    "\uff66\060\uff66\061\uff66\062\uff66\063\uff66\064\uff66\065\uff66" +
    "\066\uff66\067\uff66\070\uff66\071\uff66\072\uff66\073\uff66\074" +
    "\uff66\075\uff66\076\uff66\077\uff66\100\uff66\101\uff66\102\uff66" +
    "\103\uff66\104\uff66\105\uff66\106\uff66\107\uff66\001\002\000" +
    "\004\057\243\001\002\000\216\002\uffff\003\uffff\004\uffff" +
    "\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013" +
    "\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff" +
    "\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030" +
    "\uffff\031\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff" +
    "\037\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045" +
    "\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff" +
    "\054\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062" +
    "\uffff\063\uffff\064\uffff\065\uffff\066\uffff\067\uffff\070\uffff" +
    "\071\uffff\072\uffff\073\uffff\074\uffff\075\uffff\076\uffff\077" +
    "\uffff\100\uffff\101\uffff\102\uffff\103\uffff\104\uffff\105\uffff" +
    "\106\uffff\107\uffff\001\002\000\216\002\uff5c\003\uff5c\004" +
    "\uff5c\005\uff5c\006\uff5c\007\uff5c\010\uff5c\011\uff5c\012\uff5c" +
    "\013\uff5c\014\uff5c\015\uff5c\016\uff5c\017\uff5c\020\uff5c\021" +
    "\uff5c\022\uff5c\023\uff5c\024\uff5c\025\uff5c\026\uff5c\027\uff5c" +
    "\030\uff5c\031\uff5c\032\uff5c\033\uff5c\034\uff5c\035\uff5c\036" +
    "\uff5c\037\uff5c\040\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c" +
    "\045\uff5c\046\uff5c\047\uff5c\050\uff5c\051\uff5c\052\uff5c\053" +
    "\uff5c\054\uff5c\055\uff5c\056\uff5c\057\uff5c\060\uff5c\061\uff5c" +
    "\062\uff5c\063\uff5c\064\uff5c\065\uff5c\066\uff5c\067\uff5c\070" +
    "\uff5c\071\uff5c\072\uff5c\073\uff5c\074\uff5c\075\uff5c\076\uff5c" +
    "\077\uff5c\100\uff5c\101\uff5c\102\uff5c\103\uff5c\104\uff5c\105" +
    "\uff5c\106\uff5c\107\uff5c\001\002\000\216\002\uffb9\003\uffb9" +
    "\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027" +
    "\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9" +
    "\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076" +
    "\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9" +
    "\105\uffb9\106\uffb9\107\uffb9\001\002\000\216\002\uffbc\003" +
    "\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc" +
    "\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067" +
    "\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc" +
    "\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104" +
    "\uffbc\105\uffbc\106\uffbc\107\uffbc\001\002\000\216\002\uff87" +
    "\003\uff87\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87\011" +
    "\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87" +
    "\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87\026" +
    "\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87" +
    "\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043" +
    "\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87" +
    "\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057\uff87\060" +
    "\uff87\061\uff87\062\uff87\063\uff87\064\uff87\065\uff87\066\uff87" +
    "\067\uff87\070\uff87\071\uff87\072\uff87\073\uff87\074\uff87\075" +
    "\uff87\076\uff87\077\uff87\100\uff87\101\uff87\102\uff87\103\uff87" +
    "\104\uff87\105\uff87\106\uff87\107\uff87\001\002\000\216\002" +
    "\242\003\067\004\106\005\041\006\047\007\032\010\062" +
    "\011\015\012\033\013\031\014\055\015\054\016\030\017" +
    "\035\020\057\021\103\022\021\023\072\024\070\025\013" +
    "\026\017\027\071\030\051\031\110\032\056\033\052\034" +
    "\016\035\026\036\042\037\040\040\112\041\100\042\046" +
    "\043\102\044\060\045\107\046\075\047\023\050\063\051" +
    "\115\052\022\053\061\054\036\055\045\056\073\057\027" +
    "\060\076\061\065\062\066\063\012\064\011\065\010\066" +
    "\007\067\006\070\005\071\014\072\114\073\004\074\111" +
    "\075\050\076\053\077\101\100\104\101\074\102\077\103" +
    "\044\104\024\105\037\106\105\107\034\001\002\000\216" +
    "\002\uff67\003\uff67\004\uff67\005\uff67\006\uff67\007\uff67\010" +
    "\uff67\011\uff67\012\uff67\013\uff67\014\uff67\015\uff67\016\uff67" +
    "\017\uff67\020\uff67\021\uff67\022\uff67\023\uff67\024\uff67\025" +
    "\uff67\026\uff67\027\uff67\030\uff67\031\uff67\032\uff67\033\uff67" +
    "\034\uff67\035\uff67\036\uff67\037\uff67\040\uff67\041\uff67\042" +
    "\uff67\043\uff67\044\uff67\045\uff67\046\uff67\047\uff67\050\uff67" +
    "\051\uff67\052\uff67\053\uff67\054\uff67\055\uff67\056\uff67\057" +
    "\uff67\060\uff67\061\uff67\062\uff67\063\uff67\064\uff67\065\uff67" +
    "\066\uff67\067\uff67\070\uff67\071\uff67\072\uff67\073\uff67\074" +
    "\uff67\075\uff67\076\uff67\077\uff67\100\uff67\101\uff67\102\uff67" +
    "\103\uff67\104\uff67\105\uff67\106\uff67\107\uff67\001\002\000" +
    "\216\002\uff72\003\uff72\004\uff72\005\uff72\006\uff72\007\uff72" +
    "\010\uff72\011\uff72\012\uff72\013\uff72\014\uff72\015\uff72\016" +
    "\uff72\017\uff72\020\uff72\021\uff72\022\uff72\023\uff72\024\uff72" +
    "\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033" +
    "\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040\uff72\041\uff72" +
    "\042\uff72\043\uff72\044\uff72\045\uff72\046\uff72\047\uff72\050" +
    "\uff72\051\uff72\052\uff72\053\uff72\054\uff72\055\uff72\056\uff72" +
    "\057\uff72\060\uff72\061\uff72\062\uff72\063\uff72\064\uff72\065" +
    "\uff72\066\uff72\067\uff72\070\uff72\071\uff72\072\uff72\073\uff72" +
    "\074\uff72\075\uff72\076\uff72\077\uff72\100\uff72\101\uff72\102" +
    "\uff72\103\uff72\104\uff72\105\uff72\106\uff72\107\uff72\001\002" +
    "\000\216\002\uff57\003\uff57\004\uff57\005\uff57\006\uff57\007" +
    "\uff57\010\uff57\011\uff57\012\uff57\013\uff57\014\uff57\015\uff57" +
    "\016\uff57\017\uff57\020\uff57\021\uff57\022\uff57\023\uff57\024" +
    "\uff57\025\uff57\026\uff57\027\uff57\030\uff57\031\uff57\032\uff57" +
    "\033\uff57\034\uff57\035\uff57\036\uff57\037\uff57\040\uff57\041" +
    "\uff57\042\uff57\043\uff57\044\uff57\045\uff57\046\uff57\047\uff57" +
    "\050\uff57\051\uff57\052\uff57\053\uff57\054\uff57\055\uff57\056" +
    "\uff57\057\uff57\060\uff57\061\uff57\062\uff57\063\uff57\064\uff57" +
    "\065\uff57\066\uff57\067\uff57\070\uff57\071\uff57\072\uff57\073" +
    "\uff57\074\uff57\075\uff57\076\uff57\077\uff57\100\uff57\101\uff57" +
    "\102\uff57\103\uff57\104\uff57\105\uff57\106\uff57\107\uff57\001" +
    "\002\000\216\002\uff55\003\uff55\004\uff55\005\uff55\006\uff55" +
    "\007\uff55\010\uff55\011\uff55\012\uff55\013\uff55\014\uff55\015" +
    "\uff55\016\uff55\017\uff55\020\uff55\021\uff55\022\uff55\023\uff55" +
    "\024\uff55\025\uff55\026\uff55\027\uff55\030\uff55\031\uff55\032" +
    "\uff55\033\uff55\034\uff55\035\uff55\036\uff55\037\uff55\040\uff55" +
    "\041\uff55\042\uff55\043\uff55\044\uff55\045\uff55\046\uff55\047" +
    "\uff55\050\uff55\051\uff55\052\uff55\053\uff55\054\uff55\055\uff55" +
    "\056\uff55\057\uff55\060\uff55\061\uff55\062\uff55\063\uff55\064" +
    "\uff55\065\uff55\066\uff55\067\uff55\070\uff55\071\uff55\072\uff55" +
    "\073\uff55\074\uff55\075\uff55\076\uff55\077\uff55\100\uff55\101" +
    "\uff55\102\uff55\103\uff55\104\uff55\105\uff55\106\uff55\107\uff55" +
    "\001\002\000\216\002\uffb0\003\uffb0\004\uffb0\005\uffb0\006" +
    "\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072" +
    "\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0" +
    "\101\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107" +
    "\uffb0\001\002\000\216\002\uff56\003\uff56\004\uff56\005\uff56" +
    "\006\uff56\007\uff56\010\uff56\011\uff56\012\uff56\013\uff56\014" +
    "\uff56\015\uff56\016\uff56\017\uff56\020\uff56\021\uff56\022\uff56" +
    "\023\uff56\024\uff56\025\uff56\026\uff56\027\uff56\030\uff56\031" +
    "\uff56\032\uff56\033\uff56\034\uff56\035\uff56\036\uff56\037\uff56" +
    "\040\uff56\041\uff56\042\uff56\043\uff56\044\uff56\045\uff56\046" +
    "\uff56\047\uff56\050\uff56\051\uff56\052\uff56\053\uff56\054\uff56" +
    "\055\uff56\056\uff56\057\uff56\060\uff56\061\uff56\062\uff56\063" +
    "\uff56\064\uff56\065\uff56\066\uff56\067\uff56\070\uff56\071\uff56" +
    "\072\uff56\073\uff56\074\uff56\075\uff56\076\uff56\077\uff56\100" +
    "\uff56\101\uff56\102\uff56\103\uff56\104\uff56\105\uff56\106\uff56" +
    "\107\uff56\001\002\000\024\003\124\046\075\047\023\050" +
    "\063\051\115\052\022\053\126\056\122\107\uffc4\001\002" +
    "\000\216\002\uff59\003\uff59\004\uff59\005\uff59\006\uff59\007" +
    "\uff59\010\uff59\011\uff59\012\uff59\013\uff59\014\uff59\015\uff59" +
    "\016\uff59\017\uff59\020\uff59\021\uff59\022\uff59\023\uff59\024" +
    "\uff59\025\uff59\026\uff59\027\uff59\030\uff59\031\uff59\032\uff59" +
    "\033\uff59\034\uff59\035\uff59\036\uff59\037\uff59\040\uff59\041" +
    "\uff59\042\uff59\043\uff59\044\uff59\045\uff59\046\uff59\047\uff59" +
    "\050\uff59\051\uff59\052\uff59\053\uff59\054\uff59\055\uff59\056" +
    "\uff59\057\uff59\060\uff59\061\uff59\062\uff59\063\uff59\064\uff59" +
    "\065\uff59\066\uff59\067\uff59\070\uff59\071\uff59\072\uff59\073" +
    "\uff59\074\uff59\075\uff59\076\uff59\077\uff59\100\uff59\101\uff59" +
    "\102\uff59\103\uff59\104\uff59\105\uff59\106\uff59\107\uff59\001" +
    "\002\000\216\002\uff89\003\uff89\004\uff89\005\uff89\006\uff89" +
    "\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015" +
    "\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89" +
    "\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032" +
    "\uff89\033\uff89\034\uff89\035\uff89\036\uff89\037\uff89\040\uff89" +
    "\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047" +
    "\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054\uff89\055\uff89" +
    "\056\uff89\057\uff89\060\uff89\061\uff89\062\uff89\063\uff89\064" +
    "\uff89\065\uff89\066\uff89\067\uff89\070\uff89\071\uff89\072\uff89" +
    "\073\uff89\074\uff89\075\uff89\076\uff89\077\uff89\100\uff89\101" +
    "\uff89\102\uff89\103\uff89\104\uff89\105\uff89\106\uff89\107\uff89" +
    "\001\002\000\216\002\uff8c\003\uff8c\004\uff8c\005\uff8c\006" +
    "\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c" +
    "\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023" +
    "\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c" +
    "\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040" +
    "\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c" +
    "\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055" +
    "\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c" +
    "\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072" +
    "\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c" +
    "\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105\uff8c\106\uff8c\107" +
    "\uff8c\001\002\000\216\002\uff69\003\uff69\004\uff69\005\uff69" +
    "\006\uff69\007\uff69\010\uff69\011\uff69\012\uff69\013\uff69\014" +
    "\uff69\015\uff69\016\uff69\017\uff69\020\uff69\021\uff69\022\uff69" +
    "\023\uff69\024\uff69\025\uff69\026\uff69\027\uff69\030\uff69\031" +
    "\uff69\032\uff69\033\uff69\034\uff69\035\uff69\036\uff69\037\uff69" +
    "\040\uff69\041\uff69\042\uff69\043\uff69\044\uff69\045\uff69\046" +
    "\uff69\047\uff69\050\uff69\051\uff69\052\uff69\053\uff69\054\uff69" +
    "\055\uff69\056\uff69\057\uff69\060\uff69\061\uff69\062\uff69\063" +
    "\uff69\064\uff69\065\uff69\066\uff69\067\uff69\070\uff69\071\uff69" +
    "\072\uff69\073\uff69\074\uff69\075\uff69\076\uff69\077\uff69\100" +
    "\uff69\101\uff69\102\uff69\103\uff69\104\uff69\105\uff69\106\uff69" +
    "\107\uff69\001\002\000\216\002\uffb2\003\uffb2\004\uffb2\005" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2" +
    "\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071" +
    "\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2" +
    "\100\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2\106" +
    "\uffb2\107\uffb2\001\002\000\216\002\uff68\003\uff68\004\uff68" +
    "\005\uff68\006\uff68\007\uff68\010\uff68\011\uff68\012\uff68\013" +
    "\uff68\014\uff68\015\uff68\016\uff68\017\uff68\020\uff68\021\uff68" +
    "\022\uff68\023\uff68\024\uff68\025\uff68\026\uff68\027\uff68\030" +
    "\uff68\031\uff68\032\uff68\033\uff68\034\uff68\035\uff68\036\uff68" +
    "\037\uff68\040\uff68\041\uff68\042\uff68\043\uff68\044\uff68\045" +
    "\uff68\046\uff68\047\uff68\050\uff68\051\uff68\052\uff68\053\uff68" +
    "\054\uff68\055\uff68\056\uff68\057\uff68\060\uff68\061\uff68\062" +
    "\uff68\063\uff68\064\uff68\065\uff68\066\uff68\067\uff68\070\uff68" +
    "\071\uff68\072\uff68\073\uff68\074\uff68\075\uff68\076\uff68\077" +
    "\uff68\100\uff68\101\uff68\102\uff68\103\uff68\104\uff68\105\uff68" +
    "\106\uff68\107\uff68\001\002\000\216\002\uff70\003\uff70\004" +
    "\uff70\005\uff70\006\uff70\007\uff70\010\uff70\011\uff70\012\uff70" +
    "\013\uff70\014\uff70\015\uff70\016\uff70\017\uff70\020\uff70\021" +
    "\uff70\022\uff70\023\uff70\024\uff70\025\uff70\026\uff70\027\uff70" +
    "\030\uff70\031\uff70\032\uff70\033\uff70\034\uff70\035\uff70\036" +
    "\uff70\037\uff70\040\uff70\041\uff70\042\uff70\043\uff70\044\uff70" +
    "\045\uff70\046\uff70\047\uff70\050\uff70\051\uff70\052\uff70\053" +
    "\uff70\054\uff70\055\uff70\056\uff70\057\uff70\060\uff70\061\uff70" +
    "\062\uff70\063\uff70\064\uff70\065\uff70\066\uff70\067\uff70\070" +
    "\uff70\071\uff70\072\uff70\073\uff70\074\uff70\075\uff70\076\uff70" +
    "\077\uff70\100\uff70\101\uff70\102\uff70\103\uff70\104\uff70\105" +
    "\uff70\106\uff70\107\uff70\001\002\000\216\002\uff86\003\uff86" +
    "\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86\012" +
    "\uff86\013\uff86\014\uff86\015\uff86\016\uff86\017\uff86\020\uff86" +
    "\021\uff86\022\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027" +
    "\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86" +
    "\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044" +
    "\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86" +
    "\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061" +
    "\uff86\062\uff86\063\uff86\064\uff86\065\uff86\066\uff86\067\uff86" +
    "\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075\uff86\076" +
    "\uff86\077\uff86\100\uff86\101\uff86\102\uff86\103\uff86\104\uff86" +
    "\105\uff86\106\uff86\107\uff86\001\002\000\216\002\uff88\003" +
    "\uff88\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88" +
    "\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020" +
    "\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88" +
    "\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035" +
    "\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88" +
    "\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052" +
    "\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057\uff88\060\uff88" +
    "\061\uff88\062\uff88\063\uff88\064\uff88\065\uff88\066\uff88\067" +
    "\uff88\070\uff88\071\uff88\072\uff88\073\uff88\074\uff88\075\uff88" +
    "\076\uff88\077\uff88\100\uff88\101\uff88\102\uff88\103\uff88\104" +
    "\uff88\105\uff88\106\uff88\107\uff88\001\002\000\216\002\uff6c" +
    "\003\uff6c\004\uff6c\005\uff6c\006\uff6c\007\uff6c\010\uff6c\011" +
    "\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\016\uff6c\017\uff6c" +
    "\020\uff6c\021\uff6c\022\uff6c\023\uff6c\024\uff6c\025\uff6c\026" +
    "\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c\034\uff6c" +
    "\035\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043" +
    "\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c" +
    "\052\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c\060" +
    "\uff6c\061\uff6c\062\uff6c\063\uff6c\064\uff6c\065\uff6c\066\uff6c" +
    "\067\uff6c\070\uff6c\071\uff6c\072\uff6c\073\uff6c\074\uff6c\075" +
    "\uff6c\076\uff6c\077\uff6c\100\uff6c\101\uff6c\102\uff6c\103\uff6c" +
    "\104\uff6c\105\uff6c\106\uff6c\107\uff6c\001\002\000\216\002" +
    "\uffb1\003\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1" +
    "\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066" +
    "\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1" +
    "\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\102\uffb1\103" +
    "\uffb1\104\uffb1\105\uffb1\106\uffb1\107\uffb1\001\002\000\216" +
    "\002\uff80\003\uff80\004\uff80\005\uff80\006\uff80\007\uff80\010" +
    "\uff80\011\uff80\012\uff80\013\uff80\014\uff80\015\uff80\016\uff80" +
    "\017\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\025" +
    "\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80" +
    "\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042" +
    "\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80" +
    "\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057" +
    "\uff80\060\uff80\061\uff80\062\uff80\063\uff80\064\uff80\065\uff80" +
    "\066\uff80\067\uff80\070\uff80\071\uff80\072\uff80\073\uff80\074" +
    "\uff80\075\uff80\076\uff80\077\uff80\100\uff80\101\uff80\102\uff80" +
    "\103\uff80\104\uff80\105\uff80\106\uff80\107\uff80\001\002\000" +
    "\216\002\uff62\003\uff62\004\uff62\005\uff62\006\uff62\007\uff62" +
    "\010\uff62\011\uff62\012\uff62\013\uff62\014\uff62\015\uff62\016" +
    "\uff62\017\uff62\020\uff62\021\uff62\022\uff62\023\uff62\024\uff62" +
    "\025\uff62\026\uff62\027\uff62\030\uff62\031\uff62\032\uff62\033" +
    "\uff62\034\uff62\035\uff62\036\uff62\037\uff62\040\uff62\041\uff62" +
    "\042\uff62\043\uff62\044\uff62\045\uff62\046\uff62\047\uff62\050" +
    "\uff62\051\uff62\052\uff62\053\uff62\054\uff62\055\uff62\056\uff62" +
    "\057\uff62\060\uff62\061\uff62\062\uff62\063\uff62\064\uff62\065" +
    "\uff62\066\uff62\067\uff62\070\uff62\071\uff62\072\uff62\073\uff62" +
    "\074\uff62\075\uff62\076\uff62\077\uff62\100\uff62\101\uff62\102" +
    "\uff62\103\uff62\104\uff62\105\uff62\106\uff62\107\uff62\001\002" +
    "\000\216\002\uff65\003\uff65\004\uff65\005\uff65\006\uff65\007" +
    "\uff65\010\uff65\011\uff65\012\uff65\013\uff65\014\uff65\015\uff65" +
    "\016\uff65\017\uff65\020\uff65\021\uff65\022\uff65\023\uff65\024" +
    "\uff65\025\uff65\026\uff65\027\uff65\030\uff65\031\uff65\032\uff65" +
    "\033\uff65\034\uff65\035\uff65\036\uff65\037\uff65\040\uff65\041" +
    "\uff65\042\uff65\043\uff65\044\uff65\045\uff65\046\uff65\047\uff65" +
    "\050\uff65\051\uff65\052\uff65\053\uff65\054\uff65\055\uff65\056" +
    "\uff65\057\uff65\060\uff65\061\uff65\062\uff65\063\uff65\064\uff65" +
    "\065\uff65\066\uff65\067\uff65\070\uff65\071\uff65\072\uff65\073" +
    "\uff65\074\uff65\075\uff65\076\uff65\077\uff65\100\uff65\101\uff65" +
    "\102\uff65\103\uff65\104\uff65\105\uff65\106\uff65\107\uff65\001" +
    "\002\000\216\002\uff81\003\uff81\004\uff81\005\uff81\006\uff81" +
    "\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014\uff81\015" +
    "\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022\uff81\023\uff81" +
    "\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032" +
    "\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81" +
    "\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047" +
    "\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81" +
    "\056\uff81\057\uff81\060\uff81\061\uff81\062\uff81\063\uff81\064" +
    "\uff81\065\uff81\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81" +
    "\073\uff81\074\uff81\075\uff81\076\uff81\077\uff81\100\uff81\101" +
    "\uff81\102\uff81\103\uff81\104\uff81\105\uff81\106\uff81\107\uff81" +
    "\001\002\000\216\002\uff5a\003\uff5a\004\uff5a\005\uff5a\006" +
    "\uff5a\007\uff5a\010\uff5a\011\uff5a\012\uff5a\013\uff5a\014\uff5a" +
    "\015\uff5a\016\uff5a\017\uff5a\020\uff5a\021\uff5a\022\uff5a\023" +
    "\uff5a\024\uff5a\025\uff5a\026\uff5a\027\uff5a\030\uff5a\031\uff5a" +
    "\032\uff5a\033\uff5a\034\uff5a\035\uff5a\036\uff5a\037\uff5a\040" +
    "\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a\045\uff5a\046\uff5a" +
    "\047\uff5a\050\uff5a\051\uff5a\052\uff5a\053\uff5a\054\uff5a\055" +
    "\uff5a\056\uff5a\057\uff5a\060\uff5a\061\uff5a\062\uff5a\063\uff5a" +
    "\064\uff5a\065\uff5a\066\uff5a\067\uff5a\070\uff5a\071\uff5a\072" +
    "\uff5a\073\uff5a\074\uff5a\075\uff5a\076\uff5a\077\uff5a\100\uff5a" +
    "\101\uff5a\102\uff5a\103\uff5a\104\uff5a\105\uff5a\106\uff5a\107" +
    "\uff5a\001\002\000\216\002\uff5b\003\uff5b\004\uff5b\005\uff5b" +
    "\006\uff5b\007\uff5b\010\uff5b\011\uff5b\012\uff5b\013\uff5b\014" +
    "\uff5b\015\uff5b\016\uff5b\017\uff5b\020\uff5b\021\uff5b\022\uff5b" +
    "\023\uff5b\024\uff5b\025\uff5b\026\uff5b\027\uff5b\030\uff5b\031" +
    "\uff5b\032\uff5b\033\uff5b\034\uff5b\035\uff5b\036\uff5b\037\uff5b" +
    "\040\uff5b\041\uff5b\042\uff5b\043\uff5b\044\uff5b\045\uff5b\046" +
    "\uff5b\047\uff5b\050\uff5b\051\uff5b\052\uff5b\053\uff5b\054\uff5b" +
    "\055\uff5b\056\uff5b\057\uff5b\060\uff5b\061\uff5b\062\uff5b\063" +
    "\uff5b\064\uff5b\065\uff5b\066\uff5b\067\uff5b\070\uff5b\071\uff5b" +
    "\072\uff5b\073\uff5b\074\uff5b\075\uff5b\076\uff5b\077\uff5b\100" +
    "\uff5b\101\uff5b\102\uff5b\103\uff5b\104\uff5b\105\uff5b\106\uff5b" +
    "\107\uff5b\001\002\000\216\002\uff64\003\uff64\004\uff64\005" +
    "\uff64\006\uff64\007\uff64\010\uff64\011\uff64\012\uff64\013\uff64" +
    "\014\uff64\015\uff64\016\uff64\017\uff64\020\uff64\021\uff64\022" +
    "\uff64\023\uff64\024\uff64\025\uff64\026\uff64\027\uff64\030\uff64" +
    "\031\uff64\032\uff64\033\uff64\034\uff64\035\uff64\036\uff64\037" +
    "\uff64\040\uff64\041\uff64\042\uff64\043\uff64\044\uff64\045\uff64" +
    "\046\uff64\047\uff64\050\uff64\051\uff64\052\uff64\053\uff64\054" +
    "\uff64\055\uff64\056\uff64\057\uff64\060\uff64\061\uff64\062\uff64" +
    "\063\uff64\064\uff64\065\uff64\066\uff64\067\uff64\070\uff64\071" +
    "\uff64\072\uff64\073\uff64\074\uff64\075\uff64\076\uff64\077\uff64" +
    "\100\uff64\101\uff64\102\uff64\103\uff64\104\uff64\105\uff64\106" +
    "\uff64\107\uff64\001\002\000\216\002\uff58\003\uff58\004\uff58" +
    "\005\uff58\006\uff58\007\uff58\010\uff58\011\uff58\012\uff58\013" +
    "\uff58\014\uff58\015\uff58\016\uff58\017\uff58\020\uff58\021\uff58" +
    "\022\uff58\023\uff58\024\uff58\025\uff58\026\uff58\027\uff58\030" +
    "\uff58\031\uff58\032\uff58\033\uff58\034\uff58\035\uff58\036\uff58" +
    "\037\uff58\040\uff58\041\uff58\042\uff58\043\uff58\044\uff58\045" +
    "\uff58\046\uff58\047\uff58\050\uff58\051\uff58\052\uff58\053\uff58" +
    "\054\uff58\055\uff58\056\uff58\057\uff58\060\uff58\061\uff58\062" +
    "\uff58\063\uff58\064\uff58\065\uff58\066\uff58\067\uff58\070\uff58" +
    "\071\uff58\072\uff58\073\uff58\074\uff58\075\uff58\076\uff58\077" +
    "\uff58\100\uff58\101\uff58\102\uff58\103\uff58\104\uff58\105\uff58" +
    "\106\uff58\107\uff58\001\002\000\216\002\uff6f\003\uff6f\004" +
    "\uff6f\005\uff6f\006\uff6f\007\uff6f\010\uff6f\011\uff6f\012\uff6f" +
    "\013\uff6f\014\uff6f\015\uff6f\016\uff6f\017\uff6f\020\uff6f\021" +
    "\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f" +
    "\030\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036" +
    "\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f" +
    "\045\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053" +
    "\uff6f\054\uff6f\055\uff6f\056\uff6f\057\uff6f\060\uff6f\061\uff6f" +
    "\062\uff6f\063\uff6f\064\uff6f\065\uff6f\066\uff6f\067\uff6f\070" +
    "\uff6f\071\uff6f\072\uff6f\073\uff6f\074\uff6f\075\uff6f\076\uff6f" +
    "\077\uff6f\100\uff6f\101\uff6f\102\uff6f\103\uff6f\104\uff6f\105" +
    "\uff6f\106\uff6f\107\uff6f\001\002\000\216\002\uff71\003\uff71" +
    "\004\uff71\005\uff71\006\uff71\007\uff71\010\uff71\011\uff71\012" +
    "\uff71\013\uff71\014\uff71\015\uff71\016\uff71\017\uff71\020\uff71" +
    "\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71\026\uff71\027" +
    "\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71\035\uff71" +
    "\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71\044" +
    "\uff71\045\uff71\046\uff71\047\uff71\050\uff71\051\uff71\052\uff71" +
    "\053\uff71\054\uff71\055\uff71\056\uff71\057\uff71\060\uff71\061" +
    "\uff71\062\uff71\063\uff71\064\uff71\065\uff71\066\uff71\067\uff71" +
    "\070\uff71\071\uff71\072\uff71\073\uff71\074\uff71\075\uff71\076" +
    "\uff71\077\uff71\100\uff71\101\uff71\102\uff71\103\uff71\104\uff71" +
    "\105\uff71\106\uff71\107\uff71\001\002\000\216\002\uff54\003" +
    "\uff54\004\uff54\005\uff54\006\uff54\007\uff54\010\uff54\011\uff54" +
    "\012\uff54\013\uff54\014\uff54\015\uff54\016\uff54\017\uff54\020" +
    "\uff54\021\uff54\022\uff54\023\uff54\024\uff54\025\uff54\026\uff54" +
    "\027\uff54\030\uff54\031\uff54\032\uff54\033\uff54\034\uff54\035" +
    "\uff54\036\uff54\037\uff54\040\uff54\041\uff54\042\uff54\043\uff54" +
    "\044\uff54\045\uff54\046\uff54\047\uff54\050\uff54\051\uff54\052" +
    "\uff54\053\uff54\054\uff54\055\uff54\056\uff54\057\uff54\060\uff54" +
    "\061\uff54\062\uff54\063\uff54\064\uff54\065\uff54\066\uff54\067" +
    "\uff54\070\uff54\071\uff54\072\uff54\073\uff54\074\uff54\075\uff54" +
    "\076\uff54\077\uff54\100\uff54\101\uff54\102\uff54\103\uff54\104" +
    "\uff54\105\uff54\106\uff54\107\uff54\001\002\000\216\002\uffbb" +
    "\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb" +
    "\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075" +
    "\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb" +
    "\104\uffbb\105\uffbb\106\uffbb\107\uffbb\001\002\000\216\002" +
    "\uff52\003\uff52\004\uff52\005\uff52\006\uff52\007\uff52\010\uff52" +
    "\011\uff52\012\uff52\013\uff52\014\uff52\015\uff52\016\uff52\017" +
    "\uff52\020\uff52\021\uff52\022\uff52\023\uff52\024\uff52\025\uff52" +
    "\026\uff52\027\uff52\030\uff52\031\uff52\032\uff52\033\uff52\034" +
    "\uff52\035\uff52\036\uff52\037\uff52\040\uff52\041\uff52\042\uff52" +
    "\043\uff52\044\uff52\045\uff52\046\uff52\047\uff52\050\uff52\051" +
    "\uff52\052\uff52\053\uff52\054\uff52\055\uff52\056\uff52\057\uff52" +
    "\060\uff52\061\uff52\062\uff52\063\uff52\064\uff52\065\uff52\066" +
    "\uff52\067\uff52\070\uff52\071\uff52\072\uff52\073\uff52\074\uff52" +
    "\075\uff52\076\uff52\077\uff52\100\uff52\101\uff52\102\uff52\103" +
    "\uff52\104\uff52\105\uff52\106\uff52\107\uff52\001\002\000\216" +
    "\002\uff74\003\uff74\004\uff74\005\uff74\006\uff74\007\uff74\010" +
    "\uff74\011\uff74\012\uff74\013\uff74\014\uff74\015\uff74\016\uff74" +
    "\017\uff74\020\uff74\021\uff74\022\uff74\023\uff74\024\uff74\025" +
    "\uff74\026\uff74\027\uff74\030\uff74\031\uff74\032\uff74\033\uff74" +
    "\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74\041\uff74\042" +
    "\uff74\043\uff74\044\uff74\045\uff74\046\uff74\047\uff74\050\uff74" +
    "\051\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74\057" +
    "\uff74\060\uff74\061\uff74\062\uff74\063\uff74\064\uff74\065\uff74" +
    "\066\uff74\067\uff74\070\uff74\071\uff74\072\uff74\073\uff74\074" +
    "\uff74\075\uff74\076\uff74\077\uff74\100\uff74\101\uff74\102\uff74" +
    "\103\uff74\104\uff74\105\uff74\106\uff74\107\uff74\001\002\000" +
    "\216\002\uff75\003\uff75\004\uff75\005\uff75\006\uff75\007\uff75" +
    "\010\uff75\011\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016" +
    "\uff75\017\uff75\020\uff75\021\uff75\022\uff75\023\uff75\024\uff75" +
    "\025\uff75\026\uff75\027\uff75\030\uff75\031\uff75\032\uff75\033" +
    "\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75" +
    "\042\uff75\043\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050" +
    "\uff75\051\uff75\052\uff75\053\uff75\054\uff75\055\uff75\056\uff75" +
    "\057\uff75\060\uff75\061\uff75\062\uff75\063\uff75\064\uff75\065" +
    "\uff75\066\uff75\067\uff75\070\uff75\071\uff75\072\uff75\073\uff75" +
    "\074\uff75\075\uff75\076\uff75\077\uff75\100\uff75\101\uff75\102" +
    "\uff75\103\uff75\104\uff75\105\uff75\106\uff75\107\uff75\001\002" +
    "\000\004\027\116\001\002\000\216\002\uff5f\003\uff5f\004" +
    "\uff5f\005\uff5f\006\uff5f\007\uff5f\010\uff5f\011\uff5f\012\uff5f" +
    "\013\uff5f\014\uff5f\015\uff5f\016\uff5f\017\uff5f\020\uff5f\021" +
    "\uff5f\022\uff5f\023\uff5f\024\uff5f\025\uff5f\026\uff5f\027\uff5f" +
    "\030\uff5f\031\uff5f\032\uff5f\033\uff5f\034\uff5f\035\uff5f\036" +
    "\uff5f\037\uff5f\040\uff5f\041\uff5f\042\uff5f\043\uff5f\044\uff5f" +
    "\045\uff5f\046\uff5f\047\uff5f\050\uff5f\051\uff5f\052\uff5f\053" +
    "\uff5f\054\uff5f\055\uff5f\056\uff5f\057\uff5f\060\uff5f\061\uff5f" +
    "\062\uff5f\063\uff5f\064\uff5f\065\uff5f\066\uff5f\067\uff5f\070" +
    "\uff5f\071\uff5f\072\uff5f\073\uff5f\074\uff5f\075\uff5f\076\uff5f" +
    "\077\uff5f\100\uff5f\101\uff5f\102\uff5f\103\uff5f\104\uff5f\105" +
    "\uff5f\106\uff5f\107\uff5f\001\002\000\216\002\uff61\003\uff61" +
    "\004\uff61\005\uff61\006\uff61\007\uff61\010\uff61\011\uff61\012" +
    "\uff61\013\uff61\014\uff61\015\uff61\016\uff61\017\uff61\020\uff61" +
    "\021\uff61\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61\027" +
    "\uff61\030\uff61\031\uff61\032\uff61\033\uff61\034\uff61\035\uff61" +
    "\036\uff61\037\uff61\040\uff61\041\uff61\042\uff61\043\uff61\044" +
    "\uff61\045\uff61\046\uff61\047\uff61\050\uff61\051\uff61\052\uff61" +
    "\053\uff61\054\uff61\055\uff61\056\uff61\057\uff61\060\uff61\061" +
    "\uff61\062\uff61\063\uff61\064\uff61\065\uff61\066\uff61\067\uff61" +
    "\070\uff61\071\uff61\072\uff61\073\uff61\074\uff61\075\uff61\076" +
    "\uff61\077\uff61\100\uff61\101\uff61\102\uff61\103\uff61\104\uff61" +
    "\105\uff61\106\uff61\107\uff61\001\002\000\216\002\uff5e\003" +
    "\uff5e\004\uff5e\005\uff5e\006\uff5e\007\uff5e\010\uff5e\011\uff5e" +
    "\012\uff5e\013\uff5e\014\uff5e\015\uff5e\016\uff5e\017\uff5e\020" +
    "\uff5e\021\uff5e\022\uff5e\023\uff5e\024\uff5e\025\uff5e\026\uff5e" +
    "\027\uff5e\030\uff5e\031\uff5e\032\uff5e\033\uff5e\034\uff5e\035" +
    "\uff5e\036\uff5e\037\uff5e\040\uff5e\041\uff5e\042\uff5e\043\uff5e" +
    "\044\uff5e\045\uff5e\046\uff5e\047\uff5e\050\uff5e\051\uff5e\052" +
    "\uff5e\053\uff5e\054\uff5e\055\uff5e\056\uff5e\057\uff5e\060\uff5e" +
    "\061\uff5e\062\uff5e\063\uff5e\064\uff5e\065\uff5e\066\uff5e\067" +
    "\uff5e\070\uff5e\071\uff5e\072\uff5e\073\uff5e\074\uff5e\075\uff5e" +
    "\076\uff5e\077\uff5e\100\uff5e\101\uff5e\102\uff5e\103\uff5e\104" +
    "\uff5e\105\uff5e\106\uff5e\107\uff5e\001\002\000\216\002\uff8a" +
    "\003\uff8a\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011" +
    "\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a" +
    "\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026" +
    "\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a" +
    "\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043" +
    "\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a" +
    "\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060" +
    "\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a" +
    "\067\uff8a\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075" +
    "\uff8a\076\uff8a\077\uff8a\100\uff8a\101\uff8a\102\uff8a\103\uff8a" +
    "\104\uff8a\105\uff8a\106\uff8a\107\uff8a\001\002\000\216\002" +
    "\uff84\003\uff84\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84" +
    "\011\uff84\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84\017" +
    "\uff84\020\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84" +
    "\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034" +
    "\uff84\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84" +
    "\043\uff84\044\uff84\045\uff84\046\uff84\047\uff84\050\uff84\051" +
    "\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84" +
    "\060\uff84\061\uff84\062\uff84\063\uff84\064\uff84\065\uff84\066" +
    "\uff84\067\uff84\070\uff84\071\uff84\072\uff84\073\uff84\074\uff84" +
    "\075\uff84\076\uff84\077\uff84\100\uff84\101\uff84\102\uff84\103" +
    "\uff84\104\uff84\105\uff84\106\uff84\107\uff84\001\002\000\216" +
    "\002\uffbd\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd" +
    "\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074" +
    "\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd" +
    "\103\uffbd\104\uffbd\105\uffbd\106\uffbd\107\uffbd\001\002\000" +
    "\216\002\uff73\003\uff73\004\uff73\005\uff73\006\uff73\007\uff73" +
    "\010\uff73\011\uff73\012\uff73\013\uff73\014\uff73\015\uff73\016" +
    "\uff73\017\uff73\020\uff73\021\uff73\022\uff73\023\uff73\024\uff73" +
    "\025\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033" +
    "\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73\041\uff73" +
    "\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73\050" +
    "\uff73\051\uff73\052\uff73\053\uff73\054\uff73\055\uff73\056\uff73" +
    "\057\uff73\060\uff73\061\uff73\062\uff73\063\uff73\064\uff73\065" +
    "\uff73\066\uff73\067\uff73\070\uff73\071\uff73\072\uff73\073\uff73" +
    "\074\uff73\075\uff73\076\uff73\077\uff73\100\uff73\101\uff73\102" +
    "\uff73\103\uff73\104\uff73\105\uff73\106\uff73\107\uff73\001\002" +
    "\000\216\002\uff85\003\uff85\004\uff85\005\uff85\006\uff85\007" +
    "\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014\uff85\015\uff85" +
    "\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85\023\uff85\024" +
    "\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85" +
    "\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041" +
    "\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85" +
    "\050\uff85\051\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056" +
    "\uff85\057\uff85\060\uff85\061\uff85\062\uff85\063\uff85\064\uff85" +
    "\065\uff85\066\uff85\067\uff85\070\uff85\071\uff85\072\uff85\073" +
    "\uff85\074\uff85\075\uff85\076\uff85\077\uff85\100\uff85\101\uff85" +
    "\102\uff85\103\uff85\104\uff85\105\uff85\106\uff85\107\uff85\001" +
    "\002\000\216\002\uff6b\003\uff6b\004\uff6b\005\uff6b\006\uff6b" +
    "\007\uff6b\010\uff6b\011\uff6b\012\uff6b\013\uff6b\014\uff6b\015" +
    "\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b\022\uff6b\023\uff6b" +
    "\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b\032" +
    "\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b\040\uff6b" +
    "\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b\047" +
    "\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b\054\uff6b\055\uff6b" +
    "\056\uff6b\057\uff6b\060\uff6b\061\uff6b\062\uff6b\063\uff6b\064" +
    "\uff6b\065\uff6b\066\uff6b\067\uff6b\070\uff6b\071\uff6b\072\uff6b" +
    "\073\uff6b\074\uff6b\075\uff6b\076\uff6b\077\uff6b\100\uff6b\101" +
    "\uff6b\102\uff6b\103\uff6b\104\uff6b\105\uff6b\106\uff6b\107\uff6b" +
    "\001\002\000\216\002\uff82\003\uff82\004\uff82\005\uff82\006" +
    "\uff82\007\uff82\010\uff82\011\uff82\012\uff82\013\uff82\014\uff82" +
    "\015\uff82\016\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023" +
    "\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82" +
    "\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040" +
    "\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82" +
    "\047\uff82\050\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055" +
    "\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82\063\uff82" +
    "\064\uff82\065\uff82\066\uff82\067\uff82\070\uff82\071\uff82\072" +
    "\uff82\073\uff82\074\uff82\075\uff82\076\uff82\077\uff82\100\uff82" +
    "\101\uff82\102\uff82\103\uff82\104\uff82\105\uff82\106\uff82\107" +
    "\uff82\001\002\000\216\002\uff6d\003\uff6d\004\uff6d\005\uff6d" +
    "\006\uff6d\007\uff6d\010\uff6d\011\uff6d\012\uff6d\013\uff6d\014" +
    "\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d\021\uff6d\022\uff6d" +
    "\023\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031" +
    "\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d" +
    "\040\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d\045\uff6d\046" +
    "\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d\054\uff6d" +
    "\055\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d\063" +
    "\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d\070\uff6d\071\uff6d" +
    "\072\uff6d\073\uff6d\074\uff6d\075\uff6d\076\uff6d\077\uff6d\100" +
    "\uff6d\101\uff6d\102\uff6d\103\uff6d\104\uff6d\105\uff6d\106\uff6d" +
    "\107\uff6d\001\002\000\216\002\uff5d\003\uff5d\004\uff5d\005" +
    "\uff5d\006\uff5d\007\uff5d\010\uff5d\011\uff5d\012\uff5d\013\uff5d" +
    "\014\uff5d\015\uff5d\016\uff5d\017\uff5d\020\uff5d\021\uff5d\022" +
    "\uff5d\023\uff5d\024\uff5d\025\uff5d\026\uff5d\027\uff5d\030\uff5d" +
    "\031\uff5d\032\uff5d\033\uff5d\034\uff5d\035\uff5d\036\uff5d\037" +
    "\uff5d\040\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uff5d\045\uff5d" +
    "\046\uff5d\047\uff5d\050\uff5d\051\uff5d\052\uff5d\053\uff5d\054" +
    "\uff5d\055\uff5d\056\uff5d\057\uff5d\060\uff5d\061\uff5d\062\uff5d" +
    "\063\uff5d\064\uff5d\065\uff5d\066\uff5d\067\uff5d\070\uff5d\071" +
    "\uff5d\072\uff5d\073\uff5d\074\uff5d\075\uff5d\076\uff5d\077\uff5d" +
    "\100\uff5d\101\uff5d\102\uff5d\103\uff5d\104\uff5d\105\uff5d\106" +
    "\uff5d\107\uff5d\001\002\000\216\002\uff83\003\uff83\004\uff83" +
    "\005\uff83\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83\013" +
    "\uff83\014\uff83\015\uff83\016\uff83\017\uff83\020\uff83\021\uff83" +
    "\022\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030" +
    "\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83\036\uff83" +
    "\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045" +
    "\uff83\046\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053\uff83" +
    "\054\uff83\055\uff83\056\uff83\057\uff83\060\uff83\061\uff83\062" +
    "\uff83\063\uff83\064\uff83\065\uff83\066\uff83\067\uff83\070\uff83" +
    "\071\uff83\072\uff83\073\uff83\074\uff83\075\uff83\076\uff83\077" +
    "\uff83\100\uff83\101\uff83\102\uff83\103\uff83\104\uff83\105\uff83" +
    "\106\uff83\107\uff83\001\002\000\216\002\uff8b\003\uff8b\004" +
    "\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b" +
    "\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021" +
    "\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036" +
    "\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b" +
    "\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053" +
    "\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b" +
    "\062\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070" +
    "\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b" +
    "\077\uff8b\100\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105" +
    "\uff8b\106\uff8b\107\uff8b\001\002\000\216\002\uffb3\003\uffb3" +
    "\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061" +
    "\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3" +
    "\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076" +
    "\uffb3\077\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3" +
    "\105\uffb3\106\uffb3\107\uffb3\001\002\000\216\002\uff6e\003" +
    "\uff6e\004\uff6e\005\uff6e\006\uff6e\007\uff6e\010\uff6e\011\uff6e" +
    "\012\uff6e\013\uff6e\014\uff6e\015\uff6e\016\uff6e\017\uff6e\020" +
    "\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e" +
    "\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035" +
    "\uff6e\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e" +
    "\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e\052" +
    "\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e\057\uff6e\060\uff6e" +
    "\061\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e\066\uff6e\067" +
    "\uff6e\070\uff6e\071\uff6e\072\uff6e\073\uff6e\074\uff6e\075\uff6e" +
    "\076\uff6e\077\uff6e\100\uff6e\101\uff6e\102\uff6e\103\uff6e\104" +
    "\uff6e\105\uff6e\106\uff6e\107\uff6e\001\002\000\216\002\uff63" +
    "\003\uff63\004\uff63\005\uff63\006\uff63\007\uff63\010\uff63\011" +
    "\uff63\012\uff63\013\uff63\014\uff63\015\uff63\016\uff63\017\uff63" +
    "\020\uff63\021\uff63\022\uff63\023\uff63\024\uff63\025\uff63\026" +
    "\uff63\027\uff63\030\uff63\031\uff63\032\uff63\033\uff63\034\uff63" +
    "\035\uff63\036\uff63\037\uff63\040\uff63\041\uff63\042\uff63\043" +
    "\uff63\044\uff63\045\uff63\046\uff63\047\uff63\050\uff63\051\uff63" +
    "\052\uff63\053\uff63\054\uff63\055\uff63\056\uff63\057\uff63\060" +
    "\uff63\061\uff63\062\uff63\063\uff63\064\uff63\065\uff63\066\uff63" +
    "\067\uff63\070\uff63\071\uff63\072\uff63\073\uff63\074\uff63\075" +
    "\uff63\076\uff63\077\uff63\100\uff63\101\uff63\102\uff63\103\uff63" +
    "\104\uff63\105\uff63\106\uff63\107\uff63\001\002\000\216\002" +
    "\uff7f\003\uff7f\004\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f" +
    "\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f\016\uff7f\017" +
    "\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f\025\uff7f" +
    "\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034" +
    "\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f" +
    "\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051" +
    "\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f" +
    "\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f\066" +
    "\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f" +
    "\075\uff7f\076\uff7f\077\uff7f\100\uff7f\101\uff7f\102\uff7f\103" +
    "\uff7f\104\uff7f\105\uff7f\106\uff7f\107\uff7f\001\002\000\216" +
    "\002\uff6a\003\uff6a\004\uff6a\005\uff6a\006\uff6a\007\uff6a\010" +
    "\uff6a\011\uff6a\012\uff6a\013\uff6a\014\uff6a\015\uff6a\016\uff6a" +
    "\017\uff6a\020\uff6a\021\uff6a\022\uff6a\023\uff6a\024\uff6a\025" +
    "\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a" +
    "\034\uff6a\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a\042" +
    "\uff6a\043\uff6a\044\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a" +
    "\051\uff6a\052\uff6a\053\uff6a\054\uff6a\055\uff6a\056\uff6a\057" +
    "\uff6a\060\uff6a\061\uff6a\062\uff6a\063\uff6a\064\uff6a\065\uff6a" +
    "\066\uff6a\067\uff6a\070\uff6a\071\uff6a\072\uff6a\073\uff6a\074" +
    "\uff6a\075\uff6a\076\uff6a\077\uff6a\100\uff6a\101\uff6a\102\uff6a" +
    "\103\uff6a\104\uff6a\105\uff6a\106\uff6a\107\uff6a\001\002\000" +
    "\216\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050" +
    "\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065" +
    "\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb" +
    "\074\ufffb\075\ufffb\076\ufffb\077\ufffb\100\ufffb\101\ufffb\102" +
    "\ufffb\103\ufffb\104\ufffb\105\ufffb\106\ufffb\107\ufffb\001\002" +
    "\000\216\002\uff7d\003\uff7d\004\uff7d\005\uff7d\006\uff7d\007" +
    "\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d" +
    "\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024" +
    "\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d" +
    "\033\uff7d\034\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041" +
    "\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d" +
    "\050\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056" +
    "\uff7d\057\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d" +
    "\065\uff7d\066\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d\073" +
    "\uff7d\074\uff7d\075\uff7d\076\uff7d\077\uff7d\100\uff7d\101\uff7d" +
    "\102\uff7d\103\uff7d\104\uff7d\105\uff7d\106\uff7d\107\uff7d\001" +
    "\002\000\216\002\uffba\003\uffba\004\uffba\005\uffba\006\uffba" +
    "\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba" +
    "\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064" +
    "\uffba\065\uffba\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba" +
    "\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba\100\uffba\101" +
    "\uffba\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba\107\uffba" +
    "\001\002\000\216\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040" +
    "\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc" +
    "\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055" +
    "\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc" +
    "\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072" +
    "\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\100\ufffc" +
    "\101\ufffc\102\ufffc\103\ufffc\104\ufffc\105\ufffc\106\ufffc\107" +
    "\ufffc\001\002\000\004\107\uffc3\001\002\000\004\107\uffbf" +
    "\001\002\000\004\107\240\001\002\000\012\004\106\005" +
    "\041\006\047\007\032\001\002\000\004\056\223\001\002" +
    "\000\004\016\222\001\002\000\004\107\uffc2\001\002\000" +
    "\004\012\130\001\002\000\004\107\uffc1\001\002\000\022" +
    "\012\142\022\134\036\133\037\143\054\135\055\132\056" +
    "\140\106\131\001\002\000\046\010\uff98\011\uff98\013\uff98" +
    "\016\uff98\017\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025" +
    "\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98" +
    "\034\uff98\035\uff98\001\002\000\046\010\uff99\011\uff99\013" +
    "\uff99\016\uff99\017\uff99\021\uff99\022\uff99\023\uff99\024\uff99" +
    "\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033" +
    "\uff99\034\uff99\035\uff99\001\002\000\022\012\142\022\134" +
    "\036\133\037\143\054\135\055\132\056\140\106\131\001" +
    "\002\000\020\012\142\022\134\037\143\054\135\055\132" +
    "\056\140\106\131\001\002\000\046\010\uff9a\011\uff9a\013" +
    "\uff9a\016\uff9a\017\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033" +
    "\uff9a\034\uff9a\035\uff9a\001\002\000\046\010\uff96\011\uff96" +
    "\013\uff96\016\uff96\017\uff96\021\uff96\022\uff96\023\uff96\024" +
    "\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96" +
    "\033\uff96\034\uff96\035\uff96\001\002\000\010\013\216\034" +
    "\167\035\165\001\002\000\046\010\uff97\011\uff97\013\uff97" +
    "\016\uff97\017\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025" +
    "\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97" +
    "\034\uff97\035\uff97\001\002\000\046\010\174\011\206\013" +
    "\uffaa\016\uffaa\017\uffaa\021\176\022\172\023\201\024\207" +
    "\025\205\026\200\027\175\030\173\031\177\032\204\033" +
    "\203\034\uffaa\035\uffaa\001\002\000\022\012\142\022\134" +
    "\036\133\037\143\054\135\055\132\056\140\106\131\001" +
    "\002\000\004\020\144\001\002\000\012\040\151\041\147" +
    "\044\146\045\150\001\002\000\004\016\163\001\002\000" +
    "\010\014\uff8d\016\uff8d\020\uff8d\001\002\000\010\014\uff8f" +
    "\016\uff8f\020\uff8f\001\002\000\010\014\uff8e\016\uff8e\020" +
    "\uff8e\001\002\000\004\016\uff94\001\002\000\010\014\154" +
    "\016\uff93\020\153\001\002\000\006\042\162\043\161\001" +
    "\002\000\004\054\155\001\002\000\004\015\156\001\002" +
    "\000\004\020\157\001\002\000\004\042\160\001\002\000" +
    "\004\016\uff90\001\002\000\004\016\uff91\001\002\000\004" +
    "\016\uff92\001\002\000\046\010\uff95\011\uff95\013\uff95\016" +
    "\uff95\017\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95" +
    "\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034" +
    "\uff95\035\uff95\001\002\000\010\013\166\034\167\035\165" +
    "\001\002\000\022\012\142\022\134\036\133\037\143\054" +
    "\135\055\132\056\140\106\131\001\002\000\046\010\uff9b" +
    "\011\uff9b\013\uff9b\016\uff9b\017\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\033\uff9b\034\uff9b\035\uff9b\001\002\000\022\012" +
    "\142\022\134\036\133\037\143\054\135\055\132\056\140" +
    "\106\131\001\002\000\014\013\uffad\016\uffad\017\uffad\034" +
    "\uffad\035\uffad\001\002\000\014\013\uffae\016\uffae\017\uffae" +
    "\034\uffae\035\uffae\001\002\000\020\012\142\022\134\037" +
    "\143\054\135\055\132\056\140\106\131\001\002\000\020" +
    "\012\uffa6\022\uffa6\037\uffa6\054\uffa6\055\uffa6\056\uffa6\106" +
    "\uffa6\001\002\000\046\010\uff9d\011\uff9d\013\uff9d\016\uff9d" +
    "\017\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d" +
    "\035\uff9d\001\002\000\020\012\uffa5\022\uffa5\037\uffa5\054" +
    "\uffa5\055\uffa5\056\uffa5\106\uffa5\001\002\000\020\012\142" +
    "\022\134\037\143\054\135\055\132\056\140\106\131\001" +
    "\002\000\020\012\uffa7\022\uffa7\037\uffa7\054\uffa7\055\uffa7" +
    "\056\uffa7\106\uffa7\001\002\000\020\012\uffa4\022\uffa4\037" +
    "\uffa4\054\uffa4\055\uffa4\056\uffa4\106\uffa4\001\002\000\020" +
    "\012\142\022\134\037\143\054\135\055\132\056\140\106" +
    "\131\001\002\000\020\012\142\022\134\037\143\054\135" +
    "\055\132\056\140\106\131\001\002\000\020\012\uffa8\022" +
    "\uffa8\037\uffa8\054\uffa8\055\uffa8\056\uffa8\106\uffa8\001\002" +
    "\000\020\012\uffa9\022\uffa9\037\uffa9\054\uffa9\055\uffa9\056" +
    "\uffa9\106\uffa9\001\002\000\020\012\142\022\134\037\143" +
    "\054\135\055\132\056\140\106\131\001\002\000\046\010" +
    "\uff9c\011\uff9c\013\uff9c\016\uff9c\017\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\001\002\000\020" +
    "\012\142\022\134\037\143\054\135\055\132\056\140\106" +
    "\131\001\002\000\046\010\uffa0\011\uffa0\013\uffa0\016\uffa0" +
    "\017\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\205\026" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0" +
    "\035\uffa0\001\002\000\046\010\uff9f\011\uff9f\013\uff9f\016" +
    "\uff9f\017\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f" +
    "\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034" +
    "\uff9f\035\uff9f\001\002\000\032\010\174\011\206\013\uffab" +
    "\016\uffab\017\uffab\021\176\022\172\023\201\024\207\025" +
    "\205\034\uffab\035\uffab\001\002\000\046\010\uffa1\011\uffa1" +
    "\013\uffa1\016\uffa1\017\uffa1\021\uffa1\022\uffa1\023\uffa1\024" +
    "\uffa1\025\205\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1" +
    "\033\uffa1\034\uffa1\035\uffa1\001\002\000\046\010\uffa3\011" +
    "\uffa3\013\uffa3\016\uffa3\017\uffa3\021\uffa3\022\uffa3\023\201" +
    "\024\207\025\205\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\001\002\000\046\010\uffa2" +
    "\011\uffa2\013\uffa2\016\uffa2\017\uffa2\021\uffa2\022\uffa2\023" +
    "\201\024\207\025\205\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\034\uffa2\035\uffa2\001\002\000\004\016" +
    "\217\001\002\000\004\107\uffaf\001\002\000\046\010\uff9e" +
    "\011\uff9e\013\uff9e\016\uff9e\017\uff9e\021\uff9e\022\uff9e\023" +
    "\201\024\207\025\205\026\uff9e\027\uff9e\030\uff9e\031\uff9e" +
    "\032\uff9e\033\uff9e\034\uff9e\035\uff9e\001\002\000\014\013" +
    "\uffac\016\uffac\017\uffac\034\uffac\035\uffac\001\002\000\004" +
    "\107\uffc0\001\002\000\010\004\230\016\uffc4\017\uffc4\001" +
    "\002\000\006\016\226\017\225\001\002\000\004\056\227" +
    "\001\002\000\004\107\uffbe\001\002\000\010\004\230\016" +
    "\uffc4\017\uffc4\001\002\000\022\012\142\022\134\036\133" +
    "\037\143\054\135\055\132\056\140\106\131\001\002\000" +
    "\006\016\uffb5\017\uffb5\001\002\000\006\016\uffb8\017\uffb8" +
    "\001\002\000\012\016\uffb6\017\uffb6\034\167\035\165\001" +
    "\002\000\006\016\uffb7\017\uffb7\001\002\000\022\012\142" +
    "\022\134\036\133\037\143\054\135\055\132\056\140\106" +
    "\131\001\002\000\010\016\237\034\167\035\165\001\002" +
    "\000\004\107\uffb4\001\002\000\216\002\ufffe\003\ufffe\004" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe" +
    "\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053" +
    "\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe" +
    "\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070" +
    "\ufffe\071\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe\076\ufffe" +
    "\077\ufffe\100\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105" +
    "\ufffe\106\ufffe\107\ufffe\001\002\000\216\002\001\003\001" +
    "\004\001\005\001\006\001\007\001\010\001\011\001\012" +
    "\001\013\001\014\001\015\001\016\001\017\001\020\001" +
    "\021\001\022\001\023\001\024\001\025\001\026\001\027" +
    "\001\030\001\031\001\032\001\033\001\034\001\035\001" +
    "\036\001\037\001\040\001\041\001\042\001\043\001\044" +
    "\001\045\001\046\001\047\001\050\001\051\001\052\001" +
    "\053\001\054\001\055\001\056\001\057\001\060\001\061" +
    "\001\062\001\063\001\064\001\065\001\066\001\067\001" +
    "\070\001\071\001\072\001\073\001\074\001\075\001\076" +
    "\001\077\001\100\001\101\001\102\001\103\001\104\001" +
    "\105\001\106\001\107\001\001\002\000\004\002\000\001" +
    "\002\000\004\027\244\001\002\000\214\003\253\004\106" +
    "\005\041\006\047\007\032\010\062\011\015\012\033\013" +
    "\031\014\055\015\054\016\030\017\035\020\057\021\103" +
    "\022\021\023\072\024\070\025\013\026\247\027\071\030" +
    "\051\031\110\032\056\033\052\034\016\035\026\036\042" +
    "\037\040\040\112\041\100\042\046\043\102\044\060\045" +
    "\107\046\075\047\023\050\063\051\115\052\022\053\061" +
    "\054\036\055\045\056\073\057\027\060\076\061\065\062" +
    "\066\063\012\064\011\065\010\066\007\067\006\070\005" +
    "\071\014\072\114\073\004\074\111\075\050\076\053\077" +
    "\101\100\104\101\074\102\077\103\044\104\024\105\037" +
    "\106\105\107\251\001\002\000\214\003\253\004\106\005" +
    "\041\006\047\007\032\010\062\011\015\012\033\013\031" +
    "\014\055\015\054\016\030\017\035\020\057\021\103\022" +
    "\021\023\072\024\070\025\013\026\247\027\071\030\051" +
    "\031\110\032\056\033\052\034\016\035\026\036\042\037" +
    "\040\040\112\041\100\042\046\043\102\044\060\045\107" +
    "\046\075\047\023\050\063\051\115\052\022\053\061\054" +
    "\036\055\045\056\073\057\027\060\076\061\065\062\066" +
    "\063\012\064\011\065\010\066\007\067\006\070\005\071" +
    "\014\072\114\073\004\074\111\075\050\076\053\077\101" +
    "\100\104\101\074\102\077\103\044\104\024\105\037\106" +
    "\105\107\251\001\002\000\004\026\u0152\001\002\000\006" +
    "\060\261\061\260\001\002\000\214\003\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037" +
    "\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7" +
    "\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054" +
    "\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7" +
    "\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7\071" +
    "\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7" +
    "\100\ufff7\101\ufff7\102\ufff7\103\ufff7\104\ufff7\105\ufff7\106" +
    "\ufff7\107\ufff7\001\002\000\024\003\124\046\075\047\023" +
    "\050\063\051\115\052\022\053\126\056\122\107\uffc4\001" +
    "\002\000\004\026\ufff9\001\002\000\004\027\255\001\002" +
    "\000\214\003\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2" +
    "\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074" +
    "\ufff2\075\ufff2\076\ufff2\077\ufff2\100\ufff2\101\ufff2\102\ufff2" +
    "\103\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2\001\002\000" +
    "\214\003\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3" +
    "\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3" +
    "\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066" +
    "\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3" +
    "\075\ufff3\076\ufff3\077\ufff3\100\ufff3\101\ufff3\102\ufff3\103" +
    "\ufff3\104\ufff3\105\ufff3\106\ufff3\107\ufff3\001\002\000\004" +
    "\107\257\001\002\000\214\003\ufff6\004\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055" +
    "\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6" +
    "\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\072" +
    "\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6" +
    "\101\ufff6\102\ufff6\103\ufff6\104\ufff6\105\ufff6\106\ufff6\107" +
    "\ufff6\001\002\000\004\027\316\001\002\000\004\027\262" +
    "\001\002\000\214\003\267\004\106\005\041\006\047\007" +
    "\032\010\062\011\015\012\033\013\031\014\055\015\054" +
    "\016\030\017\035\020\057\021\103\022\021\023\072\024" +
    "\070\025\013\026\263\027\071\030\051\031\110\032\056" +
    "\033\052\034\016\035\026\036\042\037\040\040\112\041" +
    "\100\042\046\043\102\044\060\045\107\046\075\047\023" +
    "\050\063\051\115\052\022\053\061\054\036\055\045\056" +
    "\073\057\027\060\076\061\065\062\066\063\012\064\011" +
    "\065\010\066\007\067\006\070\005\071\014\072\114\073" +
    "\004\074\111\075\050\076\053\077\101\100\104\101\074" +
    "\102\077\103\044\104\024\105\037\106\105\107\264\001" +
    "\002\000\004\062\274\001\002\000\024\003\124\046\075" +
    "\047\023\050\063\051\115\052\022\053\126\056\122\107" +
    "\uffc4\001\002\000\214\003\267\004\106\005\041\006\047" +
    "\007\032\010\062\011\015\012\033\013\031\014\055\015" +
    "\054\016\030\017\035\020\057\021\103\022\021\023\072" +
    "\024\070\025\013\026\272\027\071\030\051\031\110\032" +
    "\056\033\052\034\016\035\026\036\042\037\040\040\112" +
    "\041\100\042\046\043\102\044\060\045\107\046\075\047" +
    "\023\050\063\051\115\052\022\053\061\054\036\055\045" +
    "\056\073\057\027\060\076\061\065\062\066\063\012\064" +
    "\011\065\010\066\007\067\006\070\005\071\014\072\114" +
    "\073\004\074\111\075\050\076\053\077\101\100\104\101" +
    "\074\102\077\103\044\104\024\105\037\106\105\107\264" +
    "\001\002\000\214\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041" +
    "\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0" +
    "\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0" +
    "\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0\073" +
    "\ufff0\074\ufff0\075\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0" +
    "\102\ufff0\103\ufff0\104\ufff0\105\ufff0\106\ufff0\107\ufff0\001" +
    "\002\000\004\027\271\001\002\000\214\003\uffec\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045" +
    "\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec" +
    "\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062" +
    "\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070\uffec" +
    "\071\uffec\072\uffec\073\uffec\074\uffec\075\uffec\076\uffec\077" +
    "\uffec\100\uffec\101\uffec\102\uffec\103\uffec\104\uffec\105\uffec" +
    "\106\uffec\107\uffec\001\002\000\214\003\uffed\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed" +
    "\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054" +
    "\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed" +
    "\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071" +
    "\uffed\072\uffed\073\uffed\074\uffed\075\uffed\076\uffed\077\uffed" +
    "\100\uffed\101\uffed\102\uffed\103\uffed\104\uffed\105\uffed\106" +
    "\uffed\107\uffed\001\002\000\006\024\275\062\274\001\002" +
    "\000\214\003\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1" +
    "\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074" +
    "\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\102\ufff1" +
    "\103\ufff1\104\ufff1\105\ufff1\106\ufff1\107\ufff1\001\002\000" +
    "\004\027\300\001\002\000\004\060\276\001\002\000\004" +
    "\027\277\001\002\000\214\003\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040" +
    "\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5" +
    "\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5" +
    "\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5\072" +
    "\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5\100\ufff5" +
    "\101\ufff5\102\ufff5\103\ufff5\104\ufff5\105\ufff5\106\ufff5\107" +
    "\ufff5\001\002\000\210\004\106\005\041\006\047\007\032" +
    "\010\062\011\015\012\033\013\031\014\055\015\054\016" +
    "\030\017\035\020\057\021\103\022\021\023\072\024\070" +
    "\025\013\027\071\030\051\031\110\032\056\033\052\034" +
    "\016\035\026\036\042\037\040\040\112\041\100\042\046" +
    "\043\102\044\060\045\107\046\075\047\023\050\063\051" +
    "\115\052\022\053\061\054\036\055\045\056\073\057\027" +
    "\060\076\061\065\062\066\063\012\064\011\065\010\066" +
    "\007\067\006\070\005\071\014\072\114\073\004\074\111" +
    "\075\050\076\053\077\101\100\104\101\074\102\077\103" +
    "\044\104\024\105\037\106\105\107\303\001\002\000\212" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea" +
    "\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061" +
    "\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067\uffea" +
    "\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075\uffea\076" +
    "\uffea\077\uffea\100\uffea\101\uffea\102\uffea\103\uffea\104\uffea" +
    "\105\uffea\106\uffea\107\uffea\001\002\000\212\004\106\005" +
    "\041\006\047\007\032\010\062\011\015\012\033\013\031" +
    "\014\055\015\054\016\030\017\035\020\057\021\103\022" +
    "\021\023\072\024\070\025\013\026\310\027\071\030\051" +
    "\031\110\032\056\033\052\034\016\035\026\036\042\037" +
    "\040\040\112\041\100\042\046\043\102\044\060\045\107" +
    "\046\075\047\023\050\063\051\115\052\022\053\061\054" +
    "\036\055\045\056\073\057\027\060\076\061\065\062\066" +
    "\063\012\064\011\065\010\066\007\067\006\070\005\071" +
    "\014\072\114\073\004\074\111\075\050\076\053\077\101" +
    "\100\104\101\074\102\077\103\044\104\024\105\037\106" +
    "\105\107\303\001\002\000\024\003\124\046\075\047\023" +
    "\050\063\051\115\052\022\053\126\056\122\107\uffc4\001" +
    "\002\000\212\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8" +
    "\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066" +
    "\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8" +
    "\075\uffe8\076\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103" +
    "\uffe8\104\uffe8\105\uffe8\106\uffe8\107\uffe8\001\002\000\004" +
    "\107\306\001\002\000\212\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9" +
    "\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9" +
    "\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073" +
    "\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\100\uffe9\101\uffe9" +
    "\102\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9\107\uffe9\001" +
    "\002\000\212\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb" +
    "\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066" +
    "\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb" +
    "\075\uffeb\076\uffeb\077\uffeb\100\uffeb\101\uffeb\102\uffeb\103" +
    "\uffeb\104\uffeb\105\uffeb\106\uffeb\107\uffeb\001\002\000\004" +
    "\024\311\001\002\000\004\062\312\001\002\000\004\027" +
    "\313\001\002\000\214\003\uffee\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee" +
    "\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064" +
    "\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee" +
    "\073\uffee\074\uffee\075\uffee\076\uffee\077\uffee\100\uffee\101" +
    "\uffee\102\uffee\103\uffee\104\uffee\105\uffee\106\uffee\107\uffee" +
    "\001\002\000\004\107\315\001\002\000\214\003\uffef\004" +
    "\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef" +
    "\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036" +
    "\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef" +
    "\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053" +
    "\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef" +
    "\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef\070" +
    "\uffef\071\uffef\072\uffef\073\uffef\074\uffef\075\uffef\076\uffef" +
    "\077\uffef\100\uffef\101\uffef\102\uffef\103\uffef\104\uffef\105" +
    "\uffef\106\uffef\107\uffef\001\002\000\214\003\323\004\106" +
    "\005\041\006\047\007\032\010\062\011\015\012\033\013" +
    "\031\014\055\015\054\016\030\017\035\020\057\021\103" +
    "\022\021\023\072\024\070\025\013\026\317\027\071\030" +
    "\051\031\110\032\056\033\052\034\016\035\026\036\042" +
    "\037\040\040\112\041\100\042\046\043\102\044\060\045" +
    "\107\046\075\047\023\050\063\051\115\052\022\053\061" +
    "\054\036\055\045\056\073\057\027\060\076\061\065\062" +
    "\066\063\012\064\011\065\010\066\007\067\006\070\005" +
    "\071\014\072\114\073\004\074\111\075\050\076\053\077" +
    "\101\100\104\101\074\102\077\103\044\104\024\105\037" +
    "\106\105\107\321\001\002\000\030\063\344\064\343\065" +
    "\342\066\341\067\340\070\335\071\336\075\337\076\334" +
    "\077\333\100\332\001\002\000\214\003\323\004\106\005" +
    "\041\006\047\007\032\010\062\011\015\012\033\013\031" +
    "\014\055\015\054\016\030\017\035\020\057\021\103\022" +
    "\021\023\072\024\070\025\013\026\330\027\071\030\051" +
    "\031\110\032\056\033\052\034\016\035\026\036\042\037" +
    "\040\040\112\041\100\042\046\043\102\044\060\045\107" +
    "\046\075\047\023\050\063\051\115\052\022\053\061\054" +
    "\036\055\045\056\073\057\027\060\076\061\065\062\066" +
    "\063\012\064\011\065\010\066\007\067\006\070\005\071" +
    "\014\072\114\073\004\074\111\075\050\076\053\077\101" +
    "\100\104\101\074\102\077\103\044\104\024\105\037\106" +
    "\105\107\321\001\002\000\024\003\124\046\075\047\023" +
    "\050\063\051\115\052\022\053\126\056\122\107\uffc4\001" +
    "\002\000\214\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6" +
    "\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050" +
    "\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065" +
    "\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6" +
    "\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6\101\uffe6\102" +
    "\uffe6\103\uffe6\104\uffe6\105\uffe6\106\uffe6\107\uffe6\001\002" +
    "\000\004\027\325\001\002\000\214\003\uffd8\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8" +
    "\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054" +
    "\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8" +
    "\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\071" +
    "\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8" +
    "\100\uffd8\101\uffd8\102\uffd8\103\uffd8\104\uffd8\105\uffd8\106" +
    "\uffd8\107\uffd8\001\002\000\214\003\uffd9\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063" +
    "\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9" +
    "\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100" +
    "\uffd9\101\uffd9\102\uffd9\103\uffd9\104\uffd9\105\uffd9\106\uffd9" +
    "\107\uffd9\001\002\000\004\107\327\001\002\000\214\003" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5" +
    "\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067" +
    "\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5" +
    "\076\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5\103\uffe5\104" +
    "\uffe5\105\uffe5\106\uffe5\107\uffe5\001\002\000\032\024\345" +
    "\063\344\064\343\065\342\066\341\067\340\070\335\071" +
    "\336\075\337\076\334\077\333\100\332\001\002\000\214" +
    "\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060" +
    "\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7" +
    "\067\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075" +
    "\uffe7\076\uffe7\077\uffe7\100\uffe7\101\uffe7\102\uffe7\103\uffe7" +
    "\104\uffe7\105\uffe7\106\uffe7\107\uffe7\001\002\000\004\027" +
    "\u0151\001\002\000\004\027\u0150\001\002\000\004\027\u013f" +
    "\001\002\000\004\027\u0139\001\002\000\004\027\u010c\001" +
    "\002\000\004\027\u0106\001\002\000\004\027\u0100\001\002" +
    "\000\004\027\372\001\002\000\004\027\364\001\002\000" +
    "\004\027\356\001\002\000\004\027\350\001\002\000\004" +
    "\061\346\001\002\000\004\027\347\001\002\000\214\003" +
    "\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4" +
    "\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067" +
    "\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4" +
    "\076\ufff4\077\ufff4\100\ufff4\101\ufff4\102\ufff4\103\ufff4\104" +
    "\ufff4\105\ufff4\106\ufff4\107\ufff4\001\002\000\210\004\106" +
    "\005\041\006\047\007\032\010\062\011\015\012\033\013" +
    "\031\014\055\015\054\016\030\017\035\020\057\021\103" +
    "\022\021\023\072\024\070\025\013\027\071\030\051\031" +
    "\110\032\056\033\052\034\016\035\026\036\042\037\040" +
    "\040\112\041\100\042\046\043\102\044\060\045\107\046" +
    "\075\047\023\050\063\051\115\052\022\053\061\054\036" +
    "\055\045\056\073\057\027\060\076\061\065\062\066\063" +
    "\012\064\011\065\010\066\007\067\006\070\005\071\014" +
    "\072\114\073\004\074\111\075\050\076\053\077\101\100" +
    "\104\101\074\102\077\103\044\104\024\105\037\106\105" +
    "\107\303\001\002\000\212\004\106\005\041\006\047\007" +
    "\032\010\062\011\015\012\033\013\031\014\055\015\054" +
    "\016\030\017\035\020\057\021\103\022\021\023\072\024" +
    "\070\025\013\026\352\027\071\030\051\031\110\032\056" +
    "\033\052\034\016\035\026\036\042\037\040\040\112\041" +
    "\100\042\046\043\102\044\060\045\107\046\075\047\023" +
    "\050\063\051\115\052\022\053\061\054\036\055\045\056" +
    "\073\057\027\060\076\061\065\062\066\063\012\064\011" +
    "\065\010\066\007\067\006\070\005\071\014\072\114\073" +
    "\004\074\111\075\050\076\053\077\101\100\104\101\074" +
    "\102\077\103\044\104\024\105\037\106\105\107\303\001" +
    "\002\000\004\024\353\001\002\000\004\063\354\001\002" +
    "\000\004\027\355\001\002\000\214\003\uffe4\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4" +
    "\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4" +
    "\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071" +
    "\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4" +
    "\100\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4\105\uffe4\106" +
    "\uffe4\107\uffe4\001\002\000\210\004\106\005\041\006\047" +
    "\007\032\010\062\011\015\012\033\013\031\014\055\015" +
    "\054\016\030\017\035\020\057\021\103\022\021\023\072" +
    "\024\070\025\013\027\071\030\051\031\110\032\056\033" +
    "\052\034\016\035\026\036\042\037\040\040\112\041\100" +
    "\042\046\043\102\044\060\045\107\046\075\047\023\050" +
    "\063\051\115\052\022\053\061\054\036\055\045\056\073" +
    "\057\027\060\076\061\065\062\066\063\012\064\011\065" +
    "\010\066\007\067\006\070\005\071\014\072\114\073\004" +
    "\074\111\075\050\076\053\077\101\100\104\101\074\102" +
    "\077\103\044\104\024\105\037\106\105\107\303\001\002" +
    "\000\212\004\106\005\041\006\047\007\032\010\062\011" +
    "\015\012\033\013\031\014\055\015\054\016\030\017\035" +
    "\020\057\021\103\022\021\023\072\024\070\025\013\026" +
    "\360\027\071\030\051\031\110\032\056\033\052\034\016" +
    "\035\026\036\042\037\040\040\112\041\100\042\046\043" +
    "\102\044\060\045\107\046\075\047\023\050\063\051\115" +
    "\052\022\053\061\054\036\055\045\056\073\057\027\060" +
    "\076\061\065\062\066\063\012\064\011\065\010\066\007" +
    "\067\006\070\005\071\014\072\114\073\004\074\111\075" +
    "\050\076\053\077\101\100\104\101\074\102\077\103\044" +
    "\104\024\105\037\106\105\107\303\001\002\000\004\024" +
    "\361\001\002\000\004\064\362\001\002\000\004\027\363" +
    "\001\002\000\214\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073" +
    "\uffe3\074\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3" +
    "\102\uffe3\103\uffe3\104\uffe3\105\uffe3\106\uffe3\107\uffe3\001" +
    "\002\000\210\004\106\005\041\006\047\007\032\010\062" +
    "\011\015\012\033\013\031\014\055\015\054\016\030\017" +
    "\035\020\057\021\103\022\021\023\072\024\070\025\013" +
    "\027\071\030\051\031\110\032\056\033\052\034\016\035" +
    "\026\036\042\037\040\040\112\041\100\042\046\043\102" +
    "\044\060\045\107\046\075\047\023\050\063\051\115\052" +
    "\022\053\061\054\036\055\045\056\073\057\027\060\076" +
    "\061\065\062\066\063\012\064\011\065\010\066\007\067" +
    "\006\070\005\071\014\072\114\073\004\074\111\075\050" +
    "\076\053\077\101\100\104\101\074\102\077\103\044\104" +
    "\024\105\037\106\105\107\303\001\002\000\212\004\106" +
    "\005\041\006\047\007\032\010\062\011\015\012\033\013" +
    "\031\014\055\015\054\016\030\017\035\020\057\021\103" +
    "\022\021\023\072\024\070\025\013\026\366\027\071\030" +
    "\051\031\110\032\056\033\052\034\016\035\026\036\042" +
    "\037\040\040\112\041\100\042\046\043\102\044\060\045" +
    "\107\046\075\047\023\050\063\051\115\052\022\053\061" +
    "\054\036\055\045\056\073\057\027\060\076\061\065\062" +
    "\066\063\012\064\011\065\010\066\007\067\006\070\005" +
    "\071\014\072\114\073\004\074\111\075\050\076\053\077" +
    "\101\100\104\101\074\102\077\103\044\104\024\105\037" +
    "\106\105\107\303\001\002\000\004\024\367\001\002\000" +
    "\004\065\370\001\002\000\004\027\371\001\002\000\214" +
    "\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2" +
    "\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075" +
    "\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2\102\uffe2\103\uffe2" +
    "\104\uffe2\105\uffe2\106\uffe2\107\uffe2\001\002\000\210\004" +
    "\106\005\041\006\047\007\032\010\062\011\015\012\033" +
    "\013\031\014\055\015\054\016\030\017\035\020\057\021" +
    "\103\022\021\023\072\024\070\025\013\027\071\030\051" +
    "\031\110\032\056\033\052\034\016\035\026\036\042\037" +
    "\040\040\112\041\100\042\046\043\102\044\060\045\107" +
    "\046\075\047\023\050\063\051\115\052\022\053\061\054" +
    "\036\055\045\056\073\057\027\060\076\061\065\062\066" +
    "\063\012\064\011\065\010\066\007\067\006\070\005\071" +
    "\014\072\114\073\004\074\111\075\050\076\053\077\101" +
    "\100\104\101\074\102\077\103\044\104\024\105\037\106" +
    "\105\107\303\001\002\000\212\004\106\005\041\006\047" +
    "\007\032\010\062\011\015\012\033\013\031\014\055\015" +
    "\054\016\030\017\035\020\057\021\103\022\021\023\072" +
    "\024\070\025\013\026\374\027\071\030\051\031\110\032" +
    "\056\033\052\034\016\035\026\036\042\037\040\040\112" +
    "\041\100\042\046\043\102\044\060\045\107\046\075\047" +
    "\023\050\063\051\115\052\022\053\061\054\036\055\045" +
    "\056\073\057\027\060\076\061\065\062\066\063\012\064" +
    "\011\065\010\066\007\067\006\070\005\071\014\072\114" +
    "\073\004\074\111\075\050\076\053\077\101\100\104\101" +
    "\074\102\077\103\044\104\024\105\037\106\105\107\303" +
    "\001\002\000\004\024\375\001\002\000\004\066\376\001" +
    "\002\000\004\027\377\001\002\000\214\003\uffe1\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1" +
    "\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077" +
    "\uffe1\100\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1\105\uffe1" +
    "\106\uffe1\107\uffe1\001\002\000\210\004\106\005\041\006" +
    "\047\007\032\010\062\011\015\012\033\013\031\014\055" +
    "\015\054\016\030\017\035\020\057\021\103\022\021\023" +
    "\072\024\070\025\013\027\071\030\051\031\110\032\056" +
    "\033\052\034\016\035\026\036\042\037\040\040\112\041" +
    "\100\042\046\043\102\044\060\045\107\046\075\047\023" +
    "\050\063\051\115\052\022\053\061\054\036\055\045\056" +
    "\073\057\027\060\076\061\065\062\066\063\012\064\011" +
    "\065\010\066\007\067\006\070\005\071\014\072\114\073" +
    "\004\074\111\075\050\076\053\077\101\100\104\101\074" +
    "\102\077\103\044\104\024\105\037\106\105\107\303\001" +
    "\002\000\212\004\106\005\041\006\047\007\032\010\062" +
    "\011\015\012\033\013\031\014\055\015\054\016\030\017" +
    "\035\020\057\021\103\022\021\023\072\024\070\025\013" +
    "\026\u0102\027\071\030\051\031\110\032\056\033\052\034" +
    "\016\035\026\036\042\037\040\040\112\041\100\042\046" +
    "\043\102\044\060\045\107\046\075\047\023\050\063\051" +
    "\115\052\022\053\061\054\036\055\045\056\073\057\027" +
    "\060\076\061\065\062\066\063\012\064\011\065\010\066" +
    "\007\067\006\070\005\071\014\072\114\073\004\074\111" +
    "\075\050\076\053\077\101\100\104\101\074\102\077\103" +
    "\044\104\024\105\037\106\105\107\303\001\002\000\004" +
    "\024\u0103\001\002\000\004\067\u0104\001\002\000\004\027" +
    "\u0105\001\002\000\214\003\uffe0\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064" +
    "\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0" +
    "\073\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0\101" +
    "\uffe0\102\uffe0\103\uffe0\104\uffe0\105\uffe0\106\uffe0\107\uffe0" +
    "\001\002\000\214\003\323\004\106\005\041\006\047\007" +
    "\032\010\062\011\015\012\033\013\031\014\055\015\054" +
    "\016\030\017\035\020\057\021\103\022\021\023\072\024" +
    "\070\025\013\026\317\027\071\030\051\031\110\032\056" +
    "\033\052\034\016\035\026\036\042\037\040\040\112\041" +
    "\100\042\046\043\102\044\060\045\107\046\075\047\023" +
    "\050\063\051\115\052\022\053\061\054\036\055\045\056" +
    "\073\057\027\060\076\061\065\062\066\063\012\064\011" +
    "\065\010\066\007\067\006\070\005\071\014\072\114\073" +
    "\004\074\111\075\050\076\053\077\101\100\104\101\074" +
    "\102\077\103\044\104\024\105\037\106\105\107\321\001" +
    "\002\000\214\003\323\004\106\005\041\006\047\007\032" +
    "\010\062\011\015\012\033\013\031\014\055\015\054\016" +
    "\030\017\035\020\057\021\103\022\021\023\072\024\070" +
    "\025\013\026\u0108\027\071\030\051\031\110\032\056\033" +
    "\052\034\016\035\026\036\042\037\040\040\112\041\100" +
    "\042\046\043\102\044\060\045\107\046\075\047\023\050" +
    "\063\051\115\052\022\053\061\054\036\055\045\056\073" +
    "\057\027\060\076\061\065\062\066\063\012\064\011\065" +
    "\010\066\007\067\006\070\005\071\014\072\114\073\004" +
    "\074\111\075\050\076\053\077\101\100\104\101\074\102" +
    "\077\103\044\104\024\105\037\106\105\107\321\001\002" +
    "\000\032\024\u0109\063\344\064\343\065\342\066\341\067" +
    "\340\070\335\071\336\075\337\076\334\077\333\100\332" +
    "\001\002\000\004\075\u010a\001\002\000\004\027\u010b\001" +
    "\002\000\214\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd" +
    "\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065" +
    "\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd" +
    "\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101\uffdd\102" +
    "\uffdd\103\uffdd\104\uffdd\105\uffdd\106\uffdd\107\uffdd\001\002" +
    "\000\214\003\u0111\004\106\005\041\006\047\007\032\010" +
    "\062\011\015\012\033\013\031\014\055\015\054\016\030" +
    "\017\035\020\057\021\103\022\021\023\072\024\070\025" +
    "\013\026\u010d\027\071\030\051\031\110\032\056\033\052" +
    "\034\016\035\026\036\042\037\040\040\112\041\100\042" +
    "\046\043\102\044\060\045\107\046\075\047\023\050\063" +
    "\051\115\052\022\053\061\054\036\055\045\056\073\057" +
    "\027\060\076\061\065\062\066\063\012\064\011\065\010" +
    "\066\007\067\006\070\005\071\014\072\114\073\004\074" +
    "\111\075\050\076\053\077\101\100\104\101\074\102\077" +
    "\103\044\104\024\105\037\106\105\107\u010f\001\002\000" +
    "\004\074\u0116\001\002\000\214\003\uffd6\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046" +
    "\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6" +
    "\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6" +
    "\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6\100" +
    "\uffd6\101\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6\106\uffd6" +
    "\107\uffd6\001\002\000\024\003\124\046\075\047\023\050" +
    "\063\051\115\052\022\053\126\056\122\107\uffc4\001\002" +
    "\000\214\003\u0111\004\106\005\041\006\047\007\032\010" +
    "\062\011\015\012\033\013\031\014\055\015\054\016\030" +
    "\017\035\020\057\021\103\022\021\023\072\024\070\025" +
    "\013\026\u0114\027\071\030\051\031\110\032\056\033\052" +
    "\034\016\035\026\036\042\037\040\040\112\041\100\042" +
    "\046\043\102\044\060\045\107\046\075\047\023\050\063" +
    "\051\115\052\022\053\061\054\036\055\045\056\073\057" +
    "\027\060\076\061\065\062\066\063\012\064\011\065\010" +
    "\066\007\067\006\070\005\071\014\072\114\073\004\074" +
    "\111\075\050\076\053\077\101\100\104\101\074\102\077" +
    "\103\044\104\024\105\037\106\105\107\u010f\001\002\000" +
    "\004\027\u0113\001\002\000\214\003\uffd2\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2" +
    "\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100" +
    "\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2\106\uffd2" +
    "\107\uffd2\001\002\000\214\003\uffd3\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3" +
    "\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072" +
    "\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3" +
    "\101\uffd3\102\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3\107" +
    "\uffd3\001\002\000\006\024\u0117\074\u0116\001\002\000\214" +
    "\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7" +
    "\067\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075" +
    "\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\103\uffd7" +
    "\104\uffd7\105\uffd7\106\uffd7\107\uffd7\001\002\000\004\027" +
    "\u011a\001\002\000\004\071\u0118\001\002\000\004\027\u0119" +
    "\001\002\000\214\003\uffde\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde" +
    "\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056" +
    "\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde" +
    "\065\uffde\066\uffde\067\uffde\070\uffde\071\uffde\072\uffde\073" +
    "\uffde\074\uffde\075\uffde\076\uffde\077\uffde\100\uffde\101\uffde" +
    "\102\uffde\103\uffde\104\uffde\105\uffde\106\uffde\107\uffde\001" +
    "\002\000\214\003\u011f\004\106\005\041\006\047\007\032" +
    "\010\062\011\015\012\033\013\031\014\055\015\054\016" +
    "\030\017\035\020\057\021\103\022\021\023\072\024\070" +
    "\025\013\026\u011c\027\071\030\051\031\110\032\056\033" +
    "\052\034\016\035\026\036\042\037\040\040\112\041\100" +
    "\042\046\043\102\044\060\045\107\046\075\047\023\050" +
    "\063\051\115\052\022\053\061\054\036\055\045\056\073" +
    "\057\027\060\076\061\065\062\066\063\012\064\011\065" +
    "\010\066\007\067\006\070\005\071\014\072\114\073\004" +
    "\074\111\075\050\076\053\077\101\100\104\101\074\102" +
    "\077\103\044\104\024\105\037\106\105\107\u011d\001\002" +
    "\000\214\003\u011f\004\106\005\041\006\047\007\032\010" +
    "\062\011\015\012\033\013\031\014\055\015\054\016\030" +
    "\017\035\020\057\021\103\022\021\023\072\024\070\025" +
    "\013\026\u0132\027\071\030\051\031\110\032\056\033\052" +
    "\034\016\035\026\036\042\037\040\040\112\041\100\042" +
    "\046\043\102\044\060\045\107\046\075\047\023\050\063" +
    "\051\115\052\022\053\061\054\036\055\045\056\073\057" +
    "\027\060\076\061\065\062\066\063\012\064\011\065\010" +
    "\066\007\067\006\070\005\071\014\072\114\073\004\074" +
    "\111\075\050\076\053\077\101\100\104\101\074\102\077" +
    "\103\044\104\024\105\037\106\105\107\u011d\001\002\000" +
    "\006\072\u0125\073\u0124\001\002\000\024\003\124\046\075" +
    "\047\023\050\063\051\115\052\022\053\126\056\122\107" +
    "\uffc4\001\002\000\214\003\uffd0\004\uffd0\005\uffd0\006\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0" +
    "\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064" +
    "\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0" +
    "\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0\101" +
    "\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0\106\uffd0\107\uffd0" +
    "\001\002\000\004\027\u0121\001\002\000\214\003\uffcb\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb" +
    "\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070" +
    "\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb" +
    "\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb\105" +
    "\uffcb\106\uffcb\107\uffcb\001\002\000\214\003\uffcc\004\uffcc" +
    "\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc" +
    "\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077" +
    "\uffcc\100\uffcc\101\uffcc\102\uffcc\103\uffcc\104\uffcc\105\uffcc" +
    "\106\uffcc\107\uffcc\001\002\000\004\107\u0123\001\002\000" +
    "\214\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf" +
    "\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066" +
    "\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf" +
    "\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf\102\uffcf\103" +
    "\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf\001\002\000\004" +
    "\027\u012c\001\002\000\004\027\u0126\001\002\000\214\003" +
    "\323\004\106\005\041\006\047\007\032\010\062\011\015" +
    "\012\033\013\031\014\055\015\054\016\030\017\035\020" +
    "\057\021\103\022\021\023\072\024\070\025\013\026\317" +
    "\027\071\030\051\031\110\032\056\033\052\034\016\035" +
    "\026\036\042\037\040\040\112\041\100\042\046\043\102" +
    "\044\060\045\107\046\075\047\023\050\063\051\115\052" +
    "\022\053\061\054\036\055\045\056\073\057\027\060\076" +
    "\061\065\062\066\063\012\064\011\065\010\066\007\067" +
    "\006\070\005\071\014\072\114\073\004\074\111\075\050" +
    "\076\053\077\101\100\104\101\074\102\077\103\044\104" +
    "\024\105\037\106\105\107\321\001\002\000\214\003\323" +
    "\004\106\005\041\006\047\007\032\010\062\011\015\012" +
    "\033\013\031\014\055\015\054\016\030\017\035\020\057" +
    "\021\103\022\021\023\072\024\070\025\013\026\u0128\027" +
    "\071\030\051\031\110\032\056\033\052\034\016\035\026" +
    "\036\042\037\040\040\112\041\100\042\046\043\102\044" +
    "\060\045\107\046\075\047\023\050\063\051\115\052\022" +
    "\053\061\054\036\055\045\056\073\057\027\060\076\061" +
    "\065\062\066\063\012\064\011\065\010\066\007\067\006" +
    "\070\005\071\014\072\114\073\004\074\111\075\050\076" +
    "\053\077\101\100\104\101\074\102\077\103\044\104\024" +
    "\105\037\106\105\107\321\001\002\000\032\024\u0129\063" +
    "\344\064\343\065\342\066\341\067\340\070\335\071\336" +
    "\075\337\076\334\077\333\100\332\001\002\000\004\072" +
    "\u012a\001\002\000\004\027\u012b\001\002\000\214\003\uffce" +
    "\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012" +
    "\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce" +
    "\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce" +
    "\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061" +
    "\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce" +
    "\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076" +
    "\uffce\077\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce" +
    "\105\uffce\106\uffce\107\uffce\001\002\000\214\003\323\004" +
    "\106\005\041\006\047\007\032\010\062\011\015\012\033" +
    "\013\031\014\055\015\054\016\030\017\035\020\057\021" +
    "\103\022\021\023\072\024\070\025\013\026\317\027\071" +
    "\030\051\031\110\032\056\033\052\034\016\035\026\036" +
    "\042\037\040\040\112\041\100\042\046\043\102\044\060" +
    "\045\107\046\075\047\023\050\063\051\115\052\022\053" +
    "\061\054\036\055\045\056\073\057\027\060\076\061\065" +
    "\062\066\063\012\064\011\065\010\066\007\067\006\070" +
    "\005\071\014\072\114\073\004\074\111\075\050\076\053" +
    "\077\101\100\104\101\074\102\077\103\044\104\024\105" +
    "\037\106\105\107\321\001\002\000\214\003\323\004\106" +
    "\005\041\006\047\007\032\010\062\011\015\012\033\013" +
    "\031\014\055\015\054\016\030\017\035\020\057\021\103" +
    "\022\021\023\072\024\070\025\013\026\u012e\027\071\030" +
    "\051\031\110\032\056\033\052\034\016\035\026\036\042" +
    "\037\040\040\112\041\100\042\046\043\102\044\060\045" +
    "\107\046\075\047\023\050\063\051\115\052\022\053\061" +
    "\054\036\055\045\056\073\057\027\060\076\061\065\062" +
    "\066\063\012\064\011\065\010\066\007\067\006\070\005" +
    "\071\014\072\114\073\004\074\111\075\050\076\053\077" +
    "\101\100\104\101\074\102\077\103\044\104\024\105\037" +
    "\106\105\107\321\001\002\000\032\024\u012f\063\344\064" +
    "\343\065\342\066\341\067\340\070\335\071\336\075\337" +
    "\076\334\077\333\100\332\001\002\000\004\072\u0130\001" +
    "\002\000\004\027\u0131\001\002\000\214\003\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062" +
    "\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd" +
    "\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077" +
    "\uffcd\100\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd\105\uffcd" +
    "\106\uffcd\107\uffcd\001\002\000\010\024\u0134\072\u0125\073" +
    "\u0124\001\002\000\214\003\uffd1\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1" +
    "\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101" +
    "\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1\106\uffd1\107\uffd1" +
    "\001\002\000\004\074\u0135\001\002\000\004\027\u0136\001" +
    "\002\000\214\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4" +
    "\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065" +
    "\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4" +
    "\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\102" +
    "\uffd4\103\uffd4\104\uffd4\105\uffd4\106\uffd4\107\uffd4\001\002" +
    "\000\004\107\u0138\001\002\000\214\003\uffd5\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054" +
    "\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5" +
    "\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071" +
    "\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5" +
    "\100\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5\105\uffd5\106" +
    "\uffd5\107\uffd5\001\002\000\210\004\106\005\041\006\047" +
    "\007\032\010\062\011\015\012\033\013\031\014\055\015" +
    "\054\016\030\017\035\020\057\021\103\022\021\023\072" +
    "\024\070\025\013\027\071\030\051\031\110\032\056\033" +
    "\052\034\016\035\026\036\042\037\040\040\112\041\100" +
    "\042\046\043\102\044\060\045\107\046\075\047\023\050" +
    "\063\051\115\052\022\053\061\054\036\055\045\056\073" +
    "\057\027\060\076\061\065\062\066\063\012\064\011\065" +
    "\010\066\007\067\006\070\005\071\014\072\114\073\004" +
    "\074\111\075\050\076\053\077\101\100\104\101\074\102" +
    "\077\103\044\104\024\105\037\106\105\107\303\001\002" +
    "\000\212\004\106\005\041\006\047\007\032\010\062\011" +
    "\015\012\033\013\031\014\055\015\054\016\030\017\035" +
    "\020\057\021\103\022\021\023\072\024\070\025\013\026" +
    "\u013b\027\071\030\051\031\110\032\056\033\052\034\016" +
    "\035\026\036\042\037\040\040\112\041\100\042\046\043" +
    "\102\044\060\045\107\046\075\047\023\050\063\051\115" +
    "\052\022\053\061\054\036\055\045\056\073\057\027\060" +
    "\076\061\065\062\066\063\012\064\011\065\010\066\007" +
    "\067\006\070\005\071\014\072\114\073\004\074\111\075" +
    "\050\076\053\077\101\100\104\101\074\102\077\103\044" +
    "\104\024\105\037\106\105\107\303\001\002\000\004\024" +
    "\u013c\001\002\000\004\070\u013d\001\002\000\004\027\u013e" +
    "\001\002\000\214\003\uffdf\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf" +
    "\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056" +
    "\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf\072\uffdf\073" +
    "\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\101\uffdf" +
    "\102\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf\107\uffdf\001" +
    "\002\000\212\004\106\005\041\006\047\007\032\010\062" +
    "\011\015\012\033\013\031\014\055\015\054\016\030\017" +
    "\035\020\057\021\103\022\021\023\072\024\070\025\013" +
    "\026\u0140\027\071\030\051\031\110\032\056\033\052\034" +
    "\016\035\026\036\042\037\040\040\112\041\100\042\046" +
    "\043\102\044\060\045\107\046\075\047\023\050\063\051" +
    "\115\052\022\053\061\054\036\055\045\056\073\057\027" +
    "\060\076\061\065\062\066\063\012\064\011\065\010\066" +
    "\007\067\006\070\005\071\014\072\114\073\004\074\111" +
    "\075\050\076\053\077\101\100\104\101\074\102\077\103" +
    "\044\104\024\105\037\106\105\107\u0141\001\002\000\006" +
    "\077\u0147\100\u0148\001\002\000\024\003\124\046\075\047" +
    "\023\050\063\051\115\052\022\053\126\056\122\107\uffc4" +
    "\001\002\000\212\004\106\005\041\006\047\007\032\010" +
    "\062\011\015\012\033\013\031\014\055\015\054\016\030" +
    "\017\035\020\057\021\103\022\021\023\072\024\070\025" +
    "\013\026\u0145\027\071\030\051\031\110\032\056\033\052" +
    "\034\016\035\026\036\042\037\040\040\112\041\100\042" +
    "\046\043\102\044\060\045\107\046\075\047\023\050\063" +
    "\051\115\052\022\053\061\054\036\055\045\056\073\057" +
    "\027\060\076\061\065\062\066\063\012\064\011\065\010" +
    "\066\007\067\006\070\005\071\014\072\114\073\004\074" +
    "\111\075\050\076\053\077\101\100\104\101\074\102\077" +
    "\103\044\104\024\105\037\106\105\107\u0141\001\002\000" +
    "\212\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067" +
    "\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9" +
    "\076\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104" +
    "\uffc9\105\uffc9\106\uffc9\107\uffc9\001\002\000\212\004\uffc5" +
    "\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5" +
    "\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077" +
    "\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5" +
    "\106\uffc5\107\uffc5\001\002\000\010\024\u0149\077\u0147\100" +
    "\u0148\001\002\000\212\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016" +
    "\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050" +
    "\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca" +
    "\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065" +
    "\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca" +
    "\074\uffca\075\uffca\076\uffca\077\uffca\100\uffca\101\uffca\102" +
    "\uffca\103\uffca\104\uffca\105\uffca\106\uffca\107\uffca\001\002" +
    "\000\004\027\u014d\001\002\000\004\027\u014c\001\002\000" +
    "\004\076\u014a\001\002\000\004\027\u014b\001\002\000\214" +
    "\003\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060" +
    "\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc" +
    "\067\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075" +
    "\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\103\uffdc" +
    "\104\uffdc\105\uffdc\106\uffdc\107\uffdc\001\002\000\212\004" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7" +
    "\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070" +
    "\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7" +
    "\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\105" +
    "\uffc7\106\uffc7\107\uffc7\001\002\000\212\004\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063" +
    "\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6" +
    "\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100" +
    "\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6" +
    "\107\uffc6\001\002\000\004\107\u014f\001\002\000\212\004" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053" +
    "\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8" +
    "\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070" +
    "\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8" +
    "\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105" +
    "\uffc8\106\uffc8\107\uffc8\001\002\000\214\003\uffda\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045" +
    "\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda" +
    "\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062" +
    "\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda" +
    "\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda\076\uffda\077" +
    "\uffda\100\uffda\101\uffda\102\uffda\103\uffda\104\uffda\105\uffda" +
    "\106\uffda\107\uffda\001\002\000\214\003\uffdb\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb" +
    "\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071" +
    "\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb" +
    "\100\uffdb\101\uffdb\102\uffdb\103\uffdb\104\uffdb\105\uffdb\106" +
    "\uffdb\107\uffdb\001\002\000\004\024\u0153\001\002\000\004" +
    "\057\u0154\001\002\000\004\027\u0155\001\002\000\216\002" +
    "\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd" +
    "\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd" +
    "\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066" +
    "\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd" +
    "\075\ufffd\076\ufffd\077\ufffd\100\ufffd\101\ufffd\102\ufffd\103" +
    "\ufffd\104\ufffd\105\ufffd\106\ufffd\107\ufffd\001\002\000\214" +
    "\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8" +
    "\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043" +
    "\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8" +
    "\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060" +
    "\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8" +
    "\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075" +
    "\ufff8\076\ufff8\077\ufff8\100\ufff8\101\ufff8\102\ufff8\103\ufff8" +
    "\104\ufff8\105\ufff8\106\ufff8\107\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0154\000\014\002\024\003\017\026\042\032\063\042" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\240\026\042\032" +
    "\063\042\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\023\117\024\120\025\116\026\122" +
    "\031\124\033\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\234\001\001\000\004\027\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\034\136\036\140\037\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\034\220\036\140\037\135\001" +
    "\001\000\006\036\217\037\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\201\001\001\000\010\034\163\036\140\037\135" +
    "\001\001\000\002\001\001\000\006\040\144\041\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\170\036\140\037\135\001\001\000\002\001" +
    "\001\000\010\034\167\036\140\037\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\036\214\037\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\036\213\037\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\212\037\135\001\001\000\006" +
    "\036\211\037\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\210\037\135\001\001\000\002\001\001" +
    "\000\006\036\207\037\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\230\030\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\230\030\231" +
    "\001\001\000\010\034\232\036\140\037\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\034\235\036\140\037\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\245\005\244\006\247\023\251\026\042\032\063\042\253" +
    "\001\001\000\012\006\u0155\026\042\032\063\042\253\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\023\117\024\255\025\116\026\122\031\124\033" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\264" +
    "\010\265\026\042\032\063\042\267\001\001\000\002\001" +
    "\001\000\016\023\117\024\313\025\116\026\122\031\124" +
    "\033\126\001\001\000\012\010\272\026\042\032\063\042" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\301\012\300\026\042\032" +
    "\063\042\303\001\001\000\002\001\001\000\012\012\306" +
    "\026\042\032\063\042\303\001\001\000\016\023\117\024" +
    "\304\025\116\026\122\031\124\033\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\013\317\014\321\026\042\032\063\042\323\001\001" +
    "\000\002\001\001\000\012\014\330\026\042\032\063\042" +
    "\323\001\001\000\016\023\117\024\325\025\116\026\122" +
    "\031\124\033\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\011\350\012\300\026\042\032\063" +
    "\042\303\001\001\000\012\012\306\026\042\032\063\042" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\011\356\012\300\026" +
    "\042\032\063\042\303\001\001\000\012\012\306\026\042" +
    "\032\063\042\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\011\364" +
    "\012\300\026\042\032\063\042\303\001\001\000\012\012" +
    "\306\026\042\032\063\042\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\011\372\012\300\026\042\032\063\042\303\001\001" +
    "\000\012\012\306\026\042\032\063\042\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\u0100\012\300\026\042\032\063\042" +
    "\303\001\001\000\012\012\306\026\042\032\063\042\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\013\u0106\014\321\026\042" +
    "\032\063\042\323\001\001\000\012\014\330\026\042\032" +
    "\063\042\323\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\u010f\016" +
    "\u010d\026\042\032\063\042\u0111\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\023\117\024\u0136\025\116\026" +
    "\122\031\124\033\126\001\001\000\012\016\u0114\026\042" +
    "\032\063\042\u0111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\u011a\020\u011d\026\042\032\063" +
    "\042\u011f\001\001\000\012\020\u0132\026\042\032\063\042" +
    "\u011f\001\001\000\002\001\001\000\016\023\117\024\u0121" +
    "\025\116\026\122\031\124\033\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\013\u0126\014\321\026\042\032\063" +
    "\042\323\001\001\000\012\014\330\026\042\032\063\042" +
    "\323\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\u012c\014\321\026" +
    "\042\032\063\042\323\001\001\000\012\014\330\026\042" +
    "\032\063\042\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\u0139\012\300\026\042\032\063\042\303\001\001\000" +
    "\012\012\306\026\042\032\063\042\303\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\u0141\022\u0142\026\042\032\063\042\u0143" +
    "\001\001\000\002\001\001\000\016\023\117\024\u014d\025" +
    "\116\026\122\031\124\033\126\001\001\000\012\022\u0145" +
    "\026\042\032\063\042\u0143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ScannerSintaxReport$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ScannerSintaxReport$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ScannerSintaxReport$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            ScannerSintaxReport asin = new ScannerSintaxReport(
                    new ScannerLexReport( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ScannerSintaxReport$actions {


    String textohtml = "";

  private final ScannerSintaxReport parser;

  /** Constructor */
  CUP$ScannerSintaxReport$actions(ScannerSintaxReport parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ScannerSintaxReport$do_action(
    int                        CUP$ScannerSintaxReport$act_num,
    java_cup.runtime.lr_parser CUP$ScannerSintaxReport$parser,
    java.util.Stack            CUP$ScannerSintaxReport$stack,
    int                        CUP$ScannerSintaxReport$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ScannerSintaxReport$result;

      /* select the action based on the action number */
      switch (CUP$ScannerSintaxReport$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TEXTOPLANO ::= OPASIGNA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TEXTOPLANO ::= OPDECREMENT 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // TEXTOPLANO ::= OPINCREMENT 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TEXTOPLANO ::= PARC 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TEXTOPLANO ::= PARA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // TEXTOPLANO ::= PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TEXTOPLANO ::= PUNTO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TEXTOPLANO ::= COMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // TEXTOPLANO ::= CORC 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // TEXTOPLANO ::= CORA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TEXTOPLANO ::= OPRESTA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TEXTOPLANO ::= OPSUMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TEXTOPLANO ::= OPMULT 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TEXTOPLANO ::= OPDIV 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TEXTOPLANO ::= OPMODULO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TEXTOPLANO ::= OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TEXTOPLANO ::= OPMENIGUAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TEXTOPLANO ::= OPMAYIGUAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TEXTOPLANO ::= OPCOMPARADOR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TEXTOPLANO ::= OPDISTINTO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TEXTOPLANO ::= OPAND 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TEXTOPLANO ::= OPOR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TEXTOPLANO ::= OPNOT 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TEXTOPLANO ::= RESULT 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TEXTOPLANO ::= SCORE 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TEXTOPLANO ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TEXTOPLANO ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TEXTOPLANO ::= CANTIDAD 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // TEXTOPLANO ::= METODOS 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // TEXTOPLANO ::= CLASES 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // TEXTOPLANO ::= TIPO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TEXTOPLANO ::= PRINT 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // TEXTOPLANO ::= HTML 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // TEXTOPLANO ::= HEAD 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // TEXTOPLANO ::= BODY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // TEXTOPLANO ::= TITLE 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // TEXTOPLANO ::= H6 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TEXTOPLANO ::= H5 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TEXTOPLANO ::= H4 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TEXTOPLANO ::= H3 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TEXTOPLANO ::= H2 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TEXTOPLANO ::= H1 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TEXTOPLANO ::= TABLE 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TEXTOPLANO ::= TH 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TEXTOPLANO ::= TD 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TEXTOPLANO ::= TR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TEXTOPLANO ::= DIV 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TEXTOPLANO ::= P 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // TEXTOPLANO ::= BR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // TEXTOPLANO ::= HR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TEXTOPLANO ::= COLOR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TEXTOPLANO ::= TEXTCOLOR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TEXTOPLANO ::= ALIGN 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TEXTOPLANO ::= FONT 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TEXTOPLANO ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TEXTOPLANO ::= ENTERO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TEXTOPLANO ::= ID 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TEXTOPLANO ::= CADENA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TEXTOPLANO ::= TEXTOHTML 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TEXTOPLANO",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ARRAY ::= CLASES 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("ARRAY",31, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ARRAY ::= METODOS 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("ARRAY",31, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ARRAY ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("ARRAY",31, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LLAMAR ::= ARRAY CORA ENTERO CORC PUNTO NOMBRE 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("LLAMAR",30, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-5)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LLAMAR ::= ARRAY PUNTO CANTIDAD 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("LLAMAR",30, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LLAMAR ::= ARRAY PUNTO NOMBRE 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("LLAMAR",30, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LLAMAR ::= ARRAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("LLAMAR",30, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LLAMAR ::= SCORE 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("LLAMAR",30, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LLAMADA ::= RESULT PUNTO LLAMAR PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("LLAMADA",29, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-3)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP ::= ID 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP ::= CADENA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= ENTERO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= PARA COND PARC 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= EXP OPDECREMENT 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= EXP OPINCREMENT 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= OPRESTA EXP 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= EXP OPMODULO EXP 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= EXP OPDIV EXP 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= EXP OPMULT EXP 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= EXP OPRESTA EXP 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= EXP OPSUMA EXP 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RELACIONAL ::= OPMEN 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RELACIONAL ::= OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // RELACIONAL ::= OPMENIGUAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RELACIONAL ::= OPMAYIGUAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RELACIONAL ::= OPDISTINTO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RELACIONAL ::= OPCOMPARADOR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("RELACIONAL",27, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // COND ::= EXP 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("COND",26, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // COND ::= EXP RELACIONAL EXP 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("COND",26, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COND ::= OPNOT COND 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("COND",26, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COND ::= COND OPAND COND 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("COND",26, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COND ::= COND OPOR COND 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("COND",26, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IMPRIMIR ::= PRINT PARA COND PARC PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",25, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-4)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPASIGNA ::= OPASIGMULT 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("OPASIGNA",24, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPASIGNA ::= OPASIGRESTA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("OPASIGNA",24, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPASIGNA ::= OPASIGSUMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("OPASIGNA",24, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPASIGNA ::= OPIGUAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("OPASIGNA",24, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASIGNACION ::= ID OPASIGNA COND PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-3)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ASIGNA ::= EPS 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("ASIGNA",22, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNA ::= OPIGUAL COND 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("ASIGNA",22, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LISTAID ::= ID ASIGNA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("LISTAID",21, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LISTAID ::= LISTAID COMA ID ASIGNA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("LISTAID",21, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-3)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPO ::= TBOOL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TIPO",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPO ::= TSTRING 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TIPO",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPO ::= TCHAR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TIPO",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPO ::= TDOUBLE 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TIPO",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO ::= TINT 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("TIPO",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= TIPO LISTAID PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CPREPORT ::= EPS 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("CPREPORT",18, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CPREPORT ::= error PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("CPREPORT",18, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CPREPORT ::= IMPRIMIR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("CPREPORT",18, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CPREPORT ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("CPREPORT",18, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CPREPORT ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("CPREPORT",18, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EPS ::= 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("EPS",17, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTP ::= TEXTOPLANO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTP",16, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTP ::= OPMEN BR OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTP",16, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTP ::= OPMEN HR OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTP",16, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTP ::= DOLLAR CPREPORT DOLLAR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTP",16, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTSP ::= SENTP 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTSP",15, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTSP ::= SENTSP SENTP 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTSP",15, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTROW ::= TEXTOPLANO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTROW",14, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTROW ::= error OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTROW",14, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTROW ::= OPMEN TD OPMAY SENTSBODY OPMEN OPDIV TH OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTROW",14, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTROW ::= OPMEN TH OPMAY SENTSBODY OPMEN OPDIV TH OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTROW",14, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTROW ::= DOLLAR CPREPORT DOLLAR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTROW",14, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTSROW ::= SENTROW 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTSROW",13, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTSROW ::= SENTSROW SENTROW 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTSROW",13, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTTABLE ::= TEXTOPLANO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTTABLE",12, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTTABLE ::= error OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTTABLE",12, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTTABLE ::= OPMEN TR OPMAY SENTSROW OPMEN OPDIV TR OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTTABLE",12, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTTABLE ::= DOLLAR CPREPORT DOLLAR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTTABLE",12, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTSTABLE ::= SENTTABLE 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTSTABLE",11, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTSTABLE ::= SENTSTABLE SENTTABLE 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTSTABLE",11, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTBODY ::= TEXTOPLANO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTBODY",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTBODY ::= error OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTBODY",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTBODY ::= OPMEN BR OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTBODY",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTBODY ::= OPMEN HR OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTBODY",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTBODY ::= OPMEN P OPMAY SENTSP OPMEN OPDIV P OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTBODY",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTBODY ::= OPMEN DIV OPMAY SENTSBODY OPMEN OPDIV DIV OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTBODY",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTBODY ::= OPMEN TABLE OPMAY SENTSTABLE OPMEN OPDIV TABLE OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTBODY",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTBODY ::= OPMEN H6 OPMAY SENTSTITLE OPMEN OPDIV H6 OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTBODY",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTBODY ::= OPMEN H5 OPMAY SENTSTITLE OPMEN OPDIV H5 OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTBODY",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTBODY ::= OPMEN H4 OPMAY SENTSTITLE OPMEN OPDIV H4 OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTBODY",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTBODY ::= OPMEN H3 OPMAY SENTSTITLE OPMEN OPDIV H3 OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTBODY",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTBODY ::= OPMEN H2 OPMAY SENTSTITLE OPMEN OPDIV H2 OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTBODY",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTBODY ::= OPMEN H1 OPMAY SENTSTITLE OPMEN OPDIV H1 OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTBODY",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTBODY ::= DOLLAR CPREPORT DOLLAR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTBODY",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTSBODY ::= SENTBODY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTSBODY",9, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTSBODY ::= SENTSBODY SENTBODY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTSBODY",9, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTTITLE ::= TEXTOPLANO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTTITLE",8, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTTITLE ::= DOLLAR CPREPORT DOLLAR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTTITLE",8, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTSTITLE ::= SENTTITLE 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTSTITLE",7, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTSTITLE ::= SENTSTITLE SENTTITLE 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTSTITLE",7, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTHEAD ::= TEXTOPLANO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTHEAD",6, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTHEAD ::= error OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTHEAD",6, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTHEAD ::= OPMEN TITLE OPMAY SENTSTITLE OPMEN OPDIV TITLE OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTHEAD",6, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTHEAD ::= DOLLAR CPREPORT DOLLAR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTHEAD",6, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTSHEAD ::= SENTHEAD 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTSHEAD",5, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTSHEAD ::= SENTSHEAD SENTHEAD 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTSHEAD",5, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTHTML ::= TEXTOPLANO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTHTML",4, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTHTML ::= error OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTHTML",4, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTHTML ::= OPMEN BODY OPMAY SENTSBODY OPMEN OPDIV BODY OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTHTML",4, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTHTML ::= OPMEN HEAD OPMAY SENTSHEAD OPMEN OPDIV HEAD OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTHTML",4, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTHTML ::= DOLLAR CPREPORT DOLLAR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTHTML",4, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTSHTML ::= SENTHTML 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTSHTML",3, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTSHTML ::= SENTSHTML SENTHTML 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("SENTSHTML",3, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPSHTML ::= EPS 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("OPSHTML",2, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPSHTML ::= SENTSHTML 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("OPSHTML",2, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= TEXTOPLANO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= error OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= OPMEN HTML OPMAY OPSHTML OPMEN OPDIV HTML OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= DOLLAR CPREPORT DOLLAR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S0 ::= INICIO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)).value;
		RESULT = start_val;
              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ScannerSintaxReport$parser.done_parsing();
          return CUP$ScannerSintaxReport$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S0 ::= S0 INICIO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxReport$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.elementAt(CUP$ScannerSintaxReport$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxReport$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxReport$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

