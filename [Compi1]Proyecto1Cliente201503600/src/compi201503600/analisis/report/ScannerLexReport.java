/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package compi201503600.analisis.report;

import java_cup.runtime.*;
import java.io.Reader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>src/compi201503600/analisis/report/lexicoReporte.jflex</tt>
 */
public class ScannerLexReport implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;
  public static final int TEXTO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\2\1\4\1\5\1\3\22\0\1\14\1\30\1\70"+
    "\1\0\1\71\1\27\1\31\1\0\1\20\1\21\1\17\1\16\1\23"+
    "\1\10\1\24\1\13\1\1\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\3\1\1\0\1\22\1\12\1\15\1\11\2\0\1\45\1\50\1\42"+
    "\1\55\1\34\1\54\1\67\1\57\1\47\2\6\1\40\1\52\1\51"+
    "\1\43\1\53\1\6\1\33\1\36\1\41\1\37\1\44\1\6\1\56"+
    "\1\60\1\6\1\25\1\0\1\26\1\0\1\7\1\0\1\45\1\50"+
    "\1\42\1\55\1\34\1\54\1\67\1\57\1\47\2\6\1\40\1\52"+
    "\1\51\1\43\1\53\1\6\1\33\1\36\1\41\1\37\1\44\1\6"+
    "\1\56\1\60\1\6\1\0\1\32\10\0\1\4\113\0\1\6\37\0"+
    "\1\6\76\0\2\46\115\0\1\35\u1ea8\0\1\4\1\4\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\1\2\5"+
    "\1\1\10\5\1\26\3\5\1\27\1\1\1\30\1\31"+
    "\1\32\1\0\1\33\1\34\1\35\1\36\1\0\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\2\5"+
    "\1\0\1\5\1\47\2\5\1\0\1\5\1\50\1\51"+
    "\5\5\1\52\10\5\1\0\1\5\1\53\2\5\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\2\34"+
    "\3\0\2\5\1\0\3\5\2\0\7\5\1\0\5\5"+
    "\1\0\5\5\2\64\2\5\3\0\2\5\1\0\3\5"+
    "\1\0\1\65\1\5\1\65\1\0\4\5\1\0\1\5"+
    "\1\0\2\5\1\66\2\5\1\0\3\5\1\67\1\0"+
    "\1\5\1\70\1\71\1\0\2\5\2\72\1\5\1\73"+
    "\1\74\2\75\2\76\1\77\1\5\1\0\1\5\1\0"+
    "\1\5\2\100\3\5\2\101\1\5\1\0\1\5\1\0"+
    "\1\5\2\102\1\103\1\5\2\104\1\5\1\0\1\5"+
    "\1\0\2\5\1\105\2\5\1\0\1\5\1\0\3\5"+
    "\1\0\1\5\1\0\2\5\2\106\1\5\2\107\2\110"+
    "\1\5\1\111\2\112\1\0\1\5\1\113\1\5\1\114"+
    "\2\115\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\164\0\256\0\164\0\164\0\350"+
    "\0\u0122\0\u015c\0\u0196\0\164\0\u01d0\0\u020a\0\u0244\0\164"+
    "\0\164\0\164\0\164\0\164\0\164\0\164\0\164\0\u027e"+
    "\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e"+
    "\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e"+
    "\0\u0658\0\164\0\u0692\0\164\0\164\0\164\0\u06cc\0\164"+
    "\0\u0706\0\164\0\164\0\u0740\0\164\0\164\0\164\0\164"+
    "\0\164\0\164\0\164\0\164\0\u077a\0\u07b4\0\u07ee\0\u0828"+
    "\0\350\0\u0862\0\u089c\0\u08d6\0\u0910\0\350\0\350\0\u094a"+
    "\0\u0984\0\u09be\0\u09f8\0\u0a32\0\350\0\u0a6c\0\u0aa6\0\u0ae0"+
    "\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\350"+
    "\0\u0cb0\0\u0cea\0\350\0\350\0\350\0\350\0\350\0\350"+
    "\0\164\0\u06cc\0\164\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c"+
    "\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc"+
    "\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac"+
    "\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c"+
    "\0\u13b6\0\u13f0\0\164\0\350\0\u142a\0\u1464\0\u149e\0\u14d8"+
    "\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8"+
    "\0\164\0\u16e2\0\350\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804"+
    "\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\350\0\u1960\0\u199a"+
    "\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\350\0\u1abc\0\u1af6\0\350"+
    "\0\350\0\u1b30\0\u1b6a\0\u1ba4\0\164\0\350\0\u1bde\0\350"+
    "\0\350\0\164\0\350\0\u1c18\0\u1c52\0\350\0\u1c8c\0\u1cc6"+
    "\0\u1d00\0\u1d3a\0\u1d74\0\164\0\350\0\u1dae\0\u1de8\0\u1e22"+
    "\0\164\0\350\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\164"+
    "\0\350\0\350\0\u1f7e\0\164\0\350\0\u1fb8\0\u1ff2\0\u202c"+
    "\0\u2066\0\u20a0\0\u20da\0\350\0\u2114\0\u214e\0\u2188\0\u21c2"+
    "\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392"+
    "\0\u23cc\0\164\0\350\0\u2406\0\164\0\350\0\164\0\350"+
    "\0\u2440\0\350\0\164\0\350\0\u247a\0\u24b4\0\350\0\u24ee"+
    "\0\350\0\164\0\350\0\350";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\0\1\7\1\10\1\4"+
    "\1\11\1\12\1\13\1\14\1\7\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\2\10"+
    "\1\37\1\40\1\10\1\41\1\42\1\4\1\10\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\10\1\51\1\10"+
    "\6\5\1\10\1\52\1\53\2\54\1\55\65\54\1\56"+
    "\1\54\72\0\1\57\1\5\4\0\53\57\6\5\3\57"+
    "\1\0\1\10\4\0\2\10\23\0\2\10\1\0\10\10"+
    "\1\0\21\10\12\0\1\60\1\61\3\0\1\62\71\0"+
    "\1\63\67\0\1\64\1\0\1\65\71\0\1\66\71\0"+
    "\1\67\1\70\70\0\1\71\71\0\1\72\105\0\1\73"+
    "\72\0\1\74\40\0\1\10\4\0\2\10\23\0\1\10"+
    "\1\75\1\0\10\10\1\0\21\10\3\0\1\10\4\0"+
    "\2\10\23\0\2\10\1\0\10\10\1\0\2\10\1\76"+
    "\16\10\44\0\1\77\30\0\1\10\4\0\2\10\23\0"+
    "\2\10\1\0\4\10\1\100\3\10\1\0\21\10\3\0"+
    "\1\10\4\0\2\10\23\0\1\101\1\102\1\0\7\10"+
    "\1\103\1\104\1\105\5\10\1\106\1\10\1\107\10\10"+
    "\3\0\1\10\4\0\2\10\23\0\2\10\1\0\2\10"+
    "\1\110\2\10\1\111\1\10\1\112\1\0\21\10\3\0"+
    "\1\10\4\0\2\10\23\0\2\10\1\0\7\10\1\113"+
    "\1\0\21\10\3\0\1\10\4\0\2\10\23\0\2\10"+
    "\1\0\2\10\1\114\5\10\1\0\21\10\3\0\1\10"+
    "\4\0\2\10\23\0\1\115\1\10\1\0\5\10\1\116"+
    "\2\10\1\0\21\10\3\0\1\10\4\0\2\10\23\0"+
    "\2\10\1\0\5\10\1\117\2\10\1\0\21\10\3\0"+
    "\1\10\4\0\2\10\23\0\1\10\1\120\1\0\10\10"+
    "\1\0\21\10\3\0\1\10\4\0\2\10\23\0\1\121"+
    "\1\10\1\0\7\10\1\122\1\0\21\10\3\0\1\10"+
    "\4\0\2\10\23\0\2\10\1\0\1\10\1\123\3\10"+
    "\1\124\2\10\1\0\21\10\3\0\1\10\4\0\2\10"+
    "\23\0\1\10\1\125\1\0\10\10\1\126\1\127\20\10"+
    "\3\0\1\10\4\0\2\10\23\0\1\130\1\131\1\0"+
    "\3\10\1\132\4\10\1\0\12\10\1\133\1\134\1\135"+
    "\1\136\1\137\1\140\1\10\73\0\1\141\1\0\1\142"+
    "\57\0\6\142\3\0\2\61\1\143\1\144\66\61\13\145"+
    "\1\146\56\145\1\0\1\10\4\0\2\10\23\0\2\10"+
    "\1\147\1\150\7\10\1\0\21\10\3\0\1\10\4\0"+
    "\2\10\23\0\2\10\1\0\3\10\1\151\4\10\1\0"+
    "\21\10\45\0\1\152\27\0\1\10\4\0\2\10\23\0"+
    "\2\10\1\0\5\10\1\153\2\10\1\0\21\10\3\0"+
    "\1\10\4\0\2\10\23\0\2\10\1\0\10\10\1\0"+
    "\7\10\1\154\11\10\3\0\1\10\4\0\2\10\23\0"+
    "\2\10\1\0\10\10\1\0\1\10\1\155\17\10\43\0"+
    "\1\156\11\0\1\157\17\0\1\10\4\0\2\10\23\0"+
    "\2\10\1\0\3\10\1\160\4\10\1\0\4\10\1\161"+
    "\14\10\3\0\1\10\4\0\2\10\23\0\2\10\1\0"+
    "\7\10\1\162\1\0\21\10\3\0\1\10\4\0\2\10"+
    "\23\0\2\10\1\0\2\10\1\163\5\10\1\0\21\10"+
    "\3\0\1\10\4\0\2\10\23\0\1\164\1\10\1\0"+
    "\10\10\1\0\2\10\1\165\16\10\3\0\1\10\4\0"+
    "\2\10\23\0\1\166\1\10\1\0\10\10\1\0\21\10"+
    "\3\0\1\10\4\0\2\10\23\0\2\10\1\0\10\10"+
    "\1\167\1\170\20\10\3\0\1\10\4\0\2\10\23\0"+
    "\2\10\1\0\5\10\1\171\2\10\1\0\6\10\1\172"+
    "\12\10\3\0\1\10\4\0\2\10\23\0\2\10\1\0"+
    "\10\10\1\0\3\10\1\173\15\10\3\0\1\10\4\0"+
    "\2\10\23\0\2\10\1\0\3\10\1\174\4\10\1\0"+
    "\21\10\3\0\1\10\4\0\2\10\23\0\2\10\1\0"+
    "\10\10\1\175\1\176\20\10\3\0\1\10\4\0\2\10"+
    "\23\0\1\177\1\10\1\0\10\10\1\0\21\10\3\0"+
    "\1\10\4\0\2\10\23\0\2\10\1\0\10\10\1\0"+
    "\2\10\1\200\16\10\3\0\1\10\4\0\2\10\23\0"+
    "\2\10\1\0\10\10\1\0\2\10\1\201\16\10\3\0"+
    "\1\10\4\0\2\10\23\0\2\10\1\0\4\10\1\202"+
    "\3\10\1\0\21\10\46\0\1\203\26\0\1\10\4\0"+
    "\2\10\23\0\2\10\1\0\6\10\1\204\1\10\1\0"+
    "\21\10\3\0\1\10\4\0\2\10\23\0\2\10\1\0"+
    "\7\10\1\205\1\0\21\10\3\0\1\10\4\0\2\10"+
    "\23\0\2\10\1\0\10\10\1\0\3\10\1\206\15\10"+
    "\4\0\1\143\67\0\13\145\1\207\56\145\13\0\1\210"+
    "\115\0\1\211\33\0\1\10\4\0\2\10\23\0\2\10"+
    "\1\0\1\10\1\212\6\10\1\0\21\10\3\0\1\10"+
    "\4\0\2\10\23\0\1\10\1\213\1\0\10\10\1\0"+
    "\21\10\35\0\1\214\37\0\1\10\4\0\2\10\23\0"+
    "\1\215\1\10\1\0\10\10\1\0\21\10\3\0\1\10"+
    "\4\0\2\10\23\0\2\10\1\0\3\10\1\216\4\10"+
    "\1\0\21\10\3\0\1\10\4\0\2\10\23\0\2\10"+
    "\1\0\2\10\1\217\5\10\1\0\21\10\42\0\1\220"+
    "\74\0\1\221\27\0\1\10\4\0\2\10\23\0\2\10"+
    "\1\0\2\10\1\222\5\10\1\0\21\10\3\0\1\10"+
    "\4\0\2\10\23\0\2\10\1\0\5\10\1\223\2\10"+
    "\1\0\21\10\3\0\1\10\4\0\2\10\23\0\2\10"+
    "\1\224\1\225\7\10\1\0\21\10\3\0\1\10\4\0"+
    "\2\10\23\0\2\10\1\0\5\10\1\226\2\10\1\0"+
    "\21\10\3\0\1\10\4\0\2\10\23\0\2\10\1\0"+
    "\7\10\1\227\1\0\21\10\3\0\1\10\4\0\2\10"+
    "\23\0\2\10\1\0\3\10\1\230\4\10\1\0\21\10"+
    "\3\0\1\10\4\0\2\10\23\0\2\10\1\0\10\10"+
    "\1\231\1\232\20\10\71\0\1\233\3\0\1\10\4\0"+
    "\2\10\23\0\2\10\1\0\10\10\1\0\20\10\1\234"+
    "\3\0\1\10\4\0\2\10\23\0\2\10\1\0\2\10"+
    "\1\235\5\10\1\0\21\10\3\0\1\10\4\0\2\10"+
    "\23\0\2\10\1\0\10\10\1\0\11\10\1\236\7\10"+
    "\3\0\1\10\4\0\2\10\23\0\2\10\1\0\10\10"+
    "\1\0\1\10\1\237\17\10\3\0\1\10\4\0\2\10"+
    "\23\0\2\10\1\0\5\10\1\240\2\10\1\0\21\10"+
    "\53\0\1\241\21\0\1\10\4\0\2\10\23\0\2\10"+
    "\1\0\10\10\1\0\2\10\1\242\16\10\3\0\1\10"+
    "\4\0\2\10\23\0\2\10\1\0\7\10\1\243\1\0"+
    "\21\10\3\0\1\10\4\0\2\10\23\0\2\10\1\0"+
    "\4\10\1\244\3\10\1\0\21\10\3\0\1\10\4\0"+
    "\2\10\23\0\2\10\1\0\3\10\1\245\4\10\1\0"+
    "\21\10\3\0\1\10\4\0\2\10\23\0\2\10\1\0"+
    "\10\10\1\246\1\247\20\10\3\0\1\10\4\0\2\10"+
    "\23\0\2\10\1\0\10\10\1\0\6\10\1\250\12\10"+
    "\3\0\1\10\4\0\2\10\23\0\2\10\1\0\2\10"+
    "\1\251\5\10\1\0\21\10\2\0\11\145\1\143\1\145"+
    "\1\207\56\145\11\0\1\143\1\0\1\210\116\0\1\252"+
    "\32\0\1\10\4\0\2\10\23\0\2\10\1\0\2\10"+
    "\1\253\5\10\1\0\21\10\3\0\1\10\4\0\2\10"+
    "\23\0\1\254\1\10\1\0\10\10\1\0\21\10\36\0"+
    "\1\255\36\0\1\10\4\0\2\10\23\0\1\10\1\256"+
    "\1\0\10\10\1\0\21\10\3\0\1\10\4\0\2\10"+
    "\23\0\2\10\1\0\4\10\1\257\1\260\2\10\1\0"+
    "\21\10\3\0\1\10\4\0\2\10\23\0\1\10\1\261"+
    "\1\0\10\10\1\0\21\10\36\0\1\262\36\0\1\10"+
    "\4\0\2\10\23\0\1\10\1\263\1\0\10\10\1\0"+
    "\21\10\36\0\1\264\36\0\1\10\4\0\2\10\23\0"+
    "\1\10\1\265\1\0\10\10\1\0\21\10\3\0\1\10"+
    "\4\0\2\10\23\0\1\266\1\10\1\0\10\10\1\0"+
    "\21\10\3\0\1\10\4\0\2\10\23\0\2\10\1\0"+
    "\4\10\1\267\3\10\1\0\21\10\3\0\1\10\4\0"+
    "\2\10\23\0\2\10\1\0\10\10\1\270\1\271\20\10"+
    "\47\0\1\272\25\0\1\10\4\0\2\10\23\0\2\10"+
    "\1\0\7\10\1\273\1\0\21\10\53\0\1\274\21\0"+
    "\1\10\4\0\2\10\23\0\2\10\1\0\10\10\1\0"+
    "\2\10\1\275\16\10\3\0\1\10\4\0\2\10\23\0"+
    "\1\10\1\276\1\0\10\10\1\0\21\10\3\0\1\10"+
    "\4\0\2\10\23\0\1\277\1\10\1\0\10\10\1\0"+
    "\21\10\3\0\1\10\4\0\2\10\23\0\2\10\1\0"+
    "\10\10\1\0\6\10\1\300\12\10\43\0\1\301\31\0"+
    "\1\10\4\0\2\10\23\0\2\10\1\0\3\10\1\302"+
    "\4\10\1\0\21\10\3\0\1\10\4\0\2\10\23\0"+
    "\2\10\1\0\10\10\1\0\3\10\1\303\15\10\3\0"+
    "\1\10\4\0\2\10\23\0\2\10\1\0\10\10\1\304"+
    "\1\305\20\10\54\0\1\306\20\0\1\10\4\0\2\10"+
    "\23\0\2\10\1\0\10\10\1\0\3\10\1\307\15\10"+
    "\43\0\1\310\31\0\1\10\4\0\2\10\23\0\2\10"+
    "\1\0\3\10\1\311\4\10\1\0\21\10\3\0\1\10"+
    "\4\0\2\10\23\0\2\10\1\0\5\10\1\312\2\10"+
    "\1\0\21\10\3\0\1\10\4\0\2\10\23\0\2\10"+
    "\1\0\5\10\1\313\2\10\1\0\21\10\37\0\2\314"+
    "\34\0\1\10\4\0\2\10\23\0\2\10\1\314\1\315"+
    "\7\10\1\0\21\10\3\0\1\10\4\0\2\10\23\0"+
    "\2\10\1\0\3\10\1\316\4\10\1\0\21\10\57\0"+
    "\1\317\15\0\1\10\4\0\2\10\23\0\2\10\1\0"+
    "\10\10\1\0\6\10\1\320\12\10\52\0\1\321\22\0"+
    "\1\10\4\0\2\10\23\0\2\10\1\0\10\10\1\0"+
    "\1\10\1\322\17\10\3\0\1\10\4\0\2\10\23\0"+
    "\2\10\1\0\7\10\1\323\1\0\21\10\3\0\1\10"+
    "\4\0\2\10\23\0\1\10\1\324\1\0\10\10\1\0"+
    "\21\10\3\0\1\10\4\0\2\10\23\0\2\10\1\0"+
    "\5\10\1\325\2\10\1\0\21\10\3\0\1\10\4\0"+
    "\2\10\23\0\1\10\1\326\1\0\10\10\1\0\21\10"+
    "\45\0\1\327\27\0\1\10\4\0\2\10\23\0\2\10"+
    "\1\0\5\10\1\330\2\10\1\0\21\10\47\0\1\331"+
    "\25\0\1\10\4\0\2\10\23\0\2\10\1\0\7\10"+
    "\1\332\1\0\21\10\3\0\1\10\4\0\2\10\23\0"+
    "\2\10\1\0\2\10\1\333\5\10\1\0\21\10\3\0"+
    "\1\10\4\0\2\10\23\0\1\10\1\334\1\0\10\10"+
    "\1\0\21\10\47\0\1\335\25\0\1\10\4\0\2\10"+
    "\23\0\2\10\1\0\7\10\1\336\1\0\21\10\42\0"+
    "\1\337\32\0\1\10\4\0\2\10\23\0\2\10\1\0"+
    "\2\10\1\340\5\10\1\0\21\10\3\0\1\10\4\0"+
    "\2\10\23\0\2\10\1\0\10\10\1\0\2\10\1\341"+
    "\16\10\3\0\1\10\4\0\2\10\23\0\2\10\1\342"+
    "\1\343\7\10\1\0\21\10\3\0\1\10\4\0\2\10"+
    "\23\0\2\10\1\0\3\10\1\344\4\10\1\0\21\10"+
    "\53\0\1\345\21\0\1\10\4\0\2\10\23\0\2\10"+
    "\1\0\10\10\1\0\2\10\1\346\16\10\42\0\1\347"+
    "\32\0\1\10\4\0\2\10\23\0\2\10\1\0\2\10"+
    "\1\350\5\10\1\0\21\10\3\0\1\10\4\0\2\10"+
    "\23\0\2\10\1\0\5\10\1\351\2\10\1\0\21\10"+
    "\3\0\1\10\4\0\2\10\23\0\1\352\1\10\1\0"+
    "\10\10\1\0\21\10\57\0\1\353\15\0\1\10\4\0"+
    "\2\10\23\0\2\10\1\0\10\10\1\0\6\10\1\354"+
    "\12\10\36\0\1\355\36\0\1\10\4\0\2\10\23\0"+
    "\1\10\1\356\1\0\10\10\1\0\21\10\3\0\1\10"+
    "\4\0\2\10\23\0\2\10\1\0\5\10\1\357\2\10"+
    "\1\0\21\10\3\0\1\10\4\0\2\10\23\0\1\360"+
    "\1\10\1\0\10\10\1\0\21\10\3\0\1\10\4\0"+
    "\2\10\23\0\1\361\1\10\1\0\10\10\1\0\21\10"+
    "\37\0\2\362\34\0\1\10\4\0\2\10\23\0\2\10"+
    "\1\362\1\363\7\10\1\0\21\10\3\0\1\10\4\0"+
    "\2\10\23\0\2\10\1\0\5\10\1\364\2\10\1\0"+
    "\21\10\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9512];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\10\1\11\1\1\2\11\4\1\1\11\3\1"+
    "\10\11\22\1\1\11\1\1\3\11\1\0\1\11\1\1"+
    "\2\11\1\0\10\11\2\1\1\0\4\1\1\0\21\1"+
    "\1\0\12\1\1\11\1\1\1\11\1\1\3\0\2\1"+
    "\1\0\3\1\2\0\7\1\1\0\5\1\1\0\5\1"+
    "\1\11\3\1\3\0\2\1\1\0\3\1\1\0\1\11"+
    "\2\1\1\0\4\1\1\0\1\1\1\0\5\1\1\0"+
    "\4\1\1\0\3\1\1\0\2\1\1\11\4\1\1\11"+
    "\5\1\1\0\1\1\1\0\1\1\1\11\4\1\1\11"+
    "\2\1\1\0\1\1\1\0\1\1\1\11\3\1\1\11"+
    "\2\1\1\0\1\1\1\0\5\1\1\0\1\1\1\0"+
    "\3\1\1\0\1\1\1\0\2\1\1\11\2\1\1\11"+
    "\1\1\1\11\3\1\1\11\1\1\1\0\4\1\1\11"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //Código de usuario
    String text = "";
    String strliteral = "";

    /*  Generamos un java_cup.Symbol para guardar el tipo de token 
        encontrado */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Generamos un Symbol para el tipo de token encontrado 
       junto con su valor */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerLexReport(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ScannerLexReport(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 218) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return symbol(sym.TEXTOHTML, yytext());
          }
        case 79: break;
        case 2: 
          { return symbol(sym.ENTERO,yytext());
          }
        case 80: break;
        case 3: 
          { /*Saltos de linea, ignorados*/
          }
        case 81: break;
        case 4: 
          { /*Espacios en blanco, ignorados*/
          }
        case 82: break;
        case 5: 
          { return symbol(sym.ID,yytext());
          }
        case 83: break;
        case 6: 
          { return symbol(sym.OPRESTA);
          }
        case 84: break;
        case 7: 
          { return symbol(sym.OPMAY);
          }
        case 85: break;
        case 8: 
          { return symbol(sym.OPMEN);
          }
        case 86: break;
        case 9: 
          { return symbol(sym.OPDIV);
          }
        case 87: break;
        case 10: 
          { return symbol(sym.OPIGUAL);
          }
        case 88: break;
        case 11: 
          { return symbol(sym.OPSUMA);
          }
        case 89: break;
        case 12: 
          { return symbol(sym.OPMULT);
          }
        case 90: break;
        case 13: 
          { return symbol(sym.PARA);
          }
        case 91: break;
        case 14: 
          { return symbol(sym.PARC);
          }
        case 92: break;
        case 15: 
          { return symbol(sym.PCOMA);
          }
        case 93: break;
        case 16: 
          { return symbol(sym.COMA);
          }
        case 94: break;
        case 17: 
          { return symbol(sym.PUNTO);
          }
        case 95: break;
        case 18: 
          { return symbol(sym.CORA);
          }
        case 96: break;
        case 19: 
          { return symbol(sym.CORC);
          }
        case 97: break;
        case 20: 
          { return symbol(sym.OPMODULO);
          }
        case 98: break;
        case 21: 
          { return symbol(sym.OPNOT);
          }
        case 99: break;
        case 22: 
          { return symbol(sym.P);
          }
        case 100: break;
        case 23: 
          { yybegin(CADENA); text = "\"";
          }
        case 101: break;
        case 24: 
          { text += yytext();
          }
        case 102: break;
        case 25: 
          { String tmp = text; 
                    text = "";  
                    yybegin(YYINITIAL);
                    return symbol(sym.TEXTOHTML, tmp);
          }
        case 103: break;
        case 26: 
          { String tmp = text + "\""; 
                    text = ""; 
                    yybegin(YYINITIAL);  
                    return symbol(sym.CADENA, tmp);
          }
        case 104: break;
        case 27: 
          { return symbol(sym.OPDECREMENT);
          }
        case 105: break;
        case 28: 
          { /* Comentarios ignorados */
          }
        case 106: break;
        case 29: 
          { return symbol(sym.OPASIGRESTA);
          }
        case 107: break;
        case 30: 
          { return symbol(sym.OPMAYIGUAL);
          }
        case 108: break;
        case 31: 
          { return symbol(sym.OPMENIGUAL);
          }
        case 109: break;
        case 32: 
          { return symbol(sym.OPCOMPARADOR);
          }
        case 110: break;
        case 33: 
          { return symbol(sym.OPASIGSUMA);
          }
        case 111: break;
        case 34: 
          { return symbol(sym.OPINCREMENT);
          }
        case 112: break;
        case 35: 
          { return symbol(sym.OPASIGMULT);
          }
        case 113: break;
        case 36: 
          { return symbol(sym.OPDISTINTO);
          }
        case 114: break;
        case 37: 
          { return symbol(sym.OPAND);
          }
        case 115: break;
        case 38: 
          { return symbol(sym.OPOR);
          }
        case 116: break;
        case 39: 
          { return symbol(sym.TR);
          }
        case 117: break;
        case 40: 
          { return symbol(sym.TD);
          }
        case 118: break;
        case 41: 
          { return symbol(sym.TH);
          }
        case 119: break;
        case 42: 
          { return symbol(sym.BR);
          }
        case 120: break;
        case 43: 
          { return symbol(sym.HR);
          }
        case 121: break;
        case 44: 
          { return symbol(sym.H1);
          }
        case 122: break;
        case 45: 
          { return symbol(sym.H2);
          }
        case 123: break;
        case 46: 
          { return symbol(sym.H3);
          }
        case 124: break;
        case 47: 
          { return symbol(sym.H4);
          }
        case 125: break;
        case 48: 
          { return symbol(sym.H5);
          }
        case 126: break;
        case 49: 
          { return symbol(sym.H6);
          }
        case 127: break;
        case 50: 
          { return symbol(sym.DOLLAR);
          }
        case 128: break;
        case 51: 
          { return symbol(sym.DECIMAL, yytext());
          }
        case 129: break;
        case 52: 
          { return symbol(sym.DIV);
          }
        case 130: break;
        case 53: 
          { return symbol(sym.TIPO);
          }
        case 131: break;
        case 54: 
          { return symbol(sym.BODY);
          }
        case 132: break;
        case 55: 
          { return symbol(sym.FONT);
          }
        case 133: break;
        case 56: 
          { return symbol(sym.HEAD);
          }
        case 134: break;
        case 57: 
          { return symbol(sym.HTML);
          }
        case 135: break;
        case 58: 
          { return symbol(sym.SCORE);
          }
        case 136: break;
        case 59: 
          { return symbol(sym.TSTRING);
          }
        case 137: break;
        case 60: 
          { return symbol(sym.TABLE);
          }
        case 138: break;
        case 61: 
          { return symbol(sym.TITLE);
          }
        case 139: break;
        case 62: 
          { return symbol(sym.CLASE);
          }
        case 140: break;
        case 63: 
          { return symbol(sym.COLOR);
          }
        case 141: break;
        case 64: 
          { return symbol(sym.ALIGN);
          }
        case 142: break;
        case 65: 
          { return symbol(sym.PRINT);
          }
        case 143: break;
        case 66: 
          { return symbol(sym.RESULT);
          }
        case 144: break;
        case 67: 
          { return symbol(sym.TINT);
          }
        case 145: break;
        case 68: 
          { return symbol(sym.CLASES);
          }
        case 146: break;
        case 69: 
          { return symbol(sym.NOMBRE);
          }
        case 147: break;
        case 70: 
          { return symbol(sym.METODOS);
          }
        case 148: break;
        case 71: 
          { return symbol(sym.FUNCION);
          }
        case 149: break;
        case 72: 
          { return symbol(sym.TDOUBLE);
          }
        case 150: break;
        case 73: 
          { return symbol(sym.TCHAR);
          }
        case 151: break;
        case 74: 
          { return symbol(sym.CANTIDAD);
          }
        case 152: break;
        case 75: 
          { return symbol(sym.TBOOL);
          }
        case 153: break;
        case 76: 
          { return symbol(sym.TEXTCOLOR);
          }
        case 154: break;
        case 77: 
          { return symbol(sym.VARIABLES);
          }
        case 155: break;
        case 78: 
          { return symbol(sym.PARAMETRO);
          }
        case 156: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
