
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 02 22:58:31 CST 2018
//----------------------------------------------------

package compi201503600.analisis.json;

import java_cup.runtime.*;
import java.io.FileReader;
import compi201503600.beans.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 02 22:58:31 CST 2018
  */
public class ScannerSintaxJson extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ScannerSintaxJson() {super();}

  /** Constructor which sets the default scanner. */
  public ScannerSintaxJson(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ScannerSintaxJson(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\004\000\002\004\005\000\002\004\003" +
    "\000\002\005\007\000\002\005\007\000\002\005\007\000" +
    "\002\005\007\000\002\005\007\000\002\005\004\000\002" +
    "\006\003\000\002\006\003\000\002\007\003\000\002\007" +
    "\002\000\002\010\005\000\002\010\003\000\002\011\007" +
    "\000\002\011\004\000\002\012\003\000\002\012\002\000" +
    "\002\013\005\000\002\013\003\000\002\027\002\000\002" +
    "\014\006\000\002\014\004\000\002\015\005\000\002\015" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\017\003\000\002\017\002\000" +
    "\002\020\005\000\002\020\003\000\002\030\002\000\002" +
    "\021\006\000\002\021\004\000\002\022\005\000\002\022" +
    "\003\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\024\003\000\002\024\002\000\002\025\005\000" +
    "\002\025\003\000\002\026\007\000\002\026\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\006\003\004\010\005\001\002\000\004\011" +
    "\160\001\002\000\016\003\012\016\016\017\013\020\015" +
    "\021\017\022\020\001\002\000\004\002\010\001\002\000" +
    "\004\002\001\001\002\000\004\002\000\001\002\000\006" +
    "\011\156\015\155\001\002\000\004\013\154\001\002\000" +
    "\004\014\135\001\002\000\006\011\ufffc\015\ufffc\001\002" +
    "\000\004\014\100\001\002\000\004\014\072\001\002\000" +
    "\004\014\040\001\002\000\004\014\021\001\002\000\004" +
    "\012\022\001\002\000\010\003\025\010\026\013\uffd3\001" +
    "\002\000\006\013\uffd1\015\uffd1\001\002\000\006\013\uffd4" +
    "\015\036\001\002\000\004\011\035\001\002\000\004\030" +
    "\031\001\002\000\004\013\030\001\002\000\006\011\ufff7" +
    "\015\ufff7\001\002\000\004\014\032\001\002\000\004\006" +
    "\033\001\002\000\004\011\034\001\002\000\006\013\uffd0" +
    "\015\uffd0\001\002\000\006\013\uffcf\015\uffcf\001\002\000" +
    "\006\003\025\010\026\001\002\000\006\013\uffd2\015\uffd2" +
    "\001\002\000\004\012\041\001\002\000\010\003\042\010" +
    "\043\013\uffdf\001\002\000\004\011\071\001\002\000\010" +
    "\023\uffdc\024\uffdc\027\uffdc\001\002\000\004\013\051\001" +
    "\002\000\006\013\uffdd\015\uffdd\001\002\000\006\013\uffe0" +
    "\015\047\001\002\000\006\003\042\010\043\001\002\000" +
    "\006\013\uffde\015\uffde\001\002\000\006\011\ufff8\015\ufff8" +
    "\001\002\000\010\023\055\024\056\027\054\001\002\000" +
    "\006\011\067\015\066\001\002\000\004\014\064\001\002" +
    "\000\004\014\062\001\002\000\004\014\060\001\002\000" +
    "\006\011\uffd8\015\uffd8\001\002\000\004\006\061\001\002" +
    "\000\006\011\uffd6\015\uffd6\001\002\000\004\006\063\001" +
    "\002\000\006\011\uffd7\015\uffd7\001\002\000\004\006\065" +
    "\001\002\000\006\011\uffd5\015\uffd5\001\002\000\010\023" +
    "\055\024\056\027\054\001\002\000\006\013\uffdb\015\uffdb" +
    "\001\002\000\006\011\uffd9\015\uffd9\001\002\000\006\013" +
    "\uffda\015\uffda\001\002\000\004\012\073\001\002\000\006" +
    "\004\076\005\075\001\002\000\004\013\077\001\002\000" +
    "\004\013\ufff4\001\002\000\004\013\ufff5\001\002\000\006" +
    "\011\ufffb\015\ufffb\001\002\000\004\012\101\001\002\000" +
    "\010\003\103\010\104\013\uffec\001\002\000\006\013\uffed" +
    "\015\133\001\002\000\004\011\132\001\002\000\012\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\001\002\000\004\013\107" +
    "\001\002\000\006\013\uffea\015\uffea\001\002\000\006\011" +
    "\ufff9\015\ufff9\001\002\000\012\023\114\024\115\025\112" +
    "\026\116\001\002\000\006\011\uffe5\015\uffe5\001\002\000" +
    "\004\014\130\001\002\000\006\011\126\015\125\001\002" +
    "\000\004\014\123\001\002\000\004\014\121\001\002\000" +
    "\004\014\117\001\002\000\004\006\120\001\002\000\006" +
    "\011\uffe1\015\uffe1\001\002\000\004\006\122\001\002\000" +
    "\006\011\uffe3\015\uffe3\001\002\000\004\006\124\001\002" +
    "\000\006\011\uffe4\015\uffe4\001\002\000\012\023\114\024" +
    "\115\025\112\026\116\001\002\000\006\013\uffe8\015\uffe8" +
    "\001\002\000\006\011\uffe6\015\uffe6\001\002\000\004\006" +
    "\131\001\002\000\006\011\uffe2\015\uffe2\001\002\000\006" +
    "\013\uffe7\015\uffe7\001\002\000\006\003\103\010\104\001" +
    "\002\000\006\013\uffeb\015\uffeb\001\002\000\004\012\136" +
    "\001\002\000\010\003\142\010\143\013\ufff2\001\002\000" +
    "\004\013\153\001\002\000\006\013\ufff3\015\151\001\002" +
    "\000\006\013\ufff0\015\ufff0\001\002\000\004\011\150\001" +
    "\002\000\004\023\144\001\002\000\004\014\145\001\002" +
    "\000\004\006\146\001\002\000\004\011\147\001\002\000" +
    "\006\013\uffef\015\uffef\001\002\000\006\013\uffee\015\uffee" +
    "\001\002\000\006\003\142\010\143\001\002\000\006\013" +
    "\ufff1\015\ufff1\001\002\000\006\011\ufffa\015\ufffa\001\002" +
    "\000\006\011\ufff6\015\ufff6\001\002\000\016\003\012\016" +
    "\016\017\013\020\015\021\017\022\020\001\002\000\004" +
    "\002\uffff\001\002\000\006\011\ufffd\015\ufffd\001\002\000" +
    "\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\006\002\005\003\006\001\001\000\002\001" +
    "\001\000\006\004\010\005\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\026\025\023\026\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\043\020" +
    "\045\021\044\001\001\000\002\001\001\000\004\030\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\052\023\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\104\013\101\014\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\112\016" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\136\010\137\011\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ScannerSintaxJson$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ScannerSintaxJson$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ScannerSintaxJson$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    public Result resultado = new Result();
    public Variable v = null;
    public Metodo m = null;

    public Result getResult(){
        return resultado;
    }

    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            ScannerSintaxJson asin = new ScannerSintaxJson(
                    new ScannerLexJson( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ScannerSintaxJson$actions {



  private final ScannerSintaxJson parser;

  /** Constructor */
  CUP$ScannerSintaxJson$actions(ScannerSintaxJson parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ScannerSintaxJson$do_action(
    int                        CUP$ScannerSintaxJson$act_num,
    java_cup.runtime.lr_parser CUP$ScannerSintaxJson$parser,
    java.util.Stack            CUP$ScannerSintaxJson$stack,
    int                        CUP$ScannerSintaxJson$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ScannerSintaxJson$result;

      /* select the action based on the action number */
      switch (CUP$ScannerSintaxJson$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTCOMMENT ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTCOMMENT",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTCOMMENT ::= LLAVEIZQ TEXTO DPUNTOS CADENA LLAVEDER 
            {
              Object RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-1)).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-1)).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-1)).value;
		 parser.resultado.setComentario(comment); 
              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTCOMMENT",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-4)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTSCOMMENT ::= SENTCOMMENT 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSCOMMENT",19, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTSCOMMENT ::= SENTSCOMMENT COMA SENTCOMMENT 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSCOMMENT",19, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTSCOMMENTS ::= 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSCOMMENTS",18, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTSCOMMENTS ::= SENTSCOMMENT 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSCOMMENTS",18, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAMMET ::= PARAMETROS DPUNTOS CADENA 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJson$stack.peek()).value;
		 parser.m.setParametro(Integer.parseInt(param)); 
              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("PARAMMET",17, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAMMET ::= TIPO DPUNTOS CADENA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJson$stack.peek()).value;
		 parser.m.setTipo(tipo); 
              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("PARAMMET",17, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMMET ::= NOMBRE DPUNTOS CADENA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJson$stack.peek()).value;
		 parser.m.setNombre(nombre); 
              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("PARAMMET",17, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMSMET ::= PARAMMET 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("PARAMSMET",16, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMSMET ::= PARAMSMET COMA PARAMMET 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("PARAMSMET",16, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTMET ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTMET",15, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTMET ::= LLAVEIZQ NT$1 PARAMSMET LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-2)).value;
		
                                        parser.resultado.setMetodo(parser.m);
                                        parser.m = null;
                                    
              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTMET",15, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-3)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$1 ::= 
            {
              Object RESULT =null;

                                        parser.m = new Metodo();
                                    
              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("NT$1",22, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTSMET ::= SENTMET 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSMET",14, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTSMET ::= SENTSMET COMA SENTMET 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSMET",14, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTSMETODOS ::= 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSMETODOS",13, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTSMETODOS ::= SENTSMET 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSMETODOS",13, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMVAR ::= CLASE DPUNTOS CADENA 
            {
              Object RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()).right;
		String clase = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJson$stack.peek()).value;
		 parser.v.setClase(clase); 
              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("PARAMVAR",12, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMVAR ::= FUNCION DPUNTOS CADENA 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJson$stack.peek()).value;
		 parser.v.setMetodo(func); 
              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("PARAMVAR",12, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMVAR ::= TIPO DPUNTOS CADENA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJson$stack.peek()).value;
		 parser.v.setTipo(tipo); 
              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("PARAMVAR",12, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMVAR ::= NOMBRE DPUNTOS CADENA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJson$stack.peek()).value;
		 parser.v.setNombre(nombre); 
              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("PARAMVAR",12, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMSVAR ::= PARAMVAR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("PARAMSVAR",11, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMSVAR ::= PARAMSVAR COMA PARAMVAR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("PARAMSVAR",11, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTVAR ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTVAR",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTVAR ::= LLAVEIZQ NT$0 PARAMSVAR LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-2)).value;
		
                                    parser.resultado.setVariable(parser.v);
                                    parser.v = null;
                                
              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTVAR",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-3)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$0 ::= 
            {
              Object RESULT =null;

                                    parser.v = new Variable();
                                
              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("NT$0",21, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTSVAR ::= SENTVAR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSVAR",9, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTSVAR ::= SENTSVAR COMA SENTVAR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSVAR",9, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTSVARS ::= 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSVARS",8, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTSVARS ::= SENTSVAR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSVARS",8, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTCLASES ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTCLASES",7, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTCLASES ::= LLAVEIZQ NOMBRE DPUNTOS CADENA LLAVEDER 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-1)).value;
		
                                                                parser.resultado.setClase(cad);
                                                            
              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTCLASES",7, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-4)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTSCLASES ::= SENTCLASES 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSCLASES",6, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTSCLASES ::= SENTSCLASES COMA SENTCLASES 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSCLASES",6, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTSCLASS ::= 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSCLASS",5, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTSCLASS ::= SENTSCLASES 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSCLASS",5, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTSSCORE ::= DECIMAL 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()).right;
		double num = Double.parseDouble(((java_cup.runtime.Symbol) CUP$ScannerSintaxJson$stack.peek()).value.toString());
		
                                    parser.resultado.setScore(num);
                                
              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSSCORE",4, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTSSCORE ::= ENTERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$ScannerSintaxJson$stack.peek()).value;
		
                                    parser.resultado.setScore((double)num);
                                
              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSSCORE",4, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTJSON ::= error CORCHDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTJSON",3, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTJSON ::= COMENTARIOS DPUNTOS CORCHIZQ SENTSCOMMENTS CORCHDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTJSON",3, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-4)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTJSON ::= METODOS DPUNTOS CORCHIZQ SENTSMETODOS CORCHDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTJSON",3, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-4)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTJSON ::= VARIABLES DPUNTOS CORCHIZQ SENTSVARS CORCHDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTJSON",3, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-4)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTJSON ::= CLASES DPUNTOS CORCHIZQ SENTSCLASS CORCHDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTJSON",3, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-4)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTJSON ::= SCORE DPUNTOS CORCHIZQ SENTSSCORE CORCHDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTJSON",3, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-4)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTSJSON ::= SENTJSON 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSJSON",2, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTSJSON ::= SENTSJSON COMA SENTJSON 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("SENTSJSON",2, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= LLAVEIZQ SENTSJSON LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-1)).value;
		RESULT = start_val;
              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.elementAt(CUP$ScannerSintaxJson$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ScannerSintaxJson$parser.done_parsing();
          return CUP$ScannerSintaxJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S0 ::= INICIO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJson$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJson$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJson$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

