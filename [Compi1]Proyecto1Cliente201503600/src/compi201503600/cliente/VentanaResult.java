/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package compi201503600.cliente;

import compi201503600.beans.Metodo;
import compi201503600.beans.Result;
import compi201503600.beans.Variable;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author ed_ci
 */
public class VentanaResult extends javax.swing.JFrame {

    public VentanaResult(Result json) {
        initComponents();
        
        crearArbol(json);
    }

    private void crearArbol(Result json) {
        DefaultMutableTreeNode raiz = new DefaultMutableTreeNode("Json");
        /**
         * Definimos el modelo donde se agregaran los nodos
         */
        DefaultTreeModel modelo = new DefaultTreeModel(raiz);
        /**
         * agregamos el modelo al arbol, donde previamente establecimos la raiz
         */
        arbol.setModel(modelo);

        /**
         * Definimos mas nodos del arbol y se lo agregamos al modelo
         */
        DefaultMutableTreeNode carpetaScore = new DefaultMutableTreeNode("Score");
        DefaultMutableTreeNode nodoScore = new DefaultMutableTreeNode(json.getScore());
        modelo.insertNodeInto(nodoScore, carpetaScore, 0);
        
        DefaultMutableTreeNode carpetaClase = new DefaultMutableTreeNode("Clases");
        for(String clase:json.getClases()){
            DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(clase);
            modelo.insertNodeInto(nodo, carpetaClase, 0);
        }
        
        DefaultMutableTreeNode carpetaVar = new DefaultMutableTreeNode("Variables");
        int i = 0;
        for(Variable var:json.getVariables()){
            DefaultMutableTreeNode nodoVar = new DefaultMutableTreeNode("Variable " + (++i));
            DefaultMutableTreeNode nodoNombre = new DefaultMutableTreeNode(var.getNombre());
            DefaultMutableTreeNode nodoTipo = new DefaultMutableTreeNode(var.getTipo());
            DefaultMutableTreeNode nodoMetodo = new DefaultMutableTreeNode(var.getMetodo());
            DefaultMutableTreeNode nodoClase = new DefaultMutableTreeNode(var.getClase());
            modelo.insertNodeInto(nodoNombre, nodoVar, 0);
            modelo.insertNodeInto(nodoTipo, nodoVar, 1);
            modelo.insertNodeInto(nodoMetodo, nodoVar, 2);
            modelo.insertNodeInto(nodoClase, nodoVar, 3);
            modelo.insertNodeInto(nodoVar, carpetaVar, 0);
        }
        
        DefaultMutableTreeNode carpetaMet = new DefaultMutableTreeNode("Metodos");
        i = 0;
        for(Metodo met:json.getMetodos()){
            DefaultMutableTreeNode nodoMet = new DefaultMutableTreeNode("Metodo " + (++i));
            DefaultMutableTreeNode nodoNombre = new DefaultMutableTreeNode(met.getNombre());
            DefaultMutableTreeNode nodoTipo = new DefaultMutableTreeNode(met.getTipo());
            DefaultMutableTreeNode nodoParam = new DefaultMutableTreeNode("Parametros: " + met.getParametros());
            modelo.insertNodeInto(nodoNombre, nodoMet, 0);
            modelo.insertNodeInto(nodoTipo, nodoMet, 1);
            modelo.insertNodeInto(nodoParam, nodoMet, 2);
            modelo.insertNodeInto(nodoMet, carpetaMet, 0);
        }
        
        DefaultMutableTreeNode carpetaComent = new DefaultMutableTreeNode("Comentarios");
        for(String c:json.getComentarios()){
            DefaultMutableTreeNode comentario = new DefaultMutableTreeNode(c);
            modelo.insertNodeInto(comentario, carpetaComent, 0);
        }
        /**
         * Definimos donde se agrega el nodo, dentro de que rama y que posicion
         */
        modelo.insertNodeInto(carpetaScore, raiz, 0);
        modelo.insertNodeInto(carpetaClase, raiz, 1);
        modelo.insertNodeInto(carpetaVar, raiz, 2);
        modelo.insertNodeInto(carpetaMet, raiz, 3);
        modelo.insertNodeInto(carpetaComent, raiz, 4);

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        arbol = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Arbol RESULT");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        arbol.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(arbol);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new VentanaResult().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree arbol;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
