
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 02 13:09:47 CST 2018
//----------------------------------------------------

package compi201503600.analisis.java;

import java_cup.runtime.*;
import java.io.FileReader;
import compi201503600.beans.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 02 13:09:47 CST 2018
  */
public class ScannerSintaxJava extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ScannerSintaxJava() {super();}

  /** Constructor which sets the default scanner. */
  public ScannerSintaxJava(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ScannerSintaxJava(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\334\000\002\002\004\000\002\004\003\000\002\005" +
    "\004\000\002\005\003\000\002\006\002\000\002\007\005" +
    "\000\002\007\005\000\002\007\004\000\002\007\003\000" +
    "\002\007\003\000\002\011\005\000\002\011\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\003" +
    "\000\002\111\002\000\002\013\011\000\002\013\004\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\015\004\000\002\015\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\004\000" +
    "\002\016\004\000\002\017\004\000\002\020\005\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\112\002\000\002\003\007\000\002\113\002\000" +
    "\002\003\005\000\002\021\004\000\002\021\010\000\002" +
    "\021\003\000\002\022\003\000\002\022\003\000\002\023" +
    "\005\000\002\023\003\000\002\024\005\000\002\024\005" +
    "\000\002\024\004\000\002\024\005\000\002\024\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\026\005\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\027\005\000\002\027\003\000\002\030\010" +
    "\000\002\030\005\000\002\030\006\000\002\030\003\000" +
    "\002\031\012\000\002\032\006\000\002\032\004\000\002" +
    "\032\003\000\002\033\004\000\002\033\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\004\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\013\000\002" +
    "\034\004\000\002\034\004\000\002\035\006\000\002\035" +
    "\005\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\037\005\000\002\037\004\000\002\040\011\000" +
    "\002\040\015\000\002\040\012\000\002\040\016\000\002" +
    "\041\013\000\002\041\012\000\002\046\015\000\002\047" +
    "\006\000\002\047\005\000\002\050\004\000\002\050\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\004\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\013\000\002\051\004\000\002\051\004\000\002\051\004" +
    "\000\002\054\011\000\002\054\015\000\002\054\012\000" +
    "\002\054\016\000\002\055\013\000\002\055\012\000\002" +
    "\056\012\000\002\057\004\000\002\057\003\000\002\060" +
    "\010\000\002\061\007\000\002\061\003\000\002\052\011" +
    "\000\002\053\013\000\002\042\012\000\002\043\004\000" +
    "\002\043\003\000\002\044\010\000\002\045\007\000\002" +
    "\045\003\000\002\062\014\000\002\063\006\000\002\063" +
    "\006\000\002\114\002\000\002\064\014\000\002\115\002" +
    "\000\002\065\014\000\002\066\004\000\002\066\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\004\000\002" +
    "\067\003\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\013" +
    "\000\002\067\005\000\002\067\004\000\002\067\004\000" +
    "\002\070\011\000\002\070\015\000\002\070\012\000\002" +
    "\070\016\000\002\071\013\000\002\071\012\000\002\076" +
    "\015\000\002\077\004\000\002\077\003\000\002\100\003" +
    "\000\002\100\003\000\002\100\004\000\002\100\003\000" +
    "\002\100\003\000\002\100\003\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\100\013\000\002\100" +
    "\005\000\002\100\004\000\002\100\004\000\002\100\004" +
    "\000\002\103\011\000\002\103\015\000\002\103\012\000" +
    "\002\103\016\000\002\104\013\000\002\104\012\000\002" +
    "\105\012\000\002\106\004\000\002\106\003\000\002\107" +
    "\010\000\002\110\007\000\002\101\011\000\002\102\013" +
    "\000\002\072\012\000\002\073\004\000\002\073\003\000" +
    "\002\074\010\000\002\075\007\000\002\075\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0237\000\022\003\014\005\020\045\010\046\013\047" +
    "\015\050\007\051\012\052\017\001\002\000\024\002\000" +
    "\003\014\005\020\045\010\046\013\047\015\050\007\051" +
    "\012\052\017\001\002\000\024\002\ufff9\003\ufff9\005\ufff9" +
    "\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\001" +
    "\002\000\004\053\043\001\002\000\004\053\uffea\001\002" +
    "\000\012\004\032\053\037\062\036\104\033\001\002\000" +
    "\024\002\ufffe\003\ufffe\005\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\052\ufffe\001\002\000\024\004\uffe9\053" +
    "\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9" +
    "\065\uffe9\001\002\000\004\004\024\001\002\000\006\014" +
    "\022\015\023\001\002\000\024\004\uffeb\053\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\001" +
    "\002\000\004\002\021\001\002\000\024\004\uffe8\053\uffe8" +
    "\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065" +
    "\uffe8\001\002\000\024\002\ufff8\003\ufff8\005\ufff8\045\ufff8" +
    "\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\001\002\000" +
    "\004\002\001\001\002\000\024\002\uffec\003\uffec\005\uffec" +
    "\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\001" +
    "\002\000\024\002\ufffa\003\ufffa\005\ufffa\045\ufffa\046\ufffa" +
    "\047\ufffa\050\ufffa\051\ufffa\052\ufffa\001\002\000\006\015" +
    "\uffef\020\uffef\001\002\000\006\015\027\020\026\001\002" +
    "\000\006\004\030\027\031\001\002\000\024\002\ufffb\003" +
    "\ufffb\005\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb" +
    "\052\ufffb\001\002\000\006\015\ufff1\020\ufff1\001\002\000" +
    "\006\015\ufff0\020\ufff0\001\002\000\006\015\ufff5\020\ufff5" +
    "\001\002\000\006\015\ufff2\020\ufff2\001\002\000\006\015" +
    "\041\020\040\001\002\000\006\015\ufff6\020\ufff6\001\002" +
    "\000\006\015\ufff3\020\ufff3\001\002\000\006\015\ufff4\020" +
    "\ufff4\001\002\000\012\004\032\053\037\062\036\104\033" +
    "\001\002\000\024\002\ufffc\003\ufffc\005\ufffc\045\ufffc\046" +
    "\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\001\002\000\006" +
    "\015\ufff7\020\ufff7\001\002\000\004\004\044\001\002\000" +
    "\004\013\uffee\001\002\000\004\013\046\001\002\000\016" +
    "\003\053\005\061\047\015\050\051\051\012\052\017\001" +
    "\002\000\020\003\uffe6\005\uffe6\014\uffe6\047\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\001\002\000\022\004\u0160\057\u015e\060" +
    "\127\061\121\062\110\063\104\064\106\065\107\001\002" +
    "\000\024\004\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063" +
    "\uffea\064\uffea\065\uffea\103\066\001\002\000\020\003\053" +
    "\005\061\014\064\047\015\050\051\051\012\052\017\001" +
    "\002\000\006\014\062\015\063\001\002\000\020\003\uffe3" +
    "\005\uffe3\014\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\001" +
    "\002\000\020\003\uffe5\005\uffe5\014\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\001\002\000\020\003\uffe1\005\uffe1\014" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\001\002\000\020" +
    "\003\uffe4\005\uffe4\014\uffe4\047\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\001\002\000\020\003\uffe2\005\uffe2\014\uffe2\047\uffe2" +
    "\050\uffe2\051\uffe2\052\uffe2\001\002\000\020\003\uffe0\005" +
    "\uffe0\014\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\001\002" +
    "\000\020\003\uffde\005\uffde\014\uffde\047\uffde\050\uffde\051" +
    "\uffde\052\uffde\001\002\000\020\003\uffdf\005\uffdf\014\uffdf" +
    "\047\uffdf\050\uffdf\051\uffdf\052\uffdf\001\002\000\024\002" +
    "\uffed\003\uffed\005\uffed\045\uffed\046\uffed\047\uffed\050\uffed" +
    "\051\uffed\052\uffed\001\002\000\020\003\uffe7\005\uffe7\014" +
    "\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\001\002\000\004" +
    "\057\067\001\002\000\004\104\070\001\002\000\004\007" +
    "\071\001\002\000\004\062\073\001\002\000\004\010\102" +
    "\001\002\000\006\011\074\107\075\001\002\000\004\012" +
    "\100\001\002\000\004\011\076\001\002\000\004\012\077" +
    "\001\002\000\004\010\uff63\001\002\000\004\107\101\001" +
    "\002\000\004\010\uff64\001\002\000\004\013\103\001\002" +
    "\000\042\003\132\004\117\005\135\054\120\060\127\061" +
    "\121\062\110\063\104\064\106\065\107\066\115\070\136" +
    "\071\111\072\122\073\114\100\125\001\002\000\004\004" +
    "\uffd8\001\002\000\014\015\u015d\021\351\022\350\023\352" +
    "\024\354\001\002\000\004\004\uffd7\001\002\000\004\004" +
    "\uffd6\001\002\000\004\004\uffd9\001\002\000\004\007\u0157" +
    "\001\002\000\046\003\uffa0\004\uffa0\005\uffa0\014\uffa0\054" +
    "\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0" +
    "\066\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0\076\uffa0\100" +
    "\uffa0\001\002\000\046\003\uffa4\004\uffa4\005\uffa4\014\uffa4" +
    "\054\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065" +
    "\uffa4\066\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\076\uffa4" +
    "\100\uffa4\001\002\000\004\007\u0142\001\002\000\004\007" +
    "\u0125\001\002\000\046\003\uff9e\004\uff9e\005\uff9e\014\uff9e" +
    "\054\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065" +
    "\uff9e\066\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\076\uff9e" +
    "\100\uff9e\001\002\000\022\004\uffd5\007\206\015\uffab\020" +
    "\uffab\021\uffab\022\uffab\023\uffab\024\uffab\001\002\000\004" +
    "\020\u0123\001\002\000\004\004\uffda\001\002\000\004\013" +
    "\u011b\001\002\000\046\003\uffa3\004\uffa3\005\uffa3\014\uffa3" +
    "\054\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065" +
    "\uffa3\066\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3\076\uffa3" +
    "\100\uffa3\001\002\000\046\003\uff9f\004\uff9f\005\uff9f\014" +
    "\uff9f\054\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f" +
    "\065\uff9f\066\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\076" +
    "\uff9f\100\uff9f\001\002\000\004\020\u0113\001\002\000\004" +
    "\004\u0102\001\002\000\004\004\uffdb\001\002\000\046\003" +
    "\uff9d\004\uff9d\005\uff9d\014\uff9d\054\uff9d\060\uff9d\061\uff9d" +
    "\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\070\uff9d\071" +
    "\uff9d\072\uff9d\073\uff9d\076\uff9d\100\uff9d\001\002\000\062" +
    "\010\uffaf\015\uffaf\016\uffaf\017\uffaf\020\375\021\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\001\002\000\006" +
    "\014\373\015\374\001\002\000\046\003\uffa1\004\uffa1\005" +
    "\uffa1\014\uffa1\054\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1" +
    "\064\uffa1\065\uffa1\066\uffa1\070\uffa1\071\uffa1\072\uffa1\073" +
    "\uffa1\076\uffa1\100\uffa1\001\002\000\046\003\uffa5\004\uffa5" +
    "\005\uffa5\014\uffa5\054\uffa5\060\uffa5\061\uffa5\062\uffa5\063" +
    "\uffa5\064\uffa5\065\uffa5\066\uffa5\070\uffa5\071\uffa5\072\uffa5" +
    "\073\uffa5\076\uffa5\100\uffa5\001\002\000\046\003\uff9c\004" +
    "\uff9c\005\uff9c\014\uff9c\054\uff9c\060\uff9c\061\uff9c\062\uff9c" +
    "\063\uff9c\064\uff9c\065\uff9c\066\uff9c\070\uff9c\071\uff9c\072" +
    "\uff9c\073\uff9c\076\uff9c\100\uff9c\001\002\000\004\007\142" +
    "\001\002\000\044\003\132\004\117\005\135\014\140\054" +
    "\120\060\127\061\121\062\110\063\104\064\106\065\107" +
    "\066\115\070\136\071\111\072\122\073\114\100\125\001" +
    "\002\000\020\003\uff65\005\uff65\014\uff65\047\uff65\050\uff65" +
    "\051\uff65\052\uff65\001\002\000\046\003\uffa6\004\uffa6\005" +
    "\uffa6\014\uffa6\054\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6" +
    "\064\uffa6\065\uffa6\066\uffa6\070\uffa6\071\uffa6\072\uffa6\073" +
    "\uffa6\076\uffa6\100\uffa6\001\002\000\020\004\143\060\127" +
    "\061\121\062\110\063\104\064\106\065\107\001\002\000" +
    "\006\004\uffd5\021\371\001\002\000\004\004\366\001\002" +
    "\000\004\015\146\001\002\000\024\004\160\006\154\007" +
    "\157\026\151\044\147\054\120\056\153\105\152\106\150" +
    "\001\002\000\024\004\160\006\154\007\157\026\151\044" +
    "\147\054\120\056\153\105\152\106\150\001\002\000\052" +
    "\010\uffb4\015\uffb4\016\uffb4\017\uffb4\021\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\001\002\000\022\004\160\006\154\007\157\026\151" +
    "\054\120\056\153\105\152\106\150\001\002\000\052\010" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\021\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\001\002\000\052\010\uffb2\015\uffb2\016\uffb2\017\uffb2\021" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\001\002\000\052\010\uffb3\015\uffb3" +
    "\016\uffb3\017\uffb3\021\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\001\002\000" +
    "\052\010\uffb1\015\uffb1\016\uffb1\017\uffb1\021\uffb1\025\uffb1" +
    "\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\001\002\000\010\015\224\042\217\043\216\001" +
    "\002\000\024\004\160\006\154\007\157\026\151\044\147" +
    "\054\120\056\153\105\152\106\150\001\002\000\064\007" +
    "\206\010\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030" +
    "\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\001\002\000" +
    "\052\010\uffc5\015\uffc5\016\uffc5\017\uffc5\021\uffc5\025\166" +
    "\026\162\027\171\030\175\031\174\032\164\033\176\034" +
    "\167\035\165\036\163\037\170\040\177\041\173\042\uffc5" +
    "\043\uffc5\001\002\000\022\004\160\006\154\007\157\026" +
    "\151\054\120\056\153\105\152\106\150\001\002\000\022" +
    "\004\uffc1\006\uffc1\007\uffc1\026\uffc1\054\uffc1\056\uffc1\105" +
    "\uffc1\106\uffc1\001\002\000\052\010\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\021\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\001\002\000\022\004" +
    "\uffc0\006\uffc0\007\uffc0\026\uffc0\054\uffc0\056\uffc0\105\uffc0" +
    "\106\uffc0\001\002\000\022\004\160\006\154\007\157\026" +
    "\151\054\120\056\153\105\152\106\150\001\002\000\022" +
    "\004\uffbf\006\uffbf\007\uffbf\026\uffbf\054\uffbf\056\uffbf\105" +
    "\uffbf\106\uffbf\001\002\000\022\004\uffc2\006\uffc2\007\uffc2" +
    "\026\uffc2\054\uffc2\056\uffc2\105\uffc2\106\uffc2\001\002\000" +
    "\022\004\160\006\154\007\157\026\151\054\120\056\153" +
    "\105\152\106\150\001\002\000\022\004\160\006\154\007" +
    "\157\026\151\054\120\056\153\105\152\106\150\001\002" +
    "\000\022\004\uffc3\006\uffc3\007\uffc3\026\uffc3\054\uffc3\056" +
    "\uffc3\105\uffc3\106\uffc3\001\002\000\022\004\160\006\154" +
    "\007\157\026\151\054\120\056\153\105\152\106\150\001" +
    "\002\000\022\004\160\006\154\007\157\026\151\054\120" +
    "\056\153\105\152\106\150\001\002\000\052\010\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\021\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\001\002" +
    "\000\022\004\uffc4\006\uffc4\007\uffc4\026\uffc4\054\uffc4\056" +
    "\uffc4\105\uffc4\106\uffc4\001\002\000\052\010\uffbb\015\uffbb" +
    "\016\uffbb\017\uffbb\021\uffbb\025\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\031\174\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\001\002\000" +
    "\052\010\uffba\015\uffba\016\uffba\017\uffba\021\uffba\025\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034" +
    "\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\001\002\000\036\010\uffc6\015\uffc6\016\uffc6\017" +
    "\uffc6\021\uffc6\025\166\026\162\027\171\030\175\031\174" +
    "\032\164\033\176\042\uffc6\043\uffc6\001\002\000\052\010" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\021\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\031\174\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\001\002\000\052\010\uffbe\015\uffbe\016\uffbe\017\uffbe\021" +
    "\uffbe\025\uffbe\026\uffbe\027\171\030\175\031\174\032\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\001\002\000\052\010\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\021\uffbd\025\uffbd\026\uffbd\027\171\030" +
    "\175\031\174\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\001\002\000" +
    "\026\004\160\006\154\007\157\010\ufffd\026\151\044\147" +
    "\054\120\056\153\105\152\106\150\001\002\000\004\010" +
    "\uffcc\001\002\000\012\010\uffca\017\uffca\042\217\043\216" +
    "\001\002\000\006\010\uffcd\017\214\001\002\000\004\010" +
    "\213\001\002\000\062\010\uffac\015\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026" +
    "\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac" +
    "\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\001\002\000\024\004\160\006\154\007\157\026\151" +
    "\044\147\054\120\056\153\105\152\106\150\001\002\000" +
    "\012\010\uffcb\017\uffcb\042\217\043\216\001\002\000\024" +
    "\004\160\006\154\007\157\026\151\044\147\054\120\056" +
    "\153\105\152\106\150\001\002\000\024\004\160\006\154" +
    "\007\157\026\151\044\147\054\120\056\153\105\152\106" +
    "\150\001\002\000\020\010\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\021\uffc8\042\uffc8\043\uffc8\001\002\000\020\010\uffc9\015" +
    "\uffc9\016\uffc9\017\uffc9\021\uffc9\042\uffc9\043\uffc9\001\002" +
    "\000\010\010\223\042\217\043\216\001\002\000\052\010" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\021\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\001\002\000\024\004\160\006\154\007\157\026\151\044" +
    "\147\054\120\056\153\105\152\106\150\001\002\000\010" +
    "\010\226\042\217\043\216\001\002\000\004\013\227\001" +
    "\002\000\044\003\245\004\117\005\246\054\120\060\127" +
    "\061\121\062\110\063\104\064\106\065\107\066\236\070" +
    "\136\071\111\072\122\073\235\076\243\100\244\001\002" +
    "\000\014\015\353\021\351\022\350\023\352\024\354\001" +
    "\002\000\046\003\uff83\004\uff83\005\uff83\014\uff83\054\uff83" +
    "\060\uff83\061\uff83\062\uff83\063\uff83\064\uff83\065\uff83\066" +
    "\uff83\070\uff83\071\uff83\072\uff83\073\uff83\076\uff83\100\uff83" +
    "\001\002\000\046\003\uff82\004\uff82\005\uff82\014\uff82\054" +
    "\uff82\060\uff82\061\uff82\062\uff82\063\uff82\064\uff82\065\uff82" +
    "\066\uff82\070\uff82\071\uff82\072\uff82\073\uff82\076\uff82\100" +
    "\uff82\001\002\000\046\003\uff86\004\uff86\005\uff86\014\uff86" +
    "\054\uff86\060\uff86\061\uff86\062\uff86\063\uff86\064\uff86\065" +
    "\uff86\066\uff86\070\uff86\071\uff86\072\uff86\073\uff86\076\uff86" +
    "\100\uff86\001\002\000\046\003\uff7f\004\uff7f\005\uff7f\014" +
    "\uff7f\054\uff7f\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f" +
    "\065\uff7f\066\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\076" +
    "\uff7f\100\uff7f\001\002\000\004\007\322\001\002\000\004" +
    "\007\265\001\002\000\046\003\uff80\004\uff80\005\uff80\014" +
    "\uff80\054\uff80\060\uff80\061\uff80\062\uff80\063\uff80\064\uff80" +
    "\065\uff80\066\uff80\070\uff80\071\uff80\072\uff80\073\uff80\076" +
    "\uff80\100\uff80\001\002\000\046\003\uff87\004\uff87\005\uff87" +
    "\014\uff87\054\uff87\060\uff87\061\uff87\062\uff87\063\uff87\064" +
    "\uff87\065\uff87\066\uff87\070\uff87\071\uff87\072\uff87\073\uff87" +
    "\076\uff87\100\uff87\001\002\000\046\003\uff85\004\uff85\005" +
    "\uff85\014\uff85\054\uff85\060\uff85\061\uff85\062\uff85\063\uff85" +
    "\064\uff85\065\uff85\066\uff85\070\uff85\071\uff85\072\uff85\073" +
    "\uff85\076\uff85\100\uff85\001\002\000\046\003\uff81\004\uff81" +
    "\005\uff81\014\uff81\054\uff81\060\uff81\061\uff81\062\uff81\063" +
    "\uff81\064\uff81\065\uff81\066\uff81\070\uff81\071\uff81\072\uff81" +
    "\073\uff81\076\uff81\100\uff81\001\002\000\004\015\264\001" +
    "\002\000\004\020\254\001\002\000\006\014\252\015\253" +
    "\001\002\000\046\003\uff7e\004\uff7e\005\uff7e\014\uff7e\054" +
    "\uff7e\060\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\065\uff7e" +
    "\066\uff7e\070\uff7e\071\uff7e\072\uff7e\073\uff7e\076\uff7e\100" +
    "\uff7e\001\002\000\046\003\245\004\117\005\246\014\251" +
    "\054\120\060\127\061\121\062\110\063\104\064\106\065" +
    "\107\066\236\070\136\071\111\072\122\073\235\076\243" +
    "\100\244\001\002\000\046\003\uff88\004\uff88\005\uff88\014" +
    "\uff88\054\uff88\060\uff88\061\uff88\062\uff88\063\uff88\064\uff88" +
    "\065\uff88\066\uff88\070\uff88\071\uff88\072\uff88\073\uff88\076" +
    "\uff88\100\uff88\001\002\000\046\003\uff8b\004\uff8b\005\uff8b" +
    "\014\uff8b\054\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\064" +
    "\uff8b\065\uff8b\066\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b" +
    "\076\uff8b\100\uff8b\001\002\000\046\003\uff7a\004\uff7a\005" +
    "\uff7a\014\uff7a\054\uff7a\060\uff7a\061\uff7a\062\uff7a\063\uff7a" +
    "\064\uff7a\065\uff7a\066\uff7a\070\uff7a\071\uff7a\072\uff7a\073" +
    "\uff7a\076\uff7a\100\uff7a\001\002\000\046\003\uff7b\004\uff7b" +
    "\005\uff7b\014\uff7b\054\uff7b\060\uff7b\061\uff7b\062\uff7b\063" +
    "\uff7b\064\uff7b\065\uff7b\066\uff7b\070\uff7b\071\uff7b\072\uff7b" +
    "\073\uff7b\076\uff7b\100\uff7b\001\002\000\004\101\255\001" +
    "\002\000\004\020\256\001\002\000\004\102\257\001\002" +
    "\000\004\007\260\001\002\000\024\004\160\006\154\007" +
    "\157\026\151\044\147\054\120\056\153\105\152\106\150" +
    "\001\002\000\010\010\262\042\217\043\216\001\002\000" +
    "\004\015\263\001\002\000\046\003\uff7d\004\uff7d\005\uff7d" +
    "\014\uff7d\054\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064" +
    "\uff7d\065\uff7d\066\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d" +
    "\076\uff7d\100\uff7d\001\002\000\046\003\uff7c\004\uff7c\005" +
    "\uff7c\014\uff7c\054\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c" +
    "\064\uff7c\065\uff7c\066\uff7c\070\uff7c\071\uff7c\072\uff7c\073" +
    "\uff7c\076\uff7c\100\uff7c\001\002\000\024\004\160\006\154" +
    "\007\157\026\151\044\147\054\120\056\153\105\152\106" +
    "\150\001\002\000\010\010\267\042\217\043\216\001\002" +
    "\000\004\013\270\001\002\000\044\003\245\004\117\005" +
    "\246\054\120\060\127\061\121\062\110\063\104\064\106" +
    "\065\107\066\236\070\136\071\111\072\122\073\235\076" +
    "\243\100\244\001\002\000\046\003\245\004\117\005\246" +
    "\014\272\054\120\060\127\061\121\062\110\063\104\064" +
    "\106\065\107\066\236\070\136\071\111\072\122\073\235" +
    "\076\243\100\244\001\002\000\050\003\uff79\004\uff79\005" +
    "\uff79\014\uff79\054\uff79\060\uff79\061\uff79\062\uff79\063\uff79" +
    "\064\uff79\065\uff79\066\uff79\067\273\070\uff79\071\uff79\072" +
    "\uff79\073\uff79\076\uff79\100\uff79\001\002\000\006\013\310" +
    "\066\311\001\002\000\050\003\uff77\004\uff77\005\uff77\014" +
    "\uff77\054\uff77\060\uff77\061\uff77\062\uff77\063\uff77\064\uff77" +
    "\065\uff77\066\uff77\067\275\070\uff77\071\uff77\072\uff77\073" +
    "\uff77\076\uff77\100\uff77\001\002\000\006\013\276\066\277" +
    "\001\002\000\044\003\245\004\117\005\246\054\120\060" +
    "\127\061\121\062\110\063\104\064\106\065\107\066\236" +
    "\070\136\071\111\072\122\073\235\076\243\100\244\001" +
    "\002\000\004\007\300\001\002\000\024\004\160\006\154" +
    "\007\157\026\151\044\147\054\120\056\153\105\152\106" +
    "\150\001\002\000\010\010\302\042\217\043\216\001\002" +
    "\000\004\013\303\001\002\000\044\003\245\004\117\005" +
    "\246\054\120\060\127\061\121\062\110\063\104\064\106" +
    "\065\107\066\236\070\136\071\111\072\122\073\235\076" +
    "\243\100\244\001\002\000\046\003\245\004\117\005\246" +
    "\014\305\054\120\060\127\061\121\062\110\063\104\064" +
    "\106\065\107\066\236\070\136\071\111\072\122\073\235" +
    "\076\243\100\244\001\002\000\050\003\uff75\004\uff75\005" +
    "\uff75\014\uff75\054\uff75\060\uff75\061\uff75\062\uff75\063\uff75" +
    "\064\uff75\065\uff75\066\uff75\067\uff75\070\uff75\071\uff75\072" +
    "\uff75\073\uff75\076\uff75\100\uff75\001\002\000\046\003\245" +
    "\004\117\005\246\014\307\054\120\060\127\061\121\062" +
    "\110\063\104\064\106\065\107\066\236\070\136\071\111" +
    "\072\122\073\235\076\243\100\244\001\002\000\046\003" +
    "\uff76\004\uff76\005\uff76\014\uff76\054\uff76\060\uff76\061\uff76" +
    "\062\uff76\063\uff76\064\uff76\065\uff76\066\uff76\070\uff76\071" +
    "\uff76\072\uff76\073\uff76\076\uff76\100\uff76\001\002\000\044" +
    "\003\245\004\117\005\246\054\120\060\127\061\121\062" +
    "\110\063\104\064\106\065\107\066\236\070\136\071\111" +
    "\072\122\073\235\076\243\100\244\001\002\000\004\007" +
    "\312\001\002\000\024\004\160\006\154\007\157\026\151" +
    "\044\147\054\120\056\153\105\152\106\150\001\002\000" +
    "\010\010\314\042\217\043\216\001\002\000\004\013\315" +
    "\001\002\000\044\003\245\004\117\005\246\054\120\060" +
    "\127\061\121\062\110\063\104\064\106\065\107\066\236" +
    "\070\136\071\111\072\122\073\235\076\243\100\244\001" +
    "\002\000\046\003\245\004\117\005\246\014\317\054\120" +
    "\060\127\061\121\062\110\063\104\064\106\065\107\066" +
    "\236\070\136\071\111\072\122\073\235\076\243\100\244" +
    "\001\002\000\050\003\uff74\004\uff74\005\uff74\014\uff74\054" +
    "\uff74\060\uff74\061\uff74\062\uff74\063\uff74\064\uff74\065\uff74" +
    "\066\uff74\067\uff74\070\uff74\071\uff74\072\uff74\073\uff74\076" +
    "\uff74\100\uff74\001\002\000\046\003\245\004\117\005\246" +
    "\014\321\054\120\060\127\061\121\062\110\063\104\064" +
    "\106\065\107\066\236\070\136\071\111\072\122\073\235" +
    "\076\243\100\244\001\002\000\046\003\uff78\004\uff78\005" +
    "\uff78\014\uff78\054\uff78\060\uff78\061\uff78\062\uff78\063\uff78" +
    "\064\uff78\065\uff78\066\uff78\070\uff78\071\uff78\072\uff78\073" +
    "\uff78\076\uff78\100\uff78\001\002\000\024\004\160\006\154" +
    "\007\157\026\151\044\147\054\120\056\153\105\152\106" +
    "\150\001\002\000\010\010\324\042\217\043\216\001\002" +
    "\000\004\013\325\001\002\000\004\074\330\001\002\000" +
    "\010\014\uff71\074\uff71\075\uff71\001\002\000\010\014\ufffd" +
    "\074\330\075\336\001\002\000\024\004\160\006\154\007" +
    "\157\026\151\044\147\054\120\056\153\105\152\106\150" +
    "\001\002\000\010\016\332\042\217\043\216\001\002\000" +
    "\044\003\245\004\117\005\246\054\120\060\127\061\121" +
    "\062\110\063\104\064\106\065\107\066\236\070\136\071" +
    "\111\072\122\073\235\076\243\100\244\001\002\000\044" +
    "\003\245\004\117\005\246\054\120\060\127\061\121\062" +
    "\110\063\104\064\106\065\107\066\236\070\136\071\111" +
    "\072\122\073\235\076\334\100\244\001\002\000\004\015" +
    "\335\001\002\000\052\003\uff7c\004\uff7c\005\uff7c\014\uff70" +
    "\054\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c\064\uff7c\065" +
    "\uff7c\066\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff70" +
    "\075\uff70\076\uff7c\100\uff7c\001\002\000\004\016\343\001" +
    "\002\000\004\014\342\001\002\000\010\014\uff72\074\uff72" +
    "\075\uff72\001\002\000\004\014\uff6e\001\002\000\046\003" +
    "\uff73\004\uff73\005\uff73\014\uff73\054\uff73\060\uff73\061\uff73" +
    "\062\uff73\063\uff73\064\uff73\065\uff73\066\uff73\070\uff73\071" +
    "\uff73\072\uff73\073\uff73\076\uff73\100\uff73\001\002\000\044" +
    "\003\245\004\117\005\246\054\120\060\127\061\121\062" +
    "\110\063\104\064\106\065\107\066\236\070\136\071\111" +
    "\072\122\073\235\076\243\100\244\001\002\000\044\003" +
    "\245\004\117\005\246\054\120\060\127\061\121\062\110" +
    "\063\104\064\106\065\107\066\236\070\136\071\111\072" +
    "\122\073\235\076\345\100\244\001\002\000\004\015\346" +
    "\001\002\000\046\003\uff7c\004\uff7c\005\uff7c\014\uff6f\054" +
    "\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c\064\uff7c\065\uff7c" +
    "\066\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\076\uff7c\100" +
    "\uff7c\001\002\000\024\004\160\006\154\007\157\026\151" +
    "\044\147\054\120\056\153\105\152\106\150\001\002\000" +
    "\024\004\uff96\006\uff96\007\uff96\026\uff96\044\uff96\054\uff96" +
    "\056\uff96\105\uff96\106\uff96\001\002\000\024\004\160\006" +
    "\154\007\157\026\151\044\147\054\120\056\153\105\152" +
    "\106\150\001\002\000\024\004\uff95\006\uff95\007\uff95\026" +
    "\uff95\044\uff95\054\uff95\056\uff95\105\uff95\106\uff95\001\002" +
    "\000\046\003\uff84\004\uff84\005\uff84\014\uff84\054\uff84\060" +
    "\uff84\061\uff84\062\uff84\063\uff84\064\uff84\065\uff84\066\uff84" +
    "\070\uff84\071\uff84\072\uff84\073\uff84\076\uff84\100\uff84\001" +
    "\002\000\024\004\uff94\006\uff94\007\uff94\026\uff94\044\uff94" +
    "\054\uff94\056\uff94\105\uff94\106\uff94\001\002\000\006\015" +
    "\357\021\356\001\002\000\024\004\160\006\154\007\157" +
    "\026\151\044\147\054\120\056\153\105\152\106\150\001" +
    "\002\000\050\003\uff97\004\uff97\005\uff97\014\uff97\054\uff97" +
    "\060\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\066" +
    "\uff97\070\uff97\071\uff97\072\uff97\073\uff97\076\uff97\077\uff97" +
    "\100\uff97\001\002\000\012\015\uff93\021\uff93\042\217\043" +
    "\216\001\002\000\012\015\uff92\021\uff92\042\217\043\216" +
    "\001\002\000\010\015\363\042\217\043\216\001\002\000" +
    "\050\003\uff98\004\uff98\005\uff98\014\uff98\054\uff98\060\uff98" +
    "\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98\070" +
    "\uff98\071\uff98\072\uff98\073\uff98\076\uff98\077\uff98\100\uff98" +
    "\001\002\000\052\010\uffb9\015\uffb9\016\uffb9\017\uffb9\021" +
    "\uffb9\025\uffb9\026\uffb9\027\171\030\175\031\174\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\001\002\000\020\010\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\021\uffc7\042\uffc7\043\uffc7\001\002\000" +
    "\004\021\367\001\002\000\024\004\160\006\154\007\157" +
    "\026\151\044\147\054\120\056\153\105\152\106\150\001" +
    "\002\000\010\015\uff8a\042\217\043\216\001\002\000\024" +
    "\004\160\006\154\007\157\026\151\044\147\054\120\056" +
    "\153\105\152\106\150\001\002\000\010\015\uff89\042\217" +
    "\043\216\001\002\000\046\003\uff99\004\uff99\005\uff99\014" +
    "\uff99\054\uff99\060\uff99\061\uff99\062\uff99\063\uff99\064\uff99" +
    "\065\uff99\066\uff99\070\uff99\071\uff99\072\uff99\073\uff99\076" +
    "\uff99\100\uff99\001\002\000\046\003\uff9a\004\uff9a\005\uff9a" +
    "\014\uff9a\054\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064" +
    "\uff9a\065\uff9a\066\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a" +
    "\076\uff9a\100\uff9a\001\002\000\004\004\376\001\002\000" +
    "\064\007\377\010\uffad\015\uffad\016\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027" +
    "\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad" +
    "\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\001" +
    "\002\000\026\004\160\006\154\007\157\010\ufffd\026\151" +
    "\044\147\054\120\056\153\105\152\106\150\001\002\000" +
    "\004\010\u0101\001\002\000\062\010\uffae\015\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\001\002\000\010\015\uffd2\017\uffd2\021\uffd2" +
    "\001\002\000\006\015\u0105\017\u0104\001\002\000\004\004" +
    "\u0106\001\002\000\060\003\uffdc\004\uffdc\005\uffdc\014\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\054\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\070\uffdc" +
    "\071\uffdc\072\uffdc\073\uffdc\076\uffdc\077\uffdc\100\uffdc\001" +
    "\002\000\010\015\uffd4\017\uffd4\021\uffd4\001\002\000\010" +
    "\015\ufffd\017\ufffd\021\u0108\001\002\000\026\004\160\006" +
    "\154\007\157\026\151\044\147\054\120\055\u010b\056\153" +
    "\105\152\106\150\001\002\000\006\015\uffd3\017\uffd3\001" +
    "\002\000\006\015\uffce\017\uffce\001\002\000\004\004\u010d" +
    "\001\002\000\012\015\uffd0\017\uffd0\042\217\043\216\001" +
    "\002\000\004\007\u010e\001\002\000\026\004\160\006\154" +
    "\007\157\010\ufffd\026\151\044\147\054\120\056\153\105" +
    "\152\106\150\001\002\000\004\010\u0110\001\002\000\006" +
    "\015\uffcf\017\uffcf\001\002\000\010\015\ufffd\017\ufffd\021" +
    "\u0108\001\002\000\006\015\uffd1\017\uffd1\001\002\000\004" +
    "\101\u0114\001\002\000\004\020\u0115\001\002\000\004\102" +
    "\u0116\001\002\000\004\007\u0117\001\002\000\024\004\160" +
    "\006\154\007\157\026\151\044\147\054\120\056\153\105" +
    "\152\106\150\001\002\000\010\010\u0119\042\217\043\216" +
    "\001\002\000\004\015\u011a\001\002\000\046\003\uff9b\004" +
    "\uff9b\005\uff9b\014\uff9b\054\uff9b\060\uff9b\061\uff9b\062\uff9b" +
    "\063\uff9b\064\uff9b\065\uff9b\066\uff9b\070\uff9b\071\uff9b\072" +
    "\uff9b\073\uff9b\076\uff9b\100\uff9b\001\002\000\044\003\245" +
    "\004\117\005\246\054\120\060\127\061\121\062\110\063" +
    "\104\064\106\065\107\066\236\070\136\071\111\072\122" +
    "\073\235\076\243\100\244\001\002\000\046\003\245\004" +
    "\117\005\246\014\u011d\054\120\060\127\061\121\062\110" +
    "\063\104\064\106\065\107\066\236\070\136\071\111\072" +
    "\122\073\235\076\243\100\244\001\002\000\004\071\u011e" +
    "\001\002\000\004\007\u011f\001\002\000\024\004\160\006" +
    "\154\007\157\026\151\044\147\054\120\056\153\105\152" +
    "\106\150\001\002\000\010\010\u0121\042\217\043\216\001" +
    "\002\000\004\015\u0122\001\002\000\046\003\uff6c\004\uff6c" +
    "\005\uff6c\014\uff6c\054\uff6c\060\uff6c\061\uff6c\062\uff6c\063" +
    "\uff6c\064\uff6c\065\uff6c\066\uff6c\070\uff6c\071\uff6c\072\uff6c" +
    "\073\uff6c\076\uff6c\100\uff6c\001\002\000\004\004\160\001" +
    "\002\000\062\010\uffb0\015\uffb0\016\uffb0\017\uffb0\020\375" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\001" +
    "\002\000\024\004\160\006\154\007\157\026\151\044\147" +
    "\054\120\056\153\105\152\106\150\001\002\000\010\010" +
    "\u0127\042\217\043\216\001\002\000\004\013\u0128\001\002" +
    "\000\042\003\132\004\117\005\135\054\120\060\127\061" +
    "\121\062\110\063\104\064\106\065\107\066\115\070\136" +
    "\071\111\072\122\073\114\100\125\001\002\000\044\003" +
    "\132\004\117\005\135\014\u012a\054\120\060\127\061\121" +
    "\062\110\063\104\064\106\065\107\066\115\070\136\071" +
    "\111\072\122\073\114\100\125\001\002\000\050\003\uff91" +
    "\004\uff91\005\uff91\014\uff91\054\uff91\060\uff91\061\uff91\062" +
    "\uff91\063\uff91\064\uff91\065\uff91\066\uff91\067\u012c\070\uff91" +
    "\071\uff91\072\uff91\073\uff91\076\uff91\100\uff91\001\002\000" +
    "\050\003\uff8f\004\uff8f\005\uff8f\014\uff8f\054\uff8f\060\uff8f" +
    "\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067" +
    "\u0137\070\uff8f\071\uff8f\072\uff8f\073\uff8f\076\uff8f\100\uff8f" +
    "\001\002\000\006\013\u012d\066\u012e\001\002\000\042\003" +
    "\132\004\117\005\135\054\120\060\127\061\121\062\110" +
    "\063\104\064\106\065\107\066\115\070\136\071\111\072" +
    "\122\073\114\100\125\001\002\000\004\007\u012f\001\002" +
    "\000\024\004\160\006\154\007\157\026\151\044\147\054" +
    "\120\056\153\105\152\106\150\001\002\000\010\010\u0131" +
    "\042\217\043\216\001\002\000\004\013\u0132\001\002\000" +
    "\042\003\132\004\117\005\135\054\120\060\127\061\121" +
    "\062\110\063\104\064\106\065\107\066\115\070\136\071" +
    "\111\072\122\073\114\100\125\001\002\000\044\003\132" +
    "\004\117\005\135\014\u0134\054\120\060\127\061\121\062" +
    "\110\063\104\064\106\065\107\066\115\070\136\071\111" +
    "\072\122\073\114\100\125\001\002\000\050\003\uff8c\004" +
    "\uff8c\005\uff8c\014\uff8c\054\uff8c\060\uff8c\061\uff8c\062\uff8c" +
    "\063\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071" +
    "\uff8c\072\uff8c\073\uff8c\076\uff8c\100\uff8c\001\002\000\044" +
    "\003\132\004\117\005\135\014\u0136\054\120\060\127\061" +
    "\121\062\110\063\104\064\106\065\107\066\115\070\136" +
    "\071\111\072\122\073\114\100\125\001\002\000\046\003" +
    "\uff90\004\uff90\005\uff90\014\uff90\054\uff90\060\uff90\061\uff90" +
    "\062\uff90\063\uff90\064\uff90\065\uff90\066\uff90\070\uff90\071" +
    "\uff90\072\uff90\073\uff90\076\uff90\100\uff90\001\002\000\006" +
    "\013\u0138\066\u0139\001\002\000\042\003\132\004\117\005" +
    "\135\054\120\060\127\061\121\062\110\063\104\064\106" +
    "\065\107\066\115\070\136\071\111\072\122\073\114\100" +
    "\125\001\002\000\004\007\u013a\001\002\000\024\004\160" +
    "\006\154\007\157\026\151\044\147\054\120\056\153\105" +
    "\152\106\150\001\002\000\010\010\u013c\042\217\043\216" +
    "\001\002\000\004\013\u013d\001\002\000\042\003\132\004" +
    "\117\005\135\054\120\060\127\061\121\062\110\063\104" +
    "\064\106\065\107\066\115\070\136\071\111\072\122\073" +
    "\114\100\125\001\002\000\044\003\132\004\117\005\135" +
    "\014\u013f\054\120\060\127\061\121\062\110\063\104\064" +
    "\106\065\107\066\115\070\136\071\111\072\122\073\114" +
    "\100\125\001\002\000\050\003\uff8d\004\uff8d\005\uff8d\014" +
    "\uff8d\054\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d" +
    "\065\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073" +
    "\uff8d\076\uff8d\100\uff8d\001\002\000\044\003\132\004\117" +
    "\005\135\014\u0141\054\120\060\127\061\121\062\110\063" +
    "\104\064\106\065\107\066\115\070\136\071\111\072\122" +
    "\073\114\100\125\001\002\000\046\003\uff8e\004\uff8e\005" +
    "\uff8e\014\uff8e\054\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e" +
    "\064\uff8e\065\uff8e\066\uff8e\070\uff8e\071\uff8e\072\uff8e\073" +
    "\uff8e\076\uff8e\100\uff8e\001\002\000\024\004\160\006\154" +
    "\007\157\026\151\044\147\054\120\056\153\105\152\106" +
    "\150\001\002\000\010\010\u0144\042\217\043\216\001\002" +
    "\000\004\013\u0145\001\002\000\004\074\u0147\001\002\000" +
    "\010\014\ufffd\074\u0147\075\u014e\001\002\000\024\004\160" +
    "\006\154\007\157\026\151\044\147\054\120\056\153\105" +
    "\152\106\150\001\002\000\010\014\uff69\074\uff69\075\uff69" +
    "\001\002\000\010\016\u014a\042\217\043\216\001\002\000" +
    "\042\003\132\004\117\005\135\054\120\060\127\061\121" +
    "\062\110\063\104\064\106\065\107\066\115\070\136\071" +
    "\111\072\122\073\114\100\125\001\002\000\044\003\132" +
    "\004\117\005\135\054\120\060\127\061\121\062\110\063" +
    "\104\064\106\065\107\066\115\070\136\071\111\072\122" +
    "\073\114\076\u014c\100\125\001\002\000\004\015\u014d\001" +
    "\002\000\010\014\uff68\074\uff68\075\uff68\001\002\000\004" +
    "\016\u0153\001\002\000\004\014\u0152\001\002\000\004\014" +
    "\uff66\001\002\000\010\014\uff6a\074\uff6a\075\uff6a\001\002" +
    "\000\046\003\uff6b\004\uff6b\005\uff6b\014\uff6b\054\uff6b\060" +
    "\uff6b\061\uff6b\062\uff6b\063\uff6b\064\uff6b\065\uff6b\066\uff6b" +
    "\070\uff6b\071\uff6b\072\uff6b\073\uff6b\076\uff6b\100\uff6b\001" +
    "\002\000\042\003\132\004\117\005\135\054\120\060\127" +
    "\061\121\062\110\063\104\064\106\065\107\066\115\070" +
    "\136\071\111\072\122\073\114\100\125\001\002\000\044" +
    "\003\132\004\117\005\135\054\120\060\127\061\121\062" +
    "\110\063\104\064\106\065\107\066\115\070\136\071\111" +
    "\072\122\073\114\076\u0155\100\125\001\002\000\004\015" +
    "\u0156\001\002\000\004\014\uff67\001\002\000\024\004\160" +
    "\006\154\007\157\026\151\044\147\054\120\056\153\105" +
    "\152\106\150\001\002\000\010\010\u0159\042\217\043\216" +
    "\001\002\000\004\013\u015a\001\002\000\044\003\245\004" +
    "\117\005\246\054\120\060\127\061\121\062\110\063\104" +
    "\064\106\065\107\066\236\070\136\071\111\072\122\073" +
    "\235\076\243\100\244\001\002\000\046\003\245\004\117" +
    "\005\246\014\u015c\054\120\060\127\061\121\062\110\063" +
    "\104\064\106\065\107\066\236\070\136\071\111\072\122" +
    "\073\235\076\243\100\244\001\002\000\046\003\uff6d\004" +
    "\uff6d\005\uff6d\014\uff6d\054\uff6d\060\uff6d\061\uff6d\062\uff6d" +
    "\063\uff6d\064\uff6d\065\uff6d\066\uff6d\070\uff6d\071\uff6d\072" +
    "\uff6d\073\uff6d\076\uff6d\100\uff6d\001\002\000\046\003\uffa2" +
    "\004\uffa2\005\uffa2\014\uffa2\054\uffa2\060\uffa2\061\uffa2\062" +
    "\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\070\uffa2\071\uffa2" +
    "\072\uffa2\073\uffa2\076\uffa2\100\uffa2\001\002\000\004\004" +
    "\u0231\001\002\000\020\003\uffdd\005\uffdd\014\uffdd\047\uffdd" +
    "\050\uffdd\051\uffdd\052\uffdd\001\002\000\006\004\uffd5\007" +
    "\u022b\001\002\000\004\004\u0162\001\002\000\012\007\uff60" +
    "\015\uffd2\017\uffd2\021\uffd2\001\002\000\004\007\u0164\001" +
    "\002\000\024\004\u0166\010\ufffd\017\ufffd\060\127\061\121" +
    "\062\110\063\104\064\106\065\107\001\002\000\006\010" +
    "\uffa7\017\uffa7\001\002\000\004\004\uffd5\001\002\000\006" +
    "\010\u016b\017\u016a\001\002\000\004\004\u0169\001\002\000" +
    "\006\010\uffa8\017\uffa8\001\002\000\020\004\u0166\060\127" +
    "\061\121\062\110\063\104\064\106\065\107\001\002\000" +
    "\004\013\u016c\001\002\000\044\003\u017c\004\117\005\u017e" +
    "\054\120\060\127\061\121\062\110\063\104\064\106\065" +
    "\107\066\u0174\070\u017d\071\u016f\072\u0176\073\u0173\077\u0172" +
    "\100\u017a\001\002\000\014\015\u0228\021\351\022\350\023" +
    "\352\024\354\001\002\000\050\003\uff56\004\uff56\005\uff56" +
    "\014\uff56\054\uff56\060\uff56\061\uff56\062\uff56\063\uff56\064" +
    "\uff56\065\uff56\066\uff56\070\uff56\071\uff56\072\uff56\073\uff56" +
    "\076\uff56\077\uff56\100\uff56\001\002\000\004\007\u0222\001" +
    "\002\000\050\003\uff5c\004\uff5c\005\uff5c\014\uff5c\054\uff5c" +
    "\060\uff5c\061\uff5c\062\uff5c\063\uff5c\064\uff5c\065\uff5c\066" +
    "\uff5c\070\uff5c\071\uff5c\072\uff5c\073\uff5c\076\uff5c\077\uff5c" +
    "\100\uff5c\001\002\000\050\003\uff57\004\uff57\005\uff57\014" +
    "\uff57\054\uff57\060\uff57\061\uff57\062\uff57\063\uff57\064\uff57" +
    "\065\uff57\066\uff57\070\uff57\071\uff57\072\uff57\073\uff57\076" +
    "\uff57\077\uff57\100\uff57\001\002\000\024\004\160\006\154" +
    "\007\157\026\151\044\147\054\120\056\153\105\152\106" +
    "\150\001\002\000\004\007\u020b\001\002\000\004\007\u01ee" +
    "\001\002\000\050\003\uff55\004\uff55\005\uff55\014\uff55\054" +
    "\uff55\060\uff55\061\uff55\062\uff55\063\uff55\064\uff55\065\uff55" +
    "\066\uff55\070\uff55\071\uff55\072\uff55\073\uff55\076\uff55\077" +
    "\uff55\100\uff55\001\002\000\004\013\u01e6\001\002\000\050" +
    "\003\uff59\004\uff59\005\uff59\014\uff59\054\uff59\060\uff59\061" +
    "\uff59\062\uff59\063\uff59\064\uff59\065\uff59\066\uff59\070\uff59" +
    "\071\uff59\072\uff59\073\uff59\076\uff59\077\uff59\100\uff59\001" +
    "\002\000\050\003\uff5b\004\uff5b\005\uff5b\014\uff5b\054\uff5b" +
    "\060\uff5b\061\uff5b\062\uff5b\063\uff5b\064\uff5b\065\uff5b\066" +
    "\uff5b\070\uff5b\071\uff5b\072\uff5b\073\uff5b\076\uff5b\077\uff5b" +
    "\100\uff5b\001\002\000\050\003\uff5d\004\uff5d\005\uff5d\014" +
    "\uff5d\054\uff5d\060\uff5d\061\uff5d\062\uff5d\063\uff5d\064\uff5d" +
    "\065\uff5d\066\uff5d\070\uff5d\071\uff5d\072\uff5d\073\uff5d\076" +
    "\uff5d\077\uff5d\100\uff5d\001\002\000\004\020\u01de\001\002" +
    "\000\046\003\u017c\004\117\005\u017e\014\u01dc\054\120\060" +
    "\127\061\121\062\110\063\104\064\106\065\107\066\u0174" +
    "\070\u017d\071\u016f\072\u0176\073\u0173\077\u0172\100\u017a\001" +
    "\002\000\006\014\u01da\015\u01db\001\002\000\004\007\u0180" +
    "\001\002\000\050\003\uff54\004\uff54\005\uff54\014\uff54\054" +
    "\uff54\060\uff54\061\uff54\062\uff54\063\uff54\064\uff54\065\uff54" +
    "\066\uff54\070\uff54\071\uff54\072\uff54\073\uff54\076\uff54\077" +
    "\uff54\100\uff54\001\002\000\050\003\uff58\004\uff58\005\uff58" +
    "\014\uff58\054\uff58\060\uff58\061\uff58\062\uff58\063\uff58\064" +
    "\uff58\065\uff58\066\uff58\070\uff58\071\uff58\072\uff58\073\uff58" +
    "\076\uff58\077\uff58\100\uff58\001\002\000\020\004\143\060" +
    "\127\061\121\062\110\063\104\064\106\065\107\001\002" +
    "\000\004\015\u0182\001\002\000\024\004\160\006\154\007" +
    "\157\026\151\044\147\054\120\056\153\105\152\106\150" +
    "\001\002\000\010\015\u0184\042\217\043\216\001\002\000" +
    "\024\004\160\006\154\007\157\026\151\044\147\054\120" +
    "\056\153\105\152\106\150\001\002\000\010\010\u0186\042" +
    "\217\043\216\001\002\000\004\013\u0187\001\002\000\046" +
    "\003\u0195\004\117\005\u0196\054\120\060\127\061\121\062" +
    "\110\063\104\064\106\065\107\066\u018f\070\u017d\071\u016f" +
    "\072\u0176\073\u018e\076\u0192\077\u018d\100\u0194\001\002\000" +
    "\014\015\u01d9\021\351\022\350\023\352\024\354\001\002" +
    "\000\050\003\uff40\004\uff40\005\uff40\014\uff40\054\uff40\060" +
    "\uff40\061\uff40\062\uff40\063\uff40\064\uff40\065\uff40\066\uff40" +
    "\070\uff40\071\uff40\072\uff40\073\uff40\076\uff40\077\uff40\100" +
    "\uff40\001\002\000\050\003\uff47\004\uff47\005\uff47\014\uff47" +
    "\054\uff47\060\uff47\061\uff47\062\uff47\063\uff47\064\uff47\065" +
    "\uff47\066\uff47\070\uff47\071\uff47\072\uff47\073\uff47\076\uff47" +
    "\077\uff47\100\uff47\001\002\000\050\003\uff46\004\uff46\005" +
    "\uff46\014\uff46\054\uff46\060\uff46\061\uff46\062\uff46\063\uff46" +
    "\064\uff46\065\uff46\066\uff46\070\uff46\071\uff46\072\uff46\073" +
    "\uff46\076\uff46\077\uff46\100\uff46\001\002\000\050\003\uff41" +
    "\004\uff41\005\uff41\014\uff41\054\uff41\060\uff41\061\uff41\062" +
    "\uff41\063\uff41\064\uff41\065\uff41\066\uff41\070\uff41\071\uff41" +
    "\072\uff41\073\uff41\076\uff41\077\uff41\100\uff41\001\002\000" +
    "\024\004\160\006\154\007\157\026\151\044\147\054\120" +
    "\056\153\105\152\106\150\001\002\000\004\007\u01c3\001" +
    "\002\000\004\007\u01a6\001\002\000\050\003\uff45\004\uff45" +
    "\005\uff45\014\uff45\054\uff45\060\uff45\061\uff45\062\uff45\063" +
    "\uff45\064\uff45\065\uff45\066\uff45\070\uff45\071\uff45\072\uff45" +
    "\073\uff45\076\uff45\077\uff45\100\uff45\001\002\000\050\003" +
    "\uff3f\004\uff3f\005\uff3f\014\uff3f\054\uff3f\060\uff3f\061\uff3f" +
    "\062\uff3f\063\uff3f\064\uff3f\065\uff3f\066\uff3f\070\uff3f\071" +
    "\uff3f\072\uff3f\073\uff3f\076\uff3f\077\uff3f\100\uff3f\001\002" +
    "\000\004\015\u01a5\001\002\000\050\003\u0195\004\117\005" +
    "\u0196\014\u01a4\054\120\060\127\061\121\062\110\063\104" +
    "\064\106\065\107\066\u018f\070\u017d\071\u016f\072\u0176\073" +
    "\u018e\076\u0192\077\u018d\100\u0194\001\002\000\004\020\u019b" +
    "\001\002\000\006\014\u0199\015\u019a\001\002\000\050\003" +
    "\uff3e\004\uff3e\005\uff3e\014\uff3e\054\uff3e\060\uff3e\061\uff3e" +
    "\062\uff3e\063\uff3e\064\uff3e\065\uff3e\066\uff3e\070\uff3e\071" +
    "\uff3e\072\uff3e\073\uff3e\076\uff3e\077\uff3e\100\uff3e\001\002" +
    "\000\050\003\uff43\004\uff43\005\uff43\014\uff43\054\uff43\060" +
    "\uff43\061\uff43\062\uff43\063\uff43\064\uff43\065\uff43\066\uff43" +
    "\070\uff43\071\uff43\072\uff43\073\uff43\076\uff43\077\uff43\100" +
    "\uff43\001\002\000\050\003\uff42\004\uff42\005\uff42\014\uff42" +
    "\054\uff42\060\uff42\061\uff42\062\uff42\063\uff42\064\uff42\065" +
    "\uff42\066\uff42\070\uff42\071\uff42\072\uff42\073\uff42\076\uff42" +
    "\077\uff42\100\uff42\001\002\000\050\003\uff39\004\uff39\005" +
    "\uff39\014\uff39\054\uff39\060\uff39\061\uff39\062\uff39\063\uff39" +
    "\064\uff39\065\uff39\066\uff39\070\uff39\071\uff39\072\uff39\073" +
    "\uff39\076\uff39\077\uff39\100\uff39\001\002\000\050\003\uff3a" +
    "\004\uff3a\005\uff3a\014\uff3a\054\uff3a\060\uff3a\061\uff3a\062" +
    "\uff3a\063\uff3a\064\uff3a\065\uff3a\066\uff3a\070\uff3a\071\uff3a" +
    "\072\uff3a\073\uff3a\076\uff3a\077\uff3a\100\uff3a\001\002\000" +
    "\004\101\u019c\001\002\000\004\020\u019d\001\002\000\004" +
    "\102\u019e\001\002\000\004\007\u019f\001\002\000\024\004" +
    "\160\006\154\007\157\026\151\044\147\054\120\056\153" +
    "\105\152\106\150\001\002\000\010\010\u01a1\042\217\043" +
    "\216\001\002\000\004\015\u01a2\001\002\000\050\003\uff3d" +
    "\004\uff3d\005\uff3d\014\uff3d\054\uff3d\060\uff3d\061\uff3d\062" +
    "\uff3d\063\uff3d\064\uff3d\065\uff3d\066\uff3d\070\uff3d\071\uff3d" +
    "\072\uff3d\073\uff3d\076\uff3d\077\uff3d\100\uff3d\001\002\000" +
    "\050\003\uff48\004\uff48\005\uff48\014\uff48\054\uff48\060\uff48" +
    "\061\uff48\062\uff48\063\uff48\064\uff48\065\uff48\066\uff48\070" +
    "\uff48\071\uff48\072\uff48\073\uff48\076\uff48\077\uff48\100\uff48" +
    "\001\002\000\050\003\uff49\004\uff49\005\uff49\014\uff49\054" +
    "\uff49\060\uff49\061\uff49\062\uff49\063\uff49\064\uff49\065\uff49" +
    "\066\uff49\070\uff49\071\uff49\072\uff49\073\uff49\076\uff49\077" +
    "\uff49\100\uff49\001\002\000\050\003\uff3b\004\uff3b\005\uff3b" +
    "\014\uff3b\054\uff3b\060\uff3b\061\uff3b\062\uff3b\063\uff3b\064" +
    "\uff3b\065\uff3b\066\uff3b\070\uff3b\071\uff3b\072\uff3b\073\uff3b" +
    "\076\uff3b\077\uff3b\100\uff3b\001\002\000\024\004\160\006" +
    "\154\007\157\026\151\044\147\054\120\056\153\105\152" +
    "\106\150\001\002\000\010\010\u01a8\042\217\043\216\001" +
    "\002\000\004\013\u01a9\001\002\000\046\003\u0195\004\117" +
    "\005\u0196\054\120\060\127\061\121\062\110\063\104\064" +
    "\106\065\107\066\u018f\070\u017d\071\u016f\072\u0176\073\u018e" +
    "\076\u0192\077\u018d\100\u0194\001\002\000\050\003\u0195\004" +
    "\117\005\u0196\014\u01ab\054\120\060\127\061\121\062\110" +
    "\063\104\064\106\065\107\066\u018f\070\u017d\071\u016f\072" +
    "\u0176\073\u018e\076\u0192\077\u018d\100\u0194\001\002\000\052" +
    "\003\uff38\004\uff38\005\uff38\014\uff38\054\uff38\060\uff38\061" +
    "\uff38\062\uff38\063\uff38\064\uff38\065\uff38\066\uff38\067\u01ac" +
    "\070\uff38\071\uff38\072\uff38\073\uff38\076\uff38\077\uff38\100" +
    "\uff38\001\002\000\006\013\u01b9\066\u01ba\001\002\000\052" +
    "\003\uff36\004\uff36\005\uff36\014\uff36\054\uff36\060\uff36\061" +
    "\uff36\062\uff36\063\uff36\064\uff36\065\uff36\066\uff36\067\u01ae" +
    "\070\uff36\071\uff36\072\uff36\073\uff36\076\uff36\077\uff36\100" +
    "\uff36\001\002\000\006\013\u01af\066\u01b0\001\002\000\046" +
    "\003\u0195\004\117\005\u0196\054\120\060\127\061\121\062" +
    "\110\063\104\064\106\065\107\066\u018f\070\u017d\071\u016f" +
    "\072\u0176\073\u018e\076\u0192\077\u018d\100\u0194\001\002\000" +
    "\004\007\u01b1\001\002\000\024\004\160\006\154\007\157" +
    "\026\151\044\147\054\120\056\153\105\152\106\150\001" +
    "\002\000\010\010\u01b3\042\217\043\216\001\002\000\004" +
    "\013\u01b4\001\002\000\046\003\u0195\004\117\005\u0196\054" +
    "\120\060\127\061\121\062\110\063\104\064\106\065\107" +
    "\066\u018f\070\u017d\071\u016f\072\u0176\073\u018e\076\u0192\077" +
    "\u018d\100\u0194\001\002\000\050\003\u0195\004\117\005\u0196" +
    "\014\u01b6\054\120\060\127\061\121\062\110\063\104\064" +
    "\106\065\107\066\u018f\070\u017d\071\u016f\072\u0176\073\u018e" +
    "\076\u0192\077\u018d\100\u0194\001\002\000\052\003\uff34\004" +
    "\uff34\005\uff34\014\uff34\054\uff34\060\uff34\061\uff34\062\uff34" +
    "\063\uff34\064\uff34\065\uff34\066\uff34\067\uff34\070\uff34\071" +
    "\uff34\072\uff34\073\uff34\076\uff34\077\uff34\100\uff34\001\002" +
    "\000\050\003\u0195\004\117\005\u0196\014\u01b8\054\120\060" +
    "\127\061\121\062\110\063\104\064\106\065\107\066\u018f" +
    "\070\u017d\071\u016f\072\u0176\073\u018e\076\u0192\077\u018d\100" +
    "\u0194\001\002\000\050\003\uff35\004\uff35\005\uff35\014\uff35" +
    "\054\uff35\060\uff35\061\uff35\062\uff35\063\uff35\064\uff35\065" +
    "\uff35\066\uff35\070\uff35\071\uff35\072\uff35\073\uff35\076\uff35" +
    "\077\uff35\100\uff35\001\002\000\046\003\u0195\004\117\005" +
    "\u0196\054\120\060\127\061\121\062\110\063\104\064\106" +
    "\065\107\066\u018f\070\u017d\071\u016f\072\u0176\073\u018e\076" +
    "\u0192\077\u018d\100\u0194\001\002\000\004\007\u01bb\001\002" +
    "\000\024\004\160\006\154\007\157\026\151\044\147\054" +
    "\120\056\153\105\152\106\150\001\002\000\010\010\u01bd" +
    "\042\217\043\216\001\002\000\004\013\u01be\001\002\000" +
    "\046\003\u0195\004\117\005\u0196\054\120\060\127\061\121" +
    "\062\110\063\104\064\106\065\107\066\u018f\070\u017d\071" +
    "\u016f\072\u0176\073\u018e\076\u0192\077\u018d\100\u0194\001\002" +
    "\000\050\003\u0195\004\117\005\u0196\014\u01c0\054\120\060" +
    "\127\061\121\062\110\063\104\064\106\065\107\066\u018f" +
    "\070\u017d\071\u016f\072\u0176\073\u018e\076\u0192\077\u018d\100" +
    "\u0194\001\002\000\052\003\uff33\004\uff33\005\uff33\014\uff33" +
    "\054\uff33\060\uff33\061\uff33\062\uff33\063\uff33\064\uff33\065" +
    "\uff33\066\uff33\067\uff33\070\uff33\071\uff33\072\uff33\073\uff33" +
    "\076\uff33\077\uff33\100\uff33\001\002\000\050\003\u0195\004" +
    "\117\005\u0196\014\u01c2\054\120\060\127\061\121\062\110" +
    "\063\104\064\106\065\107\066\u018f\070\u017d\071\u016f\072" +
    "\u0176\073\u018e\076\u0192\077\u018d\100\u0194\001\002\000\050" +
    "\003\uff37\004\uff37\005\uff37\014\uff37\054\uff37\060\uff37\061" +
    "\uff37\062\uff37\063\uff37\064\uff37\065\uff37\066\uff37\070\uff37" +
    "\071\uff37\072\uff37\073\uff37\076\uff37\077\uff37\100\uff37\001" +
    "\002\000\024\004\160\006\154\007\157\026\151\044\147" +
    "\054\120\056\153\105\152\106\150\001\002\000\010\010" +
    "\u01c5\042\217\043\216\001\002\000\004\013\u01c6\001\002" +
    "\000\004\074\u01c9\001\002\000\006\074\uff30\075\uff30\001" +
    "\002\000\006\074\u01c9\075\u01cf\001\002\000\024\004\160" +
    "\006\154\007\157\026\151\044\147\054\120\056\153\105" +
    "\152\106\150\001\002\000\010\016\u01cb\042\217\043\216" +
    "\001\002\000\046\003\u0195\004\117\005\u0196\054\120\060" +
    "\127\061\121\062\110\063\104\064\106\065\107\066\u018f" +
    "\070\u017d\071\u016f\072\u0176\073\u018e\076\u0192\077\u018d\100" +
    "\u0194\001\002\000\046\003\u0195\004\117\005\u0196\054\120" +
    "\060\127\061\121\062\110\063\104\064\106\065\107\066" +
    "\u018f\070\u017d\071\u016f\072\u0176\073\u018e\076\u01cd\077\u018d" +
    "\100\u0194\001\002\000\004\015\u01ce\001\002\000\052\003" +
    "\uff3b\004\uff3b\005\uff3b\054\uff3b\060\uff3b\061\uff3b\062\uff3b" +
    "\063\uff3b\064\uff3b\065\uff3b\066\uff3b\070\uff3b\071\uff3b\072" +
    "\uff3b\073\uff3b\074\uff2f\075\uff2f\076\uff3b\077\uff3b\100\uff3b" +
    "\001\002\000\004\016\u01d3\001\002\000\006\074\uff31\075" +
    "\uff31\001\002\000\004\014\u01d2\001\002\000\050\003\uff32" +
    "\004\uff32\005\uff32\014\uff32\054\uff32\060\uff32\061\uff32\062" +
    "\uff32\063\uff32\064\uff32\065\uff32\066\uff32\070\uff32\071\uff32" +
    "\072\uff32\073\uff32\076\uff32\077\uff32\100\uff32\001\002\000" +
    "\046\003\u0195\004\117\005\u0196\054\120\060\127\061\121" +
    "\062\110\063\104\064\106\065\107\066\u018f\070\u017d\071" +
    "\u016f\072\u0176\073\u018e\076\u0192\077\u018d\100\u0194\001\002" +
    "\000\046\003\u0195\004\117\005\u0196\054\120\060\127\061" +
    "\121\062\110\063\104\064\106\065\107\066\u018f\070\u017d" +
    "\071\u016f\072\u0176\073\u018e\076\u01d5\077\u018d\100\u0194\001" +
    "\002\000\004\015\u01d6\001\002\000\050\003\uff3b\004\uff3b" +
    "\005\uff3b\014\uff2e\054\uff3b\060\uff3b\061\uff3b\062\uff3b\063" +
    "\uff3b\064\uff3b\065\uff3b\066\uff3b\070\uff3b\071\uff3b\072\uff3b" +
    "\073\uff3b\076\uff3b\077\uff3b\100\uff3b\001\002\000\010\015" +
    "\u01d8\042\217\043\216\001\002\000\050\003\uff3c\004\uff3c" +
    "\005\uff3c\014\uff3c\054\uff3c\060\uff3c\061\uff3c\062\uff3c\063" +
    "\uff3c\064\uff3c\065\uff3c\066\uff3c\070\uff3c\071\uff3c\072\uff3c" +
    "\073\uff3c\076\uff3c\077\uff3c\100\uff3c\001\002\000\050\003" +
    "\uff44\004\uff44\005\uff44\014\uff44\054\uff44\060\uff44\061\uff44" +
    "\062\uff44\063\uff44\064\uff44\065\uff44\066\uff44\070\uff44\071" +
    "\uff44\072\uff44\073\uff44\076\uff44\077\uff44\100\uff44\001\002" +
    "\000\050\003\uff50\004\uff50\005\uff50\014\uff50\054\uff50\060" +
    "\uff50\061\uff50\062\uff50\063\uff50\064\uff50\065\uff50\066\uff50" +
    "\070\uff50\071\uff50\072\uff50\073\uff50\076\uff50\077\uff50\100" +
    "\uff50\001\002\000\050\003\uff51\004\uff51\005\uff51\014\uff51" +
    "\054\uff51\060\uff51\061\uff51\062\uff51\063\uff51\064\uff51\065" +
    "\uff51\066\uff51\070\uff51\071\uff51\072\uff51\073\uff51\076\uff51" +
    "\077\uff51\100\uff51\001\002\000\020\003\uff5f\005\uff5f\014" +
    "\uff5f\047\uff5f\050\uff5f\051\uff5f\052\uff5f\001\002\000\050" +
    "\003\uff5e\004\uff5e\005\uff5e\014\uff5e\054\uff5e\060\uff5e\061" +
    "\uff5e\062\uff5e\063\uff5e\064\uff5e\065\uff5e\066\uff5e\070\uff5e" +
    "\071\uff5e\072\uff5e\073\uff5e\076\uff5e\077\uff5e\100\uff5e\001" +
    "\002\000\004\101\u01df\001\002\000\004\020\u01e0\001\002" +
    "\000\004\102\u01e1\001\002\000\004\007\u01e2\001\002\000" +
    "\024\004\160\006\154\007\157\026\151\044\147\054\120" +
    "\056\153\105\152\106\150\001\002\000\010\010\u01e4\042" +
    "\217\043\216\001\002\000\004\015\u01e5\001\002\000\050" +
    "\003\uff53\004\uff53\005\uff53\014\uff53\054\uff53\060\uff53\061" +
    "\uff53\062\uff53\063\uff53\064\uff53\065\uff53\066\uff53\070\uff53" +
    "\071\uff53\072\uff53\073\uff53\076\uff53\077\uff53\100\uff53\001" +
    "\002\000\046\003\u0195\004\117\005\u0196\054\120\060\127" +
    "\061\121\062\110\063\104\064\106\065\107\066\u018f\070" +
    "\u017d\071\u016f\072\u0176\073\u018e\076\u0192\077\u018d\100\u0194" +
    "\001\002\000\050\003\u0195\004\117\005\u0196\014\u01e8\054" +
    "\120\060\127\061\121\062\110\063\104\064\106\065\107" +
    "\066\u018f\070\u017d\071\u016f\072\u0176\073\u018e\076\u0192\077" +
    "\u018d\100\u0194\001\002\000\004\071\u01e9\001\002\000\004" +
    "\007\u01ea\001\002\000\024\004\160\006\154\007\157\026" +
    "\151\044\147\054\120\056\153\105\152\106\150\001\002" +
    "\000\010\010\u01ec\042\217\043\216\001\002\000\004\015" +
    "\u01ed\001\002\000\050\003\uff2c\004\uff2c\005\uff2c\014\uff2c" +
    "\054\uff2c\060\uff2c\061\uff2c\062\uff2c\063\uff2c\064\uff2c\065" +
    "\uff2c\066\uff2c\070\uff2c\071\uff2c\072\uff2c\073\uff2c\076\uff2c" +
    "\077\uff2c\100\uff2c\001\002\000\024\004\160\006\154\007" +
    "\157\026\151\044\147\054\120\056\153\105\152\106\150" +
    "\001\002\000\010\010\u01f0\042\217\043\216\001\002\000" +
    "\004\013\u01f1\001\002\000\044\003\u017c\004\117\005\u017e" +
    "\054\120\060\127\061\121\062\110\063\104\064\106\065" +
    "\107\066\u0174\070\u017d\071\u016f\072\u0176\073\u0173\077\u0172" +
    "\100\u017a\001\002\000\046\003\u017c\004\117\005\u017e\014" +
    "\u01f3\054\120\060\127\061\121\062\110\063\104\064\106" +
    "\065\107\066\u0174\070\u017d\071\u016f\072\u0176\073\u0173\077" +
    "\u0172\100\u017a\001\002\000\052\003\uff4f\004\uff4f\005\uff4f" +
    "\014\uff4f\054\uff4f\060\uff4f\061\uff4f\062\uff4f\063\uff4f\064" +
    "\uff4f\065\uff4f\066\uff4f\067\u01f5\070\uff4f\071\uff4f\072\uff4f" +
    "\073\uff4f\076\uff4f\077\uff4f\100\uff4f\001\002\000\052\003" +
    "\uff4d\004\uff4d\005\uff4d\014\uff4d\054\uff4d\060\uff4d\061\uff4d" +
    "\062\uff4d\063\uff4d\064\uff4d\065\uff4d\066\uff4d\067\u0200\070" +
    "\uff4d\071\uff4d\072\uff4d\073\uff4d\076\uff4d\077\uff4d\100\uff4d" +
    "\001\002\000\006\013\u01f6\066\u01f7\001\002\000\044\003" +
    "\u017c\004\117\005\u017e\054\120\060\127\061\121\062\110" +
    "\063\104\064\106\065\107\066\u0174\070\u017d\071\u016f\072" +
    "\u0176\073\u0173\077\u0172\100\u017a\001\002\000\004\007\u01f8" +
    "\001\002\000\024\004\160\006\154\007\157\026\151\044" +
    "\147\054\120\056\153\105\152\106\150\001\002\000\010" +
    "\010\u01fa\042\217\043\216\001\002\000\004\013\u01fb\001" +
    "\002\000\044\003\u017c\004\117\005\u017e\054\120\060\127" +
    "\061\121\062\110\063\104\064\106\065\107\066\u0174\070" +
    "\u017d\071\u016f\072\u0176\073\u0173\077\u0172\100\u017a\001\002" +
    "\000\046\003\u017c\004\117\005\u017e\014\u01fd\054\120\060" +
    "\127\061\121\062\110\063\104\064\106\065\107\066\u0174" +
    "\070\u017d\071\u016f\072\u0176\073\u0173\077\u0172\100\u017a\001" +
    "\002\000\052\003\uff4a\004\uff4a\005\uff4a\014\uff4a\054\uff4a" +
    "\060\uff4a\061\uff4a\062\uff4a\063\uff4a\064\uff4a\065\uff4a\066" +
    "\uff4a\067\uff4a\070\uff4a\071\uff4a\072\uff4a\073\uff4a\076\uff4a" +
    "\077\uff4a\100\uff4a\001\002\000\046\003\u017c\004\117\005" +
    "\u017e\014\u01ff\054\120\060\127\061\121\062\110\063\104" +
    "\064\106\065\107\066\u0174\070\u017d\071\u016f\072\u0176\073" +
    "\u0173\077\u0172\100\u017a\001\002\000\050\003\uff4e\004\uff4e" +
    "\005\uff4e\014\uff4e\054\uff4e\060\uff4e\061\uff4e\062\uff4e\063" +
    "\uff4e\064\uff4e\065\uff4e\066\uff4e\070\uff4e\071\uff4e\072\uff4e" +
    "\073\uff4e\076\uff4e\077\uff4e\100\uff4e\001\002\000\006\013" +
    "\u0201\066\u0202\001\002\000\044\003\u017c\004\117\005\u017e" +
    "\054\120\060\127\061\121\062\110\063\104\064\106\065" +
    "\107\066\u0174\070\u017d\071\u016f\072\u0176\073\u0173\077\u0172" +
    "\100\u017a\001\002\000\004\007\u0203\001\002\000\024\004" +
    "\160\006\154\007\157\026\151\044\147\054\120\056\153" +
    "\105\152\106\150\001\002\000\010\010\u0205\042\217\043" +
    "\216\001\002\000\004\013\u0206\001\002\000\044\003\u017c" +
    "\004\117\005\u017e\054\120\060\127\061\121\062\110\063" +
    "\104\064\106\065\107\066\u0174\070\u017d\071\u016f\072\u0176" +
    "\073\u0173\077\u0172\100\u017a\001\002\000\046\003\u017c\004" +
    "\117\005\u017e\014\u0208\054\120\060\127\061\121\062\110" +
    "\063\104\064\106\065\107\066\u0174\070\u017d\071\u016f\072" +
    "\u0176\073\u0173\077\u0172\100\u017a\001\002\000\052\003\uff4b" +
    "\004\uff4b\005\uff4b\014\uff4b\054\uff4b\060\uff4b\061\uff4b\062" +
    "\uff4b\063\uff4b\064\uff4b\065\uff4b\066\uff4b\067\uff4b\070\uff4b" +
    "\071\uff4b\072\uff4b\073\uff4b\076\uff4b\077\uff4b\100\uff4b\001" +
    "\002\000\046\003\u017c\004\117\005\u017e\014\u020a\054\120" +
    "\060\127\061\121\062\110\063\104\064\106\065\107\066" +
    "\u0174\070\u017d\071\u016f\072\u0176\073\u0173\077\u0172\100\u017a" +
    "\001\002\000\050\003\uff4c\004\uff4c\005\uff4c\014\uff4c\054" +
    "\uff4c\060\uff4c\061\uff4c\062\uff4c\063\uff4c\064\uff4c\065\uff4c" +
    "\066\uff4c\070\uff4c\071\uff4c\072\uff4c\073\uff4c\076\uff4c\077" +
    "\uff4c\100\uff4c\001\002\000\024\004\160\006\154\007\157" +
    "\026\151\044\147\054\120\056\153\105\152\106\150\001" +
    "\002\000\010\010\u020d\042\217\043\216\001\002\000\004" +
    "\013\u020e\001\002\000\004\074\u0210\001\002\000\010\014" +
    "\ufffd\074\u0210\075\u0217\001\002\000\024\004\160\006\154" +
    "\007\157\026\151\044\147\054\120\056\153\105\152\106" +
    "\150\001\002\000\010\014\uff29\074\uff29\075\uff29\001\002" +
    "\000\010\016\u0213\042\217\043\216\001\002\000\044\003" +
    "\u017c\004\117\005\u017e\054\120\060\127\061\121\062\110" +
    "\063\104\064\106\065\107\066\u0174\070\u017d\071\u016f\072" +
    "\u0176\073\u0173\077\u0172\100\u017a\001\002\000\046\003\u017c" +
    "\004\117\005\u017e\054\120\060\127\061\121\062\110\063" +
    "\104\064\106\065\107\066\u0174\070\u017d\071\u016f\072\u0176" +
    "\073\u0173\076\u0215\077\u0172\100\u017a\001\002\000\004\015" +
    "\u0216\001\002\000\010\014\uff28\074\uff28\075\uff28\001\002" +
    "\000\004\016\u021c\001\002\000\004\014\u021b\001\002\000" +
    "\004\014\uff26\001\002\000\010\014\uff2a\074\uff2a\075\uff2a" +
    "\001\002\000\050\003\uff2b\004\uff2b\005\uff2b\014\uff2b\054" +
    "\uff2b\060\uff2b\061\uff2b\062\uff2b\063\uff2b\064\uff2b\065\uff2b" +
    "\066\uff2b\070\uff2b\071\uff2b\072\uff2b\073\uff2b\076\uff2b\077" +
    "\uff2b\100\uff2b\001\002\000\044\003\u017c\004\117\005\u017e" +
    "\054\120\060\127\061\121\062\110\063\104\064\106\065" +
    "\107\066\u0174\070\u017d\071\u016f\072\u0176\073\u0173\077\u0172" +
    "\100\u017a\001\002\000\046\003\u017c\004\117\005\u017e\054" +
    "\120\060\127\061\121\062\110\063\104\064\106\065\107" +
    "\066\u0174\070\u017d\071\u016f\072\u0176\073\u0173\076\u021e\077" +
    "\u0172\100\u017a\001\002\000\004\015\u021f\001\002\000\004" +
    "\014\uff27\001\002\000\010\015\u0221\042\217\043\216\001" +
    "\002\000\050\003\uff52\004\uff52\005\uff52\014\uff52\054\uff52" +
    "\060\uff52\061\uff52\062\uff52\063\uff52\064\uff52\065\uff52\066" +
    "\uff52\070\uff52\071\uff52\072\uff52\073\uff52\076\uff52\077\uff52" +
    "\100\uff52\001\002\000\024\004\160\006\154\007\157\026" +
    "\151\044\147\054\120\056\153\105\152\106\150\001\002" +
    "\000\010\010\u0224\042\217\043\216\001\002\000\004\013" +
    "\u0225\001\002\000\046\003\u0195\004\117\005\u0196\054\120" +
    "\060\127\061\121\062\110\063\104\064\106\065\107\066" +
    "\u018f\070\u017d\071\u016f\072\u0176\073\u018e\076\u0192\077\u018d" +
    "\100\u0194\001\002\000\050\003\u0195\004\117\005\u0196\014" +
    "\u0227\054\120\060\127\061\121\062\110\063\104\064\106" +
    "\065\107\066\u018f\070\u017d\071\u016f\072\u0176\073\u018e\076" +
    "\u0192\077\u018d\100\u0194\001\002\000\050\003\uff2d\004\uff2d" +
    "\005\uff2d\014\uff2d\054\uff2d\060\uff2d\061\uff2d\062\uff2d\063" +
    "\uff2d\064\uff2d\065\uff2d\066\uff2d\070\uff2d\071\uff2d\072\uff2d" +
    "\073\uff2d\076\uff2d\077\uff2d\100\uff2d\001\002\000\050\003" +
    "\uff5a\004\uff5a\005\uff5a\014\uff5a\054\uff5a\060\uff5a\061\uff5a" +
    "\062\uff5a\063\uff5a\064\uff5a\065\uff5a\066\uff5a\070\uff5a\071" +
    "\uff5a\072\uff5a\073\uff5a\076\uff5a\077\uff5a\100\uff5a\001\002" +
    "\000\004\004\u022a\001\002\000\006\010\uffa9\017\uffa9\001" +
    "\002\000\024\004\u0166\010\ufffd\017\ufffd\060\127\061\121" +
    "\062\110\063\104\064\106\065\107\001\002\000\006\010" +
    "\u022d\017\u016a\001\002\000\004\013\u022e\001\002\000\042" +
    "\003\132\004\117\005\135\054\120\060\127\061\121\062" +
    "\110\063\104\064\106\065\107\066\115\070\136\071\111" +
    "\072\122\073\114\100\125\001\002\000\044\003\132\004" +
    "\117\005\135\014\u0230\054\120\060\127\061\121\062\110" +
    "\063\104\064\106\065\107\066\115\070\136\071\111\072" +
    "\122\073\114\100\125\001\002\000\020\003\uffaa\005\uffaa" +
    "\014\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\001\002\000" +
    "\004\007\uff62\001\002\000\004\007\u0233\001\002\000\024" +
    "\004\u0166\010\ufffd\017\ufffd\060\127\061\121\062\110\063" +
    "\104\064\106\065\107\001\002\000\006\010\u0235\017\u016a" +
    "\001\002\000\004\013\u0236\001\002\000\042\003\132\004" +
    "\117\005\135\054\120\060\127\061\121\062\110\063\104" +
    "\064\106\065\107\066\115\070\136\071\111\072\122\073" +
    "\114\100\125\001\002\000\044\003\132\004\117\005\135" +
    "\014\u0238\054\120\060\127\061\121\062\110\063\104\064" +
    "\106\065\107\066\115\070\136\071\111\072\122\073\114" +
    "\100\125\001\002\000\020\003\uff61\005\uff61\014\uff61\047" +
    "\uff61\050\uff61\051\uff61\052\uff61\001\002\000\024\002\uffff" +
    "\003\uffff\005\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051" +
    "\uffff\052\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0237\000\014\004\015\005\003\007\010\013\004\014" +
    "\005\001\001\000\010\007\u0238\013\004\014\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\033\012\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\111\044\001\001\000\002\001\001\000" +
    "\022\014\047\015\051\016\046\017\054\031\056\062\053" +
    "\064\057\065\055\001\001\000\002\001\001\000\006\002" +
    "\u0160\020\u015e\001\001\000\002\001\001\000\020\014\047" +
    "\016\064\017\054\031\056\062\053\064\057\065\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\002\125\020" +
    "\112\027\104\030\130\033\136\034\133\035\122\040\132" +
    "\042\127\046\111\052\123\053\115\001\001\000\002\001" +
    "\001\000\006\036\346\037\354\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u0102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\002\125\020\112" +
    "\027\104\030\130\034\140\035\122\040\132\042\127\046" +
    "\111\052\123\053\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\143\047\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\155" +
    "\026\160\027\154\030\130\001\001\000\012\024\364\026" +
    "\160\027\154\030\130\001\001\000\002\001\001\000\010" +
    "\026\363\027\154\030\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\221\026\160\027\154\030\130\001" +
    "\001\000\002\001\001\000\004\025\171\001\001\000\010" +
    "\026\204\027\154\030\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\203\027\154" +
    "\030\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\026\202\027\154\030\130\001\001\000\010\026\201" +
    "\027\154\030\130\001\001\000\002\001\001\000\010\026" +
    "\200\027\154\030\130\001\001\000\010\026\177\027\154" +
    "\030\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\206\022\211\023\210\024\207\026\160\027\154\030\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\214" +
    "\026\160\027\154\030\130\001\001\000\002\001\001\000" +
    "\012\024\220\026\160\027\154\030\130\001\001\000\012" +
    "\024\217\026\160\027\154\030\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\224\026\160\027\154\030\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\002\125\020\232" +
    "\027\227\030\130\035\240\046\231\050\246\051\237\052" +
    "\241\053\236\054\230\056\233\001\001\000\006\036\346" +
    "\037\354\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\125\020" +
    "\232\027\227\030\130\035\240\046\231\051\247\052\241" +
    "\053\236\054\230\056\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\260\026\160\027\154\030\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\265\026\160\027\154\030\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\002" +
    "\125\020\232\027\227\030\130\035\240\046\231\050\270" +
    "\051\237\052\241\053\236\054\230\056\233\001\001\000" +
    "\030\002\125\020\232\027\227\030\130\035\240\046\231" +
    "\051\247\052\241\053\236\054\230\056\233\001\001\000" +
    "\004\055\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\125\020\232\027\227\030" +
    "\130\035\240\046\231\050\305\051\237\052\241\053\236" +
    "\054\230\056\233\001\001\000\002\001\001\000\012\024" +
    "\300\026\160\027\154\030\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\125\020\232\027\227\030" +
    "\130\035\240\046\231\050\303\051\237\052\241\053\236" +
    "\054\230\056\233\001\001\000\030\002\125\020\232\027" +
    "\227\030\130\035\240\046\231\051\247\052\241\053\236" +
    "\054\230\056\233\001\001\000\002\001\001\000\030\002" +
    "\125\020\232\027\227\030\130\035\240\046\231\051\247" +
    "\052\241\053\236\054\230\056\233\001\001\000\002\001" +
    "\001\000\032\002\125\020\232\027\227\030\130\035\240" +
    "\046\231\050\317\051\237\052\241\053\236\054\230\056" +
    "\233\001\001\000\002\001\001\000\012\024\312\026\160" +
    "\027\154\030\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\002\125\020\232\027\227\030\130\035\240" +
    "\046\231\050\315\051\237\052\241\053\236\054\230\056" +
    "\233\001\001\000\030\002\125\020\232\027\227\030\130" +
    "\035\240\046\231\051\247\052\241\053\236\054\230\056" +
    "\233\001\001\000\002\001\001\000\030\002\125\020\232" +
    "\027\227\030\130\035\240\046\231\051\247\052\241\053" +
    "\236\054\230\056\233\001\001\000\002\001\001\000\012" +
    "\024\322\026\160\027\154\030\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\057\326\060\325\001\001" +
    "\000\002\001\001\000\010\006\340\060\337\061\336\001" +
    "\001\000\012\024\330\026\160\027\154\030\130\001\001" +
    "\000\002\001\001\000\032\002\125\020\232\027\227\030" +
    "\130\035\240\046\231\050\332\051\237\052\241\053\236" +
    "\054\230\056\233\001\001\000\030\002\125\020\232\027" +
    "\227\030\130\035\240\046\231\051\247\052\241\053\236" +
    "\054\230\056\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\002\125\020" +
    "\232\027\227\030\130\035\240\046\231\050\343\051\237" +
    "\052\241\053\236\054\230\056\233\001\001\000\030\002" +
    "\125\020\232\027\227\030\130\035\240\046\231\051\247" +
    "\052\241\053\236\054\230\056\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\361\026\160\027\154" +
    "\030\130\001\001\000\002\001\001\000\012\024\360\026" +
    "\160\027\154\030\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\024" +
    "\357\026\160\027\154\030\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\367\026\160\027\154\030\130\001" +
    "\001\000\002\001\001\000\012\024\371\026\160\027\154" +
    "\030\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\206\022\377\023\210\024\207\026\160\027\154\030" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\113\u0110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\112\u0106\001\001\000\006\006\u0109" +
    "\021\u0108\001\001\000\012\024\u010b\026\160\027\154\030" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\206\022\u010e\023\210\024\207\026\160\027\154\030\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u0109\021\u0111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\u0117\026\160\027\154\030\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\002" +
    "\125\020\232\027\227\030\130\035\240\046\231\050\u011b" +
    "\051\237\052\241\053\236\054\230\056\233\001\001\000" +
    "\030\002\125\020\232\027\227\030\130\035\240\046\231" +
    "\051\247\052\241\053\236\054\230\056\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\u011f\026\160" +
    "\027\154\030\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\u0123\001\001\000\002" +
    "\001\001\000\012\024\u0125\026\160\027\154\030\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\125" +
    "\020\112\027\104\030\130\033\u0128\034\133\035\122\040" +
    "\132\042\127\046\111\052\123\053\115\001\001\000\030" +
    "\002\125\020\112\027\104\030\130\034\140\035\122\040" +
    "\132\042\127\046\111\052\123\053\115\001\001\000\004" +
    "\041\u012a\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\125\020\112\027\104\030\130\033\u0134\034\133" +
    "\035\122\040\132\042\127\046\111\052\123\053\115\001" +
    "\001\000\002\001\001\000\012\024\u012f\026\160\027\154" +
    "\030\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\125\020\112\027\104\030\130\033\u0132\034\133" +
    "\035\122\040\132\042\127\046\111\052\123\053\115\001" +
    "\001\000\030\002\125\020\112\027\104\030\130\034\140" +
    "\035\122\040\132\042\127\046\111\052\123\053\115\001" +
    "\001\000\002\001\001\000\030\002\125\020\112\027\104" +
    "\030\130\034\140\035\122\040\132\042\127\046\111\052" +
    "\123\053\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\125\020\112\027\104\030\130\033\u013f\034" +
    "\133\035\122\040\132\042\127\046\111\052\123\053\115" +
    "\001\001\000\002\001\001\000\012\024\u013a\026\160\027" +
    "\154\030\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\125\020\112\027\104\030\130\033\u013d\034" +
    "\133\035\122\040\132\042\127\046\111\052\123\053\115" +
    "\001\001\000\030\002\125\020\112\027\104\030\130\034" +
    "\140\035\122\040\132\042\127\046\111\052\123\053\115" +
    "\001\001\000\002\001\001\000\030\002\125\020\112\027" +
    "\104\030\130\034\140\035\122\040\132\042\127\046\111" +
    "\052\123\053\115\001\001\000\002\001\001\000\012\024" +
    "\u0142\026\160\027\154\030\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\043\u0145\044\u0147\001\001\000" +
    "\010\006\u014f\044\u0150\045\u014e\001\001\000\012\024\u0148" +
    "\026\160\027\154\030\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\125\020\112\027\104\030\130" +
    "\033\u014a\034\133\035\122\040\132\042\127\046\111\052" +
    "\123\053\115\001\001\000\030\002\125\020\112\027\104" +
    "\030\130\034\140\035\122\040\132\042\127\046\111\052" +
    "\123\053\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\002\125\020\112" +
    "\027\104\030\130\033\u0153\034\133\035\122\040\132\042" +
    "\127\046\111\052\123\053\115\001\001\000\030\002\125" +
    "\020\112\027\104\030\130\034\140\035\122\040\132\042" +
    "\127\046\111\052\123\053\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\024\u0157\026\160\027\154\030" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\002\125\020\232\027\227\030\130\035\240\046\231\050" +
    "\u015a\051\237\052\241\053\236\054\230\056\233\001\001" +
    "\000\030\002\125\020\232\027\227\030\130\035\240\046" +
    "\231\051\247\052\241\053\236\054\230\056\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\u0102\001\001" +
    "\000\006\113\u0110\115\u0162\001\001\000\002\001\001\000" +
    "\010\002\u0167\006\u0164\032\u0166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\u0228\001\001\000\002\001\001" +
    "\000\032\002\125\020\u016f\027\u016c\030\130\035\u0177\066" +
    "\u017a\067\u0178\070\u0176\072\u0174\076\u017e\101\u0170\102\u016d" +
    "\001\001\000\006\036\346\037\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\u021f\026\160\027\154\030\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\125\020\u016f\027\u016c" +
    "\030\130\035\u0177\067\u01dc\070\u0176\072\u0174\076\u017e\101" +
    "\u0170\102\u016d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\143\047" +
    "\u0180\001\001\000\002\001\001\000\012\024\u0182\026\160" +
    "\027\154\030\130\001\001\000\002\001\001\000\012\024" +
    "\u0184\026\160\027\154\030\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\125\020\u018a\027\u0187\030" +
    "\130\035\u018f\076\u0197\077\u0192\100\u0189\101\u018b\102\u0188" +
    "\103\u0196\105\u0190\001\001\000\006\036\346\037\354\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\024\u01d6\026\160\027\154\030" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\002" +
    "\125\020\u018a\027\u0187\030\130\035\u018f\076\u0197\100\u01a2" +
    "\101\u018b\102\u0188\103\u0196\105\u0190\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\u019f\026\160\027\154\030\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\u01a6\026\160\027\154\030\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\125\020\u018a\027" +
    "\u0187\030\130\035\u018f\076\u0197\077\u01a9\100\u0189\101\u018b" +
    "\102\u0188\103\u0196\105\u0190\001\001\000\030\002\125\020" +
    "\u018a\027\u0187\030\130\035\u018f\076\u0197\100\u01a2\101\u018b" +
    "\102\u0188\103\u0196\105\u0190\001\001\000\004\104\u01ac\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\125\020\u018a\027\u0187\030\130\035\u018f\076" +
    "\u0197\077\u01b6\100\u0189\101\u018b\102\u0188\103\u0196\105\u0190" +
    "\001\001\000\002\001\001\000\012\024\u01b1\026\160\027" +
    "\154\030\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\125\020\u018a\027\u0187\030\130\035\u018f\076" +
    "\u0197\077\u01b4\100\u0189\101\u018b\102\u0188\103\u0196\105\u0190" +
    "\001\001\000\030\002\125\020\u018a\027\u0187\030\130\035" +
    "\u018f\076\u0197\100\u01a2\101\u018b\102\u0188\103\u0196\105\u0190" +
    "\001\001\000\002\001\001\000\030\002\125\020\u018a\027" +
    "\u0187\030\130\035\u018f\076\u0197\100\u01a2\101\u018b\102\u0188" +
    "\103\u0196\105\u0190\001\001\000\002\001\001\000\032\002" +
    "\125\020\u018a\027\u0187\030\130\035\u018f\076\u0197\077\u01c0" +
    "\100\u0189\101\u018b\102\u0188\103\u0196\105\u0190\001\001\000" +
    "\002\001\001\000\012\024\u01bb\026\160\027\154\030\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\002" +
    "\125\020\u018a\027\u0187\030\130\035\u018f\076\u0197\077\u01be" +
    "\100\u0189\101\u018b\102\u0188\103\u0196\105\u0190\001\001\000" +
    "\030\002\125\020\u018a\027\u0187\030\130\035\u018f\076\u0197" +
    "\100\u01a2\101\u018b\102\u0188\103\u0196\105\u0190\001\001\000" +
    "\002\001\001\000\030\002\125\020\u018a\027\u0187\030\130" +
    "\035\u018f\076\u0197\100\u01a2\101\u018b\102\u0188\103\u0196\105" +
    "\u0190\001\001\000\002\001\001\000\012\024\u01c3\026\160" +
    "\027\154\030\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\106\u01c7\107\u01c6\001\001\000\002\001\001" +
    "\000\006\107\u01cf\110\u01d0\001\001\000\012\024\u01c9\026" +
    "\160\027\154\030\130\001\001\000\002\001\001\000\032" +
    "\002\125\020\u018a\027\u0187\030\130\035\u018f\076\u0197\077" +
    "\u01cb\100\u0189\101\u018b\102\u0188\103\u0196\105\u0190\001\001" +
    "\000\030\002\125\020\u018a\027\u0187\030\130\035\u018f\076" +
    "\u0197\100\u01a2\101\u018b\102\u0188\103\u0196\105\u0190\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\002\125\020\u018a\027\u0187\030\130\035\u018f\076\u0197\077" +
    "\u01d3\100\u0189\101\u018b\102\u0188\103\u0196\105\u0190\001\001" +
    "\000\030\002\125\020\u018a\027\u0187\030\130\035\u018f\076" +
    "\u0197\100\u01a2\101\u018b\102\u0188\103\u0196\105\u0190\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\u01e2\026\160\027\154\030\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\002\125\020\u018a\027\u0187\030\130\035\u018f\076\u0197\077" +
    "\u01e6\100\u0189\101\u018b\102\u0188\103\u0196\105\u0190\001\001" +
    "\000\030\002\125\020\u018a\027\u0187\030\130\035\u018f\076" +
    "\u0197\100\u01a2\101\u018b\102\u0188\103\u0196\105\u0190\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\u01ea\026" +
    "\160\027\154\030\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\024\u01ee\026\160\027" +
    "\154\030\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\125\020\u016f\027\u016c\030\130\035\u0177\066" +
    "\u01f1\067\u0178\070\u0176\072\u0174\076\u017e\101\u0170\102\u016d" +
    "\001\001\000\030\002\125\020\u016f\027\u016c\030\130\035" +
    "\u0177\067\u01dc\070\u0176\072\u0174\076\u017e\101\u0170\102\u016d" +
    "\001\001\000\004\071\u01f3\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\125\020\u016f\027\u016c\030\130" +
    "\035\u0177\066\u01fd\067\u0178\070\u0176\072\u0174\076\u017e\101" +
    "\u0170\102\u016d\001\001\000\002\001\001\000\012\024\u01f8" +
    "\026\160\027\154\030\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\125\020\u016f\027\u016c\030\130" +
    "\035\u0177\066\u01fb\067\u0178\070\u0176\072\u0174\076\u017e\101" +
    "\u0170\102\u016d\001\001\000\030\002\125\020\u016f\027\u016c" +
    "\030\130\035\u0177\067\u01dc\070\u0176\072\u0174\076\u017e\101" +
    "\u0170\102\u016d\001\001\000\002\001\001\000\030\002\125" +
    "\020\u016f\027\u016c\030\130\035\u0177\067\u01dc\070\u0176\072" +
    "\u0174\076\u017e\101\u0170\102\u016d\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\125\020\u016f\027\u016c\030" +
    "\130\035\u0177\066\u0208\067\u0178\070\u0176\072\u0174\076\u017e" +
    "\101\u0170\102\u016d\001\001\000\002\001\001\000\012\024" +
    "\u0203\026\160\027\154\030\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\125\020\u016f\027\u016c\030" +
    "\130\035\u0177\066\u0206\067\u0178\070\u0176\072\u0174\076\u017e" +
    "\101\u0170\102\u016d\001\001\000\030\002\125\020\u016f\027" +
    "\u016c\030\130\035\u0177\067\u01dc\070\u0176\072\u0174\076\u017e" +
    "\101\u0170\102\u016d\001\001\000\002\001\001\000\030\002" +
    "\125\020\u016f\027\u016c\030\130\035\u0177\067\u01dc\070\u0176" +
    "\072\u0174\076\u017e\101\u0170\102\u016d\001\001\000\002\001" +
    "\001\000\012\024\u020b\026\160\027\154\030\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\073\u020e\074" +
    "\u0210\001\001\000\010\006\u0218\074\u0219\075\u0217\001\001" +
    "\000\012\024\u0211\026\160\027\154\030\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\002\125\020\u016f" +
    "\027\u016c\030\130\035\u0177\066\u0213\067\u0178\070\u0176\072" +
    "\u0174\076\u017e\101\u0170\102\u016d\001\001\000\030\002\125" +
    "\020\u016f\027\u016c\030\130\035\u0177\067\u01dc\070\u0176\072" +
    "\u0174\076\u017e\101\u0170\102\u016d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\002\125\020\u016f\027\u016c\030\130\035\u0177\066\u021c\067" +
    "\u0178\070\u0176\072\u0174\076\u017e\101\u0170\102\u016d\001\001" +
    "\000\030\002\125\020\u016f\027\u016c\030\130\035\u0177\067" +
    "\u01dc\070\u0176\072\u0174\076\u017e\101\u0170\102\u016d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\u0222\026\160\027\154\030\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\002" +
    "\125\020\u018a\027\u0187\030\130\035\u018f\076\u0197\077\u0225" +
    "\100\u0189\101\u018b\102\u0188\103\u0196\105\u0190\001\001\000" +
    "\030\002\125\020\u018a\027\u0187\030\130\035\u018f\076\u0197" +
    "\100\u01a2\101\u018b\102\u0188\103\u0196\105\u0190\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\u0167\006\u0164\032\u022b\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\002\125\020\112" +
    "\027\104\030\130\033\u022e\034\133\035\122\040\132\042" +
    "\127\046\111\052\123\053\115\001\001\000\030\002\125" +
    "\020\112\027\104\030\130\034\140\035\122\040\132\042" +
    "\127\046\111\052\123\053\115\001\001\000\002\001\001" +
    "\000\004\114\u0231\001\001\000\002\001\001\000\010\002" +
    "\u0167\006\u0164\032\u0233\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\002\125\020\112\027\104\030\130\033" +
    "\u0236\034\133\035\122\040\132\042\127\046\111\052\123" +
    "\053\115\001\001\000\030\002\125\020\112\027\104\030" +
    "\130\034\140\035\122\040\132\042\127\046\111\052\123" +
    "\053\115\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ScannerSintaxJava$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ScannerSintaxJava$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ScannerSintaxJava$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





    public Clase nuevaClase = new Clase();
    public Metodo nuevoMetodo = null;

    public Clase getNuevaClase(){
      return nuevaClase;
    }

    public String getAmbito(){
      if (nuevoMetodo == null)
        return "global";
      else
        return nuevoMetodo.getNombre();
    }

    public Object stack(int position){
      return (((Symbol)stack.elementAt(tos + position)).value);
    }
    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            ScannerSintaxJava asin = new ScannerSintaxJava(
                    new ScannerLexJava( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ScannerSintaxJava$actions {
  private final ScannerSintaxJava parser;

  /** Constructor */
  CUP$ScannerSintaxJava$actions(ScannerSintaxJava parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ScannerSintaxJava$do_action(
    int                        CUP$ScannerSintaxJava$act_num,
    java_cup.runtime.lr_parser CUP$ScannerSintaxJava$parser,
    java.util.Stack            CUP$ScannerSintaxJava$stack,
    int                        CUP$ScannerSintaxJava$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ScannerSintaxJava$result;

      /* select the action based on the action number */
      switch (CUP$ScannerSintaxJava$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // CASODEFAULTFUN ::= EPS 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASODEFAULTFUN",59, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // CASODEFAULTFUN ::= DEFAULT DPUNTOS SENTSFUN BREAK PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASODEFAULTFUN",59, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-4)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // CASOFUN ::= CASE COND DPUNTOS SENTSFUN BREAK PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASOFUN",58, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-5)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // CASOSFUN ::= CASOFUN 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASOSFUN",57, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // CASOSFUN ::= CASOSFUN CASOFUN 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASOSFUN",57, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // SWITCHFUN ::= SWITCH PARENIZQ COND PARENDER LLAVEIZQ CASOSFUN CASODEFAULTFUN LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SWITCHFUN",56, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // DOWHILEFUN ::= DO LLAVEIZQ SENTSFUNCICLO LLAVEDER WHILE PARENIZQ COND PARENDER PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("DOWHILEFUN",64, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-8)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // WHILEFUN ::= WHILE PARENIZQ COND PARENDER LLAVEIZQ SENTSFUNCICLO LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("WHILEFUN",63, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-6)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // CASODEFAULTFUNCICLO ::= DEFAULT DPUNTOS SENTSFUNCICLO BREAK PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASODEFAULTFUNCICLO",70, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-4)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // CASOFUNCICLO ::= CASE COND DPUNTOS SENTSFUNCICLO BREAK PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASOFUNCICLO",69, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-5)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // CASOSFUNCICLO ::= CASOFUNCICLO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASOSFUNCICLO",68, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // CASOSFUNCICLO ::= CASOSFUNCICLO CASOFUNCICLO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASOSFUNCICLO",68, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // SWITCHFUNCICLO ::= SWITCH PARENIZQ COND PARENDER LLAVEIZQ CASOSFUNCICLO CASODEFAULTFUNCICLO LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SWITCHFUNCICLO",67, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // IFELSEFUNCICLO ::= ELSE IF PARENIZQ COND PARENDER LLAVEIZQ SENTSFUNCICLO LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFELSEFUNCICLO",66, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // IFELSEFUNCICLO ::= IFELSEFUNCICLO ELSE IF PARENIZQ COND PARENDER LLAVEIZQ SENTSFUNCICLO LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFELSEFUNCICLO",66, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-8)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // IFFUNCICLO ::= IF PARENIZQ COND PARENDER LLAVEIZQ SENTSFUNCICLO LLAVEDER IFELSEFUNCICLO ELSE LLAVEIZQ SENTSFUNCICLO LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFFUNCICLO",65, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-11)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // IFFUNCICLO ::= IF PARENIZQ COND PARENDER LLAVEIZQ SENTSFUNCICLO LLAVEDER IFELSEFUNCICLO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFFUNCICLO",65, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // IFFUNCICLO ::= IF PARENIZQ COND PARENDER LLAVEIZQ SENTSFUNCICLO LLAVEDER ELSE LLAVEIZQ SENTSFUNCICLO LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFFUNCICLO",65, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-10)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // IFFUNCICLO ::= IF PARENIZQ COND PARENDER LLAVEIZQ SENTSFUNCICLO LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFFUNCICLO",65, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-6)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // SENTFUNCICLO ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUNCICLO",62, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // SENTFUNCICLO ::= error PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUNCICLO",62, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // SENTFUNCICLO ::= BREAK PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUNCICLO",62, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // SENTFUNCICLO ::= RETURN COND PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUNCICLO",62, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // SENTFUNCICLO ::= SYSTEM PUNTO OUT PUNTO PRINT PARENIZQ COND PARENDER PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUNCICLO",62, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-8)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // SENTFUNCICLO ::= COMENTARIO 
            {
              Object RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.peek()).value;
		
                                                          parser.nuevaClase.setComentario(comment);
                                                        
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUNCICLO",62, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // SENTFUNCICLO ::= SWITCHFUNCICLO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUNCICLO",62, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // SENTFUNCICLO ::= DOWHILEFUN 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUNCICLO",62, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // SENTFUNCICLO ::= WHILEFUN 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUNCICLO",62, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // SENTFUNCICLO ::= FORFUN 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUNCICLO",62, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SENTFUNCICLO ::= IFFUNCICLO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUNCICLO",62, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SENTFUNCICLO ::= LLAMADA PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUNCICLO",62, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SENTFUNCICLO ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUNCICLO",62, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SENTFUNCICLO ::= LOCAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUNCICLO",62, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // SENTSFUNCICLO ::= SENTFUNCICLO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTSFUNCICLO",61, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // SENTSFUNCICLO ::= SENTSFUNCICLO SENTFUNCICLO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTSFUNCICLO",61, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // FORFUN ::= FOR PARENIZQ FORINICIO PCOMA COND PCOMA COND PARENDER LLAVEIZQ SENTSFUNCICLO LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("FORFUN",60, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-10)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // IFELSEFUN ::= ELSE IF PARENIZQ COND PARENDER LLAVEIZQ SENTSFUN LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFELSEFUN",55, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // IFELSEFUN ::= IFELSEFUN ELSE IF PARENIZQ COND PARENDER LLAVEIZQ SENTSFUN LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFELSEFUN",55, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-8)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // IFFUN ::= IF PARENIZQ COND PARENDER LLAVEIZQ SENTSFUN LLAVEDER IFELSEFUN ELSE LLAVEIZQ SENTSFUN LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFFUN",54, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-11)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // IFFUN ::= IF PARENIZQ COND PARENDER LLAVEIZQ SENTSFUN LLAVEDER IFELSEFUN 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFFUN",54, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // IFFUN ::= IF PARENIZQ COND PARENDER LLAVEIZQ SENTSFUN LLAVEDER ELSE LLAVEIZQ SENTSFUN LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFFUN",54, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-10)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // IFFUN ::= IF PARENIZQ COND PARENDER LLAVEIZQ SENTSFUN LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFFUN",54, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-6)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SENTFUN ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUN",53, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SENTFUN ::= error PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUN",53, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SENTFUN ::= RETURN COND PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUN",53, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // SENTFUN ::= SYSTEM PUNTO OUT PUNTO PRINT PARENIZQ COND PARENDER PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUN",53, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-8)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SENTFUN ::= COMENTARIO 
            {
              Object RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.peek()).value;
		
                                                    parser.nuevaClase.setComentario(comment);
                                                  
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUN",53, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SENTFUN ::= SWITCHFUN 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUN",53, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SENTFUN ::= DOWHILEFUN 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUN",53, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SENTFUN ::= WHILEFUN 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUN",53, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SENTFUN ::= FORFUN 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUN",53, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SENTFUN ::= IFFUN 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUN",53, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // SENTFUN ::= LLAMADA PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUN",53, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // SENTFUN ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUN",53, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // SENTFUN ::= LOCAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTFUN",53, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SENTSFUN ::= SENTFUN 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTSFUN",52, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SENTSFUN ::= SENTSFUN SENTFUN 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTSFUN",52, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // FUNCION ::= ACCESO TIPODATO ID NT$4 PARENIZQ DEFPARAMETROS PARENDER LLAVEIZQ SENTSFUN LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-6)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-8)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)).value;
		 
                                                                              parser.nuevaClase.setMetodo(parser.nuevoMetodo);
                                                                              parser.nuevoMetodo = null;
                                                                            
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("FUNCION",51, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-9)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$4 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.peek()).value;

                                              parser.nuevoMetodo = new Metodo(id, tipo);
                                            
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("NT$4",75, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // METODO ::= ACCESO TVOID ID NT$3 PARENIZQ DEFPARAMETROS PARENDER LLAVEIZQ SENTSMET LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)).value;
		 
                                                                              parser.nuevaClase.setMetodo(parser.nuevoMetodo);
                                                                              parser.nuevoMetodo = null;
                                                                            
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("METODO",50, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-9)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.peek()).value;

                                      parser.nuevoMetodo = new Metodo(id, "void");
                                    
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("NT$3",74, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // PARAMMAIN ::= TSTRING ARGS CORCHIZQ CORCHDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("PARAMMAIN",49, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-3)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // PARAMMAIN ::= TSTRING CORCHIZQ CORCHDER ARGS 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("PARAMMAIN",49, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-3)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // METMAIN ::= PUBLIC STATIC TVOID MAIN PARENIZQ PARAMMAIN PARENDER LLAVEIZQ SENTSMET LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("METMAIN",48, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-9)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CASODEFAULT ::= EPS 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASODEFAULT",35, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CASODEFAULT ::= DEFAULT DPUNTOS SENTSMET BREAK PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASODEFAULT",35, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-4)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CASO ::= CASE COND DPUNTOS SENTSMET BREAK PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASO",34, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-5)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CASOS ::= CASO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASOS",33, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CASOS ::= CASOS CASO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASOS",33, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SWITCHMET ::= SWITCH PARENIZQ COND PARENDER LLAVEIZQ CASOS CASODEFAULT LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SWITCHMET",32, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DOWHILEMET ::= DO LLAVEIZQ SENTSMETCICLO LLAVEDER WHILE PARENIZQ COND PARENDER PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("DOWHILEMET",41, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-8)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // WHILEMET ::= WHILE PARENIZQ COND PARENDER LLAVEIZQ SENTSMETCICLO LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("WHILEMET",40, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-6)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CASODEFAULTCICLO ::= EPS 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASODEFAULTCICLO",47, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CASODEFAULTCICLO ::= DEFAULT DPUNTOS SENTSMETCICLO BREAK PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASODEFAULTCICLO",47, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-4)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CASOCICLO ::= CASE COND DPUNTOS SENTSMETCICLO BREAK PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASOCICLO",46, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-5)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CASOSCICLO ::= CASOCICLO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASOSCICLO",45, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CASOSCICLO ::= CASOSCICLO CASOCICLO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CASOSCICLO",45, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SWITCHMETCICLO ::= SWITCH PARENIZQ COND PARENDER LLAVEIZQ CASOSCICLO CASODEFAULTCICLO LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SWITCHMETCICLO",44, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // IFELSEMETCICLO ::= ELSE IF PARENIZQ COND PARENDER LLAVEIZQ SENTSMETCICLO LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFELSEMETCICLO",43, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // IFELSEMETCICLO ::= IFELSEMETCICLO ELSE IF PARENIZQ COND PARENDER LLAVEIZQ SENTSMETCICLO LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFELSEMETCICLO",43, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-8)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // IFMETCICLO ::= IF PARENIZQ COND PARENDER LLAVEIZQ SENTSMETCICLO LLAVEDER IFELSEMETCICLO ELSE LLAVEIZQ SENTSMETCICLO LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFMETCICLO",42, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-11)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // IFMETCICLO ::= IF PARENIZQ COND PARENDER LLAVEIZQ SENTSMETCICLO LLAVEDER IFELSEMETCICLO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFMETCICLO",42, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // IFMETCICLO ::= IF PARENIZQ COND PARENDER LLAVEIZQ SENTSMETCICLO LLAVEDER ELSE LLAVEIZQ SENTSMETCICLO LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFMETCICLO",42, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-10)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // IFMETCICLO ::= IF PARENIZQ COND PARENDER LLAVEIZQ SENTSMETCICLO LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFMETCICLO",42, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-6)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTMETCICLO ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMETCICLO",39, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTMETCICLO ::= error PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMETCICLO",39, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTMETCICLO ::= BREAK PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMETCICLO",39, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SENTMETCICLO ::= SYSTEM PUNTO OUT PUNTO PRINT PARENIZQ COND PARENDER PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMETCICLO",39, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-8)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SENTMETCICLO ::= COMENTARIO 
            {
              Object RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.peek()).value;
		
                                                    parser.nuevaClase.setComentario(comment);
                                                  
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMETCICLO",39, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTMETCICLO ::= SWITCHMETCICLO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMETCICLO",39, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTMETCICLO ::= DOWHILEMET 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMETCICLO",39, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTMETCICLO ::= WHILEMET 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMETCICLO",39, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTMETCICLO ::= FORMET 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMETCICLO",39, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SENTMETCICLO ::= IFMETCICLO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMETCICLO",39, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTMETCICLO ::= LLAMADA PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMETCICLO",39, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTMETCICLO ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMETCICLO",39, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTMETCICLO ::= LOCAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMETCICLO",39, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTSMETCICLO ::= SENTMETCICLO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTSMETCICLO",38, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTSMETCICLO ::= SENTSMETCICLO SENTMETCICLO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTSMETCICLO",38, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FORINICIO ::= ID IGUAL COND 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("FORINICIO",37, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FORINICIO ::= TIPODATO ID IGUAL COND 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("FORINICIO",37, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-3)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FORMET ::= FOR PARENIZQ FORINICIO PCOMA COND PCOMA COND PARENDER LLAVEIZQ SENTSMETCICLO LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("FORMET",36, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-10)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // IFELSEMET ::= ELSE IF PARENIZQ COND PARENDER LLAVEIZQ SENTSMET LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFELSEMET",31, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IFELSEMET ::= IFELSEMET ELSE IF PARENIZQ COND PARENDER LLAVEIZQ SENTSMET LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFELSEMET",31, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-8)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IFMET ::= IF PARENIZQ COND PARENDER LLAVEIZQ SENTSMET LLAVEDER IFELSEMET ELSE LLAVEIZQ SENTSMET LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFMET",30, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-11)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IFMET ::= IF PARENIZQ COND PARENDER LLAVEIZQ SENTSMET LLAVEDER IFELSEMET 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFMET",30, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // IFMET ::= IF PARENIZQ COND PARENDER LLAVEIZQ SENTSMET LLAVEDER ELSE LLAVEIZQ SENTSMET LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFMET",30, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-10)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // IFMET ::= IF PARENIZQ COND PARENDER LLAVEIZQ SENTSMET LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IFMET",30, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-6)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LISTAVAR ::= IGUAL COND 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("LISTAVAR",29, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LISTAVAR ::= LISTAVAR IGUAL COND 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("LISTAVAR",29, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OPASIGNACION ::= MULTIGUAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("OPASIGNACION",28, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OPASIGNACION ::= MENIGUAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("OPASIGNACION",28, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OPASIGNACION ::= MASIGUAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("OPASIGNACION",28, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ASIGNACION ::= LLAMADA LISTAVAR PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ASIGNACION ::= LLAMADA OPASIGNACION COND PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-3)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTMET ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMET",26, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTMET ::= error PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMET",26, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTMET ::= SYSTEM PUNTO OUT PUNTO PRINT PARENIZQ COND PARENDER PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMET",26, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-8)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTMET ::= COMENTARIO 
            {
              Object RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.peek()).value;
		
                                              parser.nuevaClase.setComentario(comment);
                                            
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMET",26, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTMET ::= SWITCHMET 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMET",26, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTMET ::= DOWHILEMET 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMET",26, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTMET ::= WHILEMET 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMET",26, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTMET ::= FORMET 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMET",26, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTMET ::= IFMET 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMET",26, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTMET ::= LLAMADA PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMET",26, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTMET ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMET",26, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTMET ::= LOCAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTMET",26, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTSMET ::= SENTMET 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTSMET",25, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTSMET ::= SENTSMET SENTMET 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTSMET",25, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DEFPARAMETROS ::= EPS 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("DEFPARAMETROS",24, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DEFPARAMETROS ::= TIPODATO ID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.peek()).value;
		
                                                parser.nuevoMetodo.setParametro(new Parametros(id, tipo));
                                              
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("DEFPARAMETROS",24, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DEFPARAMETROS ::= DEFPARAMETROS COMA TIPODATO ID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.peek()).value;
		
                                                                parser.nuevoMetodo.setParametro(new Parametros(id, tipo));
                                                              
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("DEFPARAMETROS",24, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-3)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONSTRUCTOR ::= ACCESO ID PARENIZQ DEFPARAMETROS PARENDER LLAVEIZQ SENTSMET LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",23, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-7)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LLAMAR ::= ID 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("LLAMAR",22, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LLAMAR ::= ID PARENIZQ INFPARAMETROS PARENDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("LLAMAR",22, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-3)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LLAMAR ::= LLAMAR PUNTO ID 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("LLAMAR",22, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LLAMAR ::= LLAMAR PUNTO ID PARENIZQ INFPARAMETROS PARENDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("LLAMAR",22, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-5)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LLAMADA ::= LLAMAR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("LLAMADA",21, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LLAMADA ::= THIS PUNTO LLAMAR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("LLAMADA",21, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= LLAMADA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= NULL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= ENTERO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= PARENIZQ COND PARENDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= EXP OPDECREMENT 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= EXP OPINCREMENT 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= OPRESTA EXP 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP OPMODULO EXP 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP OPDIV EXP 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP OPMULT EXP 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= EXP OPRESTA EXP 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= EXP OPSUMA EXP 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RELACIONAL ::= OPMEN 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RELACIONAL ::= OPMAY 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RELACIONAL ::= OPMENIGUAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RELACIONAL ::= OPMAYIGUAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RELACIONAL ::= OPDISTINTO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RELACIONAL ::= OPIGUAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COND ::= EXP 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("COND",18, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COND ::= EXP RELACIONAL EXP 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("COND",18, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COND ::= OPNOT COND 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("COND",18, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COND ::= COND OPAND COND 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("COND",18, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COND ::= COND OPOR COND 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("COND",18, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INFPARAM ::= COND 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("INFPARAM",17, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INFPARAM ::= INFPARAM COMA COND 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("INFPARAM",17, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INFPARAMETROS ::= EPS 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("INFPARAMETROS",16, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INFPARAMETROS ::= INFPARAM 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("INFPARAMETROS",16, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGNA ::= EPS 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("ASIGNA",15, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGNA ::= IGUAL NEW ID PARENIZQ INFPARAMETROS PARENDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("ASIGNA",15, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-5)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNA ::= IGUAL COND 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("ASIGNA",15, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTAID ::= ID NT$2 ASIGNA 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)).value;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("LISTAID",1, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$2 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.peek()).value;

                            RESULT = (String)parser.stack(-1);
                            parser.nuevaClase.setVariable(new Variable(id, RESULT, parser.getAmbito(), parser.nuevaClase.getNombre()));
                          
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("NT$2",73, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTAID ::= LISTAID COMA ID NT$1 ASIGNA 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)).value;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("LISTAID",1, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-4)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$1 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.peek()).value;

                                      RESULT = (String)parser.stack(-2);
                                      parser.nuevaClase.setVariable(new Variable(id, RESULT, parser.getAmbito(), parser.nuevaClase.getNombre()));
                                    
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("NT$1",72, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPODATO ::= ID 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.peek()).value;
		 RESULT = cad; 
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("TIPODATO",0, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPODATO ::= TOBJECT 
            {
              String RESULT =null;
		 RESULT = "object"; 
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("TIPODATO",0, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPODATO ::= TDOUBLE 
            {
              String RESULT =null;
		 RESULT = "double"; 
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("TIPODATO",0, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPODATO ::= TCHAR 
            {
              String RESULT =null;
		 RESULT = "char"; 
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("TIPODATO",0, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPODATO ::= TSTRING 
            {
              String RESULT =null;
		 RESULT = "String"; 
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("TIPODATO",0, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPODATO ::= TBOOLEAN 
            {
              String RESULT =null;
		 RESULT = "boolean"; 
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("TIPODATO",0, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPODATO ::= TINT 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("TIPODATO",0, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LOCAL ::= TIPODATO LISTAID PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("LOCAL",14, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // GLOBAL ::= ACCESO LOCAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("GLOBAL",13, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTCLASE ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTCLASE",12, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTCLASE ::= error PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTCLASE",12, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTCLASE ::= COMENTARIO 
            {
              Object RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.peek()).value;
		
                                              parser.nuevaClase.setComentario(comment);
                                            
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTCLASE",12, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTCLASE ::= FUNCION 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTCLASE",12, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTCLASE ::= METODO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTCLASE",12, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTCLASE ::= METMAIN 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTCLASE",12, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTCLASE ::= CONSTRUCTOR 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTCLASE",12, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTCLASE ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTCLASE",12, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTSCLASE ::= SENTCLASE 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTSCLASE",11, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTSCLASE ::= SENTSCLASE SENTCLASE 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("SENTSCLASE",11, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ACCESO ::= FINAL 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("ACCESO",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ACCESO ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("ACCESO",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ACCESO ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("ACCESO",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ACCESO ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("ACCESO",10, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CLASEU ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CLASEU",9, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CLASEU ::= ACCESO CLASE ID NT$0 LLAVEIZQ SENTSCLASE LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-4)).value;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("CLASEU",9, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-6)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.peek()).value;
 
                                                parser.nuevaClase.setNombre(id); 
                                              
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("NT$0",71, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IMPORTACION ::= ID 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IMPORTACION",6, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IMPORTACION ::= IMPORTACION PUNTO OPMULT 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IMPORTACION",6, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IMPORTACION ::= IMPORTACION PUNTO ID 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("IMPORTACION",6, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TEXTPLANE ::= MAIN 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("TEXTPLANE",8, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TEXTPLANE ::= TSTRING 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("TEXTPLANE",8, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TEXTPLANE ::= CLASE 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("TEXTPLANE",8, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TEXTPLANE ::= ID 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("TEXTPLANE",8, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PAQUETE ::= TEXTPLANE 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("PAQUETE",7, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PAQUETE ::= PAQUETE PUNTO TEXTPLANE 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("PAQUETE",7, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= COMENTARIO 
            {
              Object RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()).right;
		String comment = (String)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.peek()).value;
		
                                              parser.nuevaClase.setComentario(comment);
                                            
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= CLASEU 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= error PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= IMPORTA IMPORTACION PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= PACKAGE PAQUETE PCOMA 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-2)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EPS ::= 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("EPS",4, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S0 ::= INICIO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("S0",3, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S0 ::= S0 INICIO 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("S0",3, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= S0 
            {
              Object RESULT =null;

              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("INIT",2, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          return CUP$ScannerSintaxJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)).value;
		RESULT = start_val;
              CUP$ScannerSintaxJava$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.elementAt(CUP$ScannerSintaxJava$top-1)), ((java_cup.runtime.Symbol)CUP$ScannerSintaxJava$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ScannerSintaxJava$parser.done_parsing();
          return CUP$ScannerSintaxJava$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

