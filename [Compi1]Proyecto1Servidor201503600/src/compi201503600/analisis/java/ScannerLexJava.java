/* The following code was generated by JFlex 1.5.0-SNAPSHOT */


/* --------------------------Codigo de Usuario----------------------- */
package compi201503600.analisis.java;

import java_cup.runtime.*;
import java.io.Reader;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>src/compi201503600/analisis/java/lexicoJava.jflex</tt>
 */
public class ScannerLexJava implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\2\1\6\1\7\1\1\22\0\1\12\1\33\1\70"+
    "\2\0\1\30\1\34\1\0\1\13\1\14\1\4\1\26\1\23\1\27"+
    "\1\24\1\3\12\5\1\22\1\21\1\31\1\25\1\32\2\0\1\37"+
    "\1\55\1\40\1\57\1\44\1\60\1\43\1\64\1\46\1\66\1\42"+
    "\1\56\1\47\1\61\1\50\1\36\1\10\1\51\1\63\1\52\1\54"+
    "\1\53\1\65\1\10\1\67\1\10\1\15\1\0\1\16\1\0\1\11"+
    "\1\0\1\37\1\55\1\40\1\57\1\44\1\60\1\43\1\64\1\46"+
    "\1\66\1\42\1\56\1\47\1\61\1\50\1\36\1\10\1\51\1\63"+
    "\1\52\1\54\1\53\1\65\1\10\1\67\1\10\1\17\1\35\1\20"+
    "\7\0\1\6\113\0\1\10\37\0\1\10\76\0\2\45\115\0\1\62"+
    "\u1ea8\0\1\6\1\6\u0100\0\1\41\uded5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\1\4\6\1\1\12\6\1\1\2\6\1\30\1\31"+
    "\1\32\1\33\1\0\1\34\1\0\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\10\6"+
    "\1\0\1\47\1\0\1\6\1\47\12\6\1\50\1\0"+
    "\4\6\3\0\4\6\2\33\2\0\1\51\1\6\1\0"+
    "\4\6\1\0\3\6\1\0\1\6\1\0\1\52\1\6"+
    "\1\52\1\0\1\6\1\53\2\6\1\0\1\6\1\0"+
    "\5\6\1\0\1\6\1\54\1\55\1\6\4\0\4\6"+
    "\1\0\1\6\3\0\1\6\2\0\4\6\2\56\2\57"+
    "\1\0\1\6\1\60\2\61\1\0\1\6\2\62\2\6"+
    "\2\63\2\64\4\6\1\0\1\6\1\65\4\0\4\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\66\1\6\1\66"+
    "\1\6\1\0\1\6\2\67\1\0\4\6\2\70\2\6"+
    "\2\71\4\0\4\6\2\72\1\0\1\6\2\0\3\6"+
    "\2\73\2\74\1\75\1\76\2\6\1\77\1\100\1\101"+
    "\1\102\1\103\1\100\1\101\1\102\1\103\2\104\1\105"+
    "\1\66\1\105\1\66\1\6\1\106\1\107\1\6\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\162\0\253\0\344\0\u011d\0\u0156"+
    "\0\162\0\162\0\162\0\162\0\162\0\162\0\162\0\162"+
    "\0\162\0\162\0\u018f\0\u01c8\0\u0201\0\162\0\u023a\0\u0273"+
    "\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b"+
    "\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603"+
    "\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\162\0\162\0\162"+
    "\0\u0759\0\u0792\0\162\0\u07cb\0\162\0\162\0\162\0\162"+
    "\0\162\0\162\0\162\0\162\0\162\0\162\0\u0804\0\u083d"+
    "\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\162"+
    "\0\u0a05\0\u0a3e\0\u0156\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb"+
    "\0\u0f24\0\u0f5d\0\u0f96\0\162\0\u0fcf\0\u1008\0\u07cb\0\u1041"+
    "\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u12ed\0\162\0\u1326\0\u0156\0\u135f"+
    "\0\u1398\0\u0156\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u0156\0\u0156"+
    "\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c"+
    "\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4"+
    "\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\162\0\u0156\0\162"+
    "\0\u0156\0\u1b2a\0\u1b63\0\u0156\0\162\0\u0156\0\u1b9c\0\u1bd5"+
    "\0\162\0\u0156\0\u1c0e\0\u1c47\0\162\0\u0156\0\162\0\u0156"+
    "\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u0156\0\u1dd6"+
    "\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e"+
    "\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166"+
    "\0\u219f\0\u21d8\0\162\0\u0156\0\u2211\0\u224a\0\u2283\0\u22bc"+
    "\0\u22f5\0\162\0\u0156\0\u232e\0\u2367\0\162\0\u0156\0\u23a0"+
    "\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\162"+
    "\0\u0156\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be"+
    "\0\162\0\u0156\0\162\0\u0156\0\u0156\0\u0156\0\u26f7\0\u2730"+
    "\0\u0156\0\162\0\162\0\162\0\162\0\u0156\0\u0156\0\u0156"+
    "\0\u0156\0\162\0\u0156\0\162\0\162\0\u0156\0\u0156\0\u2769"+
    "\0\u0156\0\u0156\0\u27a2\0\u0156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\3\1\4\1\10"+
    "\1\3\1\4\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\3\2\10\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\10\1\47\1\10\1\50\1\51\1\52"+
    "\1\53\1\54\1\10\1\55\2\10\1\56\70\57\1\60"+
    "\74\0\1\61\1\62\111\0\1\63\43\0\1\64\2\0"+
    "\2\64\1\7\2\0\61\64\5\0\1\10\2\0\2\10"+
    "\24\0\3\10\1\0\3\10\1\0\14\10\1\0\5\10"+
    "\26\0\1\65\70\0\1\66\1\67\67\0\1\70\1\0"+
    "\1\71\66\0\1\72\70\0\1\73\70\0\1\74\77\0"+
    "\1\75\71\0\1\76\40\0\1\10\2\0\2\10\24\0"+
    "\1\10\1\77\1\10\1\0\3\10\1\0\3\10\1\100"+
    "\2\10\1\101\5\10\1\0\5\10\6\0\1\10\2\0"+
    "\2\10\24\0\3\10\1\0\3\10\1\0\3\10\1\102"+
    "\10\10\1\0\5\10\6\0\1\10\2\0\2\10\24\0"+
    "\1\10\1\103\1\10\1\0\3\10\1\0\10\10\1\104"+
    "\3\10\1\0\1\10\1\105\3\10\6\0\1\10\2\0"+
    "\2\10\24\0\3\10\1\0\3\10\1\0\10\10\1\106"+
    "\3\10\1\0\5\10\50\0\1\107\10\0\1\110\1\111"+
    "\14\0\1\10\2\0\2\10\24\0\3\10\1\0\3\10"+
    "\1\0\1\10\1\112\10\10\1\113\1\114\1\0\5\10"+
    "\6\0\1\10\2\0\2\10\24\0\1\10\1\115\1\10"+
    "\1\0\3\10\1\0\14\10\1\0\5\10\6\0\1\10"+
    "\2\0\2\10\24\0\3\10\1\0\3\10\1\0\6\10"+
    "\1\116\1\117\4\10\1\0\5\10\6\0\1\10\2\0"+
    "\2\10\24\0\3\10\1\0\2\10\1\120\1\0\14\10"+
    "\1\0\5\10\6\0\1\10\2\0\2\10\24\0\3\10"+
    "\1\0\3\10\1\0\14\10\1\0\1\10\1\121\3\10"+
    "\6\0\1\10\2\0\2\10\24\0\3\10\1\0\3\10"+
    "\1\0\2\10\1\122\11\10\1\0\5\10\6\0\1\10"+
    "\2\0\2\10\24\0\3\10\1\0\3\10\1\0\2\10"+
    "\1\123\1\124\10\10\1\0\5\10\6\0\1\10\2\0"+
    "\2\10\24\0\3\10\1\0\2\10\1\125\1\0\2\10"+
    "\1\126\11\10\1\0\5\10\6\0\1\10\2\0\2\10"+
    "\24\0\3\10\1\0\3\10\1\127\1\130\1\10\1\131"+
    "\11\10\1\0\5\10\6\0\1\10\2\0\2\10\24\0"+
    "\3\10\1\0\2\10\1\132\1\0\6\10\1\133\5\10"+
    "\1\0\5\10\53\0\1\134\12\0\1\135\1\0\1\136"+
    "\6\0\1\10\2\0\2\10\24\0\3\10\1\0\3\10"+
    "\1\0\4\10\1\137\7\10\1\0\2\10\1\140\1\10"+
    "\1\141\6\0\1\10\2\0\2\10\24\0\3\10\1\0"+
    "\3\10\1\0\14\10\1\0\1\10\1\142\3\10\1\0"+
    "\1\61\1\143\1\144\66\61\4\145\1\146\64\145\5\0"+
    "\1\147\70\0\1\10\2\0\2\10\24\0\2\10\1\150"+
    "\1\0\3\10\1\0\14\10\1\0\5\10\6\0\1\10"+
    "\2\0\2\10\24\0\3\10\1\0\3\10\1\151\1\152"+
    "\1\10\1\153\11\10\1\0\5\10\6\0\1\10\2\0"+
    "\2\10\24\0\3\10\1\0\3\10\1\0\7\10\1\154"+
    "\4\10\1\0\5\10\6\0\1\10\2\0\2\10\24\0"+
    "\3\10\1\0\1\10\1\155\1\10\1\0\14\10\1\0"+
    "\5\10\6\0\1\10\2\0\2\10\24\0\3\10\1\0"+
    "\3\10\1\0\14\10\1\156\1\157\4\10\6\0\1\10"+
    "\2\0\2\10\24\0\1\10\1\160\1\10\1\0\3\10"+
    "\1\0\14\10\1\0\5\10\6\0\1\10\2\0\2\10"+
    "\24\0\1\10\1\161\1\10\1\0\3\10\1\0\14\10"+
    "\1\0\5\10\6\0\1\10\2\0\2\10\24\0\3\10"+
    "\1\0\3\10\1\0\14\10\1\162\1\163\4\10\37\0"+
    "\1\164\104\0\1\165\23\0\1\10\2\0\2\10\24\0"+
    "\1\166\2\10\1\0\3\10\1\0\14\10\1\0\5\10"+
    "\6\0\1\10\2\0\2\10\24\0\3\10\1\0\3\10"+
    "\1\0\4\10\1\167\7\10\1\0\5\10\6\0\1\10"+
    "\2\0\2\10\24\0\3\10\1\0\3\10\1\170\1\171"+
    "\13\10\1\0\5\10\6\0\1\10\2\0\2\10\24\0"+
    "\3\10\1\0\3\10\1\0\4\10\1\172\7\10\1\0"+
    "\5\10\6\0\1\10\2\0\2\10\24\0\3\10\1\0"+
    "\3\10\1\0\14\10\1\0\3\10\1\173\1\10\6\0"+
    "\1\10\2\0\2\10\24\0\3\10\1\0\3\10\1\0"+
    "\4\10\1\174\7\10\1\0\5\10\6\0\1\10\2\0"+
    "\2\10\24\0\3\10\1\0\3\10\1\175\1\176\13\10"+
    "\1\0\5\10\6\0\1\10\2\0\2\10\24\0\3\10"+
    "\1\0\3\10\1\177\1\200\13\10\1\0\5\10\6\0"+
    "\1\10\2\0\2\10\24\0\3\10\1\0\3\10\1\0"+
    "\2\10\1\201\11\10\1\0\5\10\6\0\1\10\2\0"+
    "\2\10\24\0\3\10\1\0\2\10\1\202\1\0\14\10"+
    "\1\0\5\10\6\0\1\10\2\0\2\10\24\0\3\10"+
    "\1\0\3\10\1\0\12\10\1\203\1\10\1\0\5\10"+
    "\6\0\1\10\2\0\2\10\24\0\3\10\1\0\3\10"+
    "\1\0\6\10\1\204\5\10\1\0\5\10\62\0\1\205"+
    "\14\0\1\10\2\0\2\10\24\0\3\10\1\0\3\10"+
    "\1\0\13\10\1\206\1\0\5\10\6\0\1\10\2\0"+
    "\2\10\24\0\3\10\1\0\3\10\1\0\3\10\1\207"+
    "\10\10\1\0\5\10\6\0\1\10\2\0\2\10\24\0"+
    "\3\10\1\0\3\10\1\0\14\10\1\0\2\10\1\210"+
    "\2\10\6\0\1\10\2\0\2\10\24\0\3\10\1\0"+
    "\3\10\1\0\10\10\1\211\3\10\1\0\5\10\40\0"+
    "\1\212\11\0\1\213\64\0\2\214\104\0\2\215\12\0"+
    "\1\10\2\0\2\10\24\0\1\10\1\216\1\10\1\0"+
    "\3\10\1\0\3\10\1\217\10\10\1\0\5\10\6\0"+
    "\1\10\2\0\2\10\24\0\3\10\1\0\3\10\1\214"+
    "\1\220\13\10\1\0\5\10\6\0\1\10\2\0\2\10"+
    "\24\0\3\10\1\0\3\10\1\0\14\10\1\215\1\221"+
    "\4\10\6\0\1\10\2\0\2\10\24\0\3\10\1\0"+
    "\3\10\1\222\1\223\13\10\1\0\5\10\3\0\1\144"+
    "\66\0\4\145\1\224\64\145\4\0\1\225\71\0\1\10"+
    "\2\0\2\10\24\0\3\10\1\226\1\227\2\10\1\0"+
    "\14\10\1\0\5\10\54\0\1\230\5\0\1\231\14\0"+
    "\1\10\2\0\2\10\24\0\3\10\1\0\3\10\1\0"+
    "\5\10\1\232\5\10\1\233\1\0\5\10\6\0\1\10"+
    "\2\0\2\10\24\0\3\10\1\0\3\10\1\0\4\10"+
    "\1\234\7\10\1\0\5\10\6\0\1\10\2\0\2\10"+
    "\24\0\3\10\1\0\3\10\1\0\10\10\1\235\3\10"+
    "\1\0\5\10\6\0\1\10\2\0\2\10\24\0\3\10"+
    "\1\0\3\10\1\0\14\10\1\236\1\237\4\10\45\0"+
    "\1\240\31\0\1\10\2\0\2\10\24\0\3\10\1\0"+
    "\2\10\1\241\1\0\14\10\1\0\5\10\6\0\1\10"+
    "\2\0\2\10\24\0\3\10\1\0\3\10\1\0\14\10"+
    "\1\242\1\243\4\10\6\0\1\10\2\0\2\10\24\0"+
    "\3\10\1\0\3\10\1\0\3\10\1\244\10\10\1\0"+
    "\5\10\45\0\1\245\31\0\1\10\2\0\2\10\24\0"+
    "\3\10\1\0\2\10\1\246\1\0\14\10\1\0\5\10"+
    "\51\0\1\247\25\0\1\10\2\0\2\10\24\0\3\10"+
    "\1\0\3\10\1\0\2\10\1\250\11\10\1\0\5\10"+
    "\62\0\1\251\14\0\1\10\2\0\2\10\24\0\3\10"+
    "\1\0\3\10\1\0\13\10\1\252\1\0\5\10\6\0"+
    "\1\10\2\0\2\10\24\0\3\10\1\0\2\10\1\253"+
    "\1\0\14\10\1\0\5\10\6\0\1\10\2\0\2\10"+
    "\24\0\3\10\1\0\3\10\1\0\6\10\1\254\5\10"+
    "\1\0\5\10\63\0\2\255\12\0\1\10\2\0\2\10"+
    "\24\0\3\10\1\0\3\10\1\0\14\10\1\255\1\256"+
    "\4\10\60\0\1\257\16\0\1\10\2\0\2\10\24\0"+
    "\3\10\1\0\3\10\1\0\11\10\1\260\2\10\1\0"+
    "\5\10\6\0\1\10\2\0\2\10\24\0\3\10\1\0"+
    "\3\10\1\0\10\10\1\261\3\10\1\0\5\10\6\0"+
    "\1\10\2\0\2\10\24\0\1\10\1\262\1\10\1\0"+
    "\3\10\1\0\14\10\1\0\5\10\6\0\1\10\2\0"+
    "\2\10\24\0\1\10\1\263\1\10\1\0\3\10\1\0"+
    "\14\10\1\0\5\10\6\0\1\10\2\0\2\10\24\0"+
    "\3\10\1\0\3\10\1\0\7\10\1\264\4\10\1\0"+
    "\5\10\40\0\1\265\36\0\1\10\2\0\2\10\24\0"+
    "\1\10\1\266\1\10\1\0\3\10\1\0\14\10\1\0"+
    "\5\10\6\0\1\10\2\0\2\10\24\0\3\10\1\0"+
    "\3\10\1\0\10\10\1\267\3\10\1\0\5\10\53\0"+
    "\1\270\63\0\2\271\74\0\1\272\70\0\1\273\23\0"+
    "\1\10\2\0\2\10\24\0\3\10\1\0\3\10\1\0"+
    "\4\10\1\274\7\10\1\0\5\10\6\0\1\10\2\0"+
    "\2\10\24\0\3\10\1\0\3\10\1\271\1\275\13\10"+
    "\1\0\5\10\6\0\1\10\2\0\2\10\24\0\3\10"+
    "\1\0\3\10\1\0\4\10\1\276\7\10\1\0\5\10"+
    "\6\0\1\10\2\0\2\10\24\0\3\10\1\0\3\10"+
    "\1\0\4\10\1\277\7\10\1\0\5\10\57\0\1\300"+
    "\17\0\1\10\2\0\2\10\24\0\3\10\1\0\3\10"+
    "\1\0\10\10\1\301\3\10\1\0\5\10\1\0\3\145"+
    "\1\144\1\224\64\145\3\0\1\144\1\225\123\0\1\302"+
    "\36\0\1\10\2\0\2\10\24\0\1\10\1\303\1\10"+
    "\1\0\3\10\1\0\14\10\1\0\5\10\40\0\1\304"+
    "\103\0\1\305\23\0\1\10\2\0\2\10\24\0\1\10"+
    "\1\306\1\10\1\0\3\10\1\0\14\10\1\0\5\10"+
    "\6\0\1\10\2\0\2\10\24\0\3\10\1\0\3\10"+
    "\1\0\4\10\1\307\7\10\1\0\5\10\6\0\1\10"+
    "\2\0\2\10\24\0\3\10\1\0\2\10\1\310\1\0"+
    "\14\10\1\0\5\10\6\0\1\10\2\0\2\10\24\0"+
    "\3\10\1\0\3\10\1\311\1\312\13\10\1\0\5\10"+
    "\63\0\2\313\12\0\1\10\2\0\2\10\24\0\3\10"+
    "\1\0\3\10\1\0\14\10\1\313\1\314\4\10\52\0"+
    "\1\315\24\0\1\10\2\0\2\10\24\0\3\10\1\0"+
    "\3\10\1\0\3\10\1\316\10\10\1\0\5\10\6\0"+
    "\1\10\2\0\2\10\24\0\2\10\1\317\1\0\3\10"+
    "\1\0\14\10\1\0\5\10\6\0\1\10\2\0\2\10"+
    "\24\0\3\10\1\0\3\10\1\0\3\10\1\320\10\10"+
    "\1\0\5\10\6\0\1\10\2\0\2\10\24\0\3\10"+
    "\1\0\2\10\1\321\1\0\14\10\1\0\5\10\6\0"+
    "\1\10\2\0\2\10\24\0\3\10\1\322\1\323\2\10"+
    "\1\0\14\10\1\0\5\10\6\0\1\10\2\0\2\10"+
    "\24\0\3\10\1\0\3\10\1\0\6\10\1\324\5\10"+
    "\1\0\5\10\6\0\1\10\2\0\2\10\24\0\3\10"+
    "\1\0\3\10\1\0\10\10\1\325\3\10\1\0\5\10"+
    "\57\0\1\326\17\0\1\10\2\0\2\10\24\0\3\10"+
    "\1\0\3\10\1\0\10\10\1\327\3\10\1\0\5\10"+
    "\46\0\2\330\103\0\1\331\47\0\1\332\74\0\1\333"+
    "\31\0\1\10\2\0\2\10\24\0\3\10\1\0\3\10"+
    "\1\330\1\334\13\10\1\0\5\10\6\0\1\10\2\0"+
    "\2\10\24\0\3\10\1\0\3\10\1\0\13\10\1\335"+
    "\1\0\5\10\6\0\1\10\2\0\2\10\24\0\2\10"+
    "\1\336\1\0\3\10\1\0\14\10\1\0\5\10\6\0"+
    "\1\10\2\0\2\10\24\0\3\10\1\0\2\10\1\337"+
    "\1\0\14\10\1\0\5\10\45\0\1\340\31\0\1\10"+
    "\2\0\2\10\24\0\3\10\1\0\2\10\1\341\1\0"+
    "\14\10\1\0\5\10\44\0\1\342\32\0\1\10\2\0"+
    "\2\10\24\0\3\10\1\0\1\10\1\343\1\10\1\0"+
    "\14\10\1\0\5\10\53\0\1\344\74\0\1\345\17\0"+
    "\1\10\2\0\2\10\24\0\3\10\1\0\3\10\1\0"+
    "\4\10\1\346\7\10\1\0\5\10\6\0\1\10\2\0"+
    "\2\10\24\0\3\10\1\0\3\10\1\0\10\10\1\347"+
    "\3\10\1\0\5\10\6\0\1\10\2\0\2\10\24\0"+
    "\2\10\1\350\1\0\3\10\1\0\14\10\1\0\5\10"+
    "\41\0\1\351\35\0\1\10\2\0\2\10\24\0\2\10"+
    "\1\352\1\0\3\10\1\0\14\10\1\0\5\10\53\0"+
    "\1\353\23\0\1\10\2\0\2\10\24\0\3\10\1\0"+
    "\3\10\1\0\4\10\1\354\7\10\1\0\5\10\6\0"+
    "\1\10\2\0\2\10\24\0\3\10\1\0\3\10\1\0"+
    "\4\10\1\355\7\10\1\0\5\10\6\0\1\10\2\0"+
    "\2\10\24\0\3\10\1\0\3\10\1\0\13\10\1\356"+
    "\1\0\5\10\6\0\1\10\2\0\2\10\24\0\1\10"+
    "\1\357\1\10\1\0\3\10\1\0\14\10\1\0\5\10"+
    "\6\0\1\10\2\0\2\10\24\0\3\10\1\0\3\10"+
    "\1\0\10\10\1\360\3\10\1\0\5\10\6\0\1\10"+
    "\2\0\2\10\24\0\3\10\1\0\2\10\1\361\1\0"+
    "\14\10\1\0\5\10\41\0\1\362\73\0\1\363\111\0"+
    "\1\364\53\0\1\365\26\0\1\10\2\0\2\10\24\0"+
    "\2\10\1\366\1\0\3\10\1\0\14\10\1\0\5\10"+
    "\6\0\1\10\2\0\2\10\24\0\3\10\1\0\1\10"+
    "\1\367\1\10\1\0\14\10\1\0\5\10\6\0\1\10"+
    "\2\0\2\10\24\0\3\10\1\0\3\10\1\0\14\10"+
    "\1\0\1\10\1\370\3\10\6\0\1\10\2\0\2\10"+
    "\24\0\3\10\1\0\3\10\1\0\1\10\1\371\12\10"+
    "\1\0\5\10\45\0\1\372\31\0\1\10\2\0\2\10"+
    "\24\0\3\10\1\0\2\10\1\373\1\0\14\10\1\0"+
    "\5\10\45\0\1\374\105\0\1\375\14\0\1\10\2\0"+
    "\2\10\24\0\3\10\1\0\2\10\1\376\1\0\14\10"+
    "\1\0\5\10\6\0\1\10\2\0\2\10\24\0\3\10"+
    "\1\0\3\10\1\0\13\10\1\377\1\0\5\10\6\0"+
    "\1\10\2\0\2\10\24\0\3\10\1\0\3\10\1\0"+
    "\4\10\1\u0100\7\10\1\0\5\10\6\0\1\10\2\0"+
    "\2\10\24\0\3\10\1\0\3\10\1\0\13\10\1\u0101"+
    "\1\0\5\10\6\0\1\10\2\0\2\10\24\0\3\10"+
    "\1\0\3\10\1\0\4\10\1\u0102\7\10\1\0\5\10"+
    "\6\0\1\10\2\0\2\10\24\0\3\10\1\0\2\10"+
    "\1\u0103\1\0\14\10\1\0\5\10\6\0\1\10\2\0"+
    "\2\10\24\0\3\10\1\0\3\10\1\0\11\10\1\u0104"+
    "\2\10\1\0\5\10\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10203];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\4\1\12\11\3\1\1\11\27\1\3\11"+
    "\1\1\1\0\1\11\1\0\12\11\10\1\1\0\1\11"+
    "\1\0\15\1\1\0\4\1\3\0\5\1\1\11\2\0"+
    "\2\1\1\0\4\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\11\2\1\1\0\4\1\1\0\1\1\1\0\5\1"+
    "\1\0\4\1\4\0\4\1\1\0\1\1\3\0\1\1"+
    "\2\0\4\1\1\11\1\1\1\11\1\1\1\0\2\1"+
    "\1\11\1\1\1\0\1\1\1\11\3\1\1\11\1\1"+
    "\1\11\5\1\1\0\2\1\4\0\4\1\1\0\1\1"+
    "\1\0\1\1\1\0\4\1\1\0\1\1\1\11\1\1"+
    "\1\0\4\1\1\11\3\1\1\11\1\1\4\0\4\1"+
    "\1\11\1\1\1\0\1\1\2\0\3\1\1\11\1\1"+
    "\1\11\6\1\4\11\4\1\1\11\1\1\2\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    String strliteral = "";

    /*  Generamos un java_cup.Symbol para guardar el tipo de token 
        encontrado */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Generamos un Symbol para el tipo de token encontrado 
       junto con su valor */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerLexJava(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ScannerLexJava(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new Error("Caracter ilegal <"+yytext()+">");
          }
        case 73: break;
        case 2: 
          { /* ignora el espacio */
          }
        case 74: break;
        case 3: 
          { return symbol(sym.OPDIV);
          }
        case 75: break;
        case 4: 
          { return symbol(sym.OPMULT);
          }
        case 76: break;
        case 5: 
          { return symbol(sym.ENTERO, yytext());
          }
        case 77: break;
        case 6: 
          { return symbol(sym.ID, yytext());
          }
        case 78: break;
        case 7: 
          { return symbol(sym.PARENIZQ);
          }
        case 79: break;
        case 8: 
          { return symbol(sym.PARENDER);
          }
        case 80: break;
        case 9: 
          { return symbol(sym.CORCHIZQ);
          }
        case 81: break;
        case 10: 
          { return symbol(sym.CORCHDER);
          }
        case 82: break;
        case 11: 
          { return symbol(sym.LLAVEIZQ);
          }
        case 83: break;
        case 12: 
          { return symbol(sym.LLAVEDER);
          }
        case 84: break;
        case 13: 
          { return symbol(sym.PCOMA);
          }
        case 85: break;
        case 14: 
          { return symbol(sym.DPUNTOS);
          }
        case 86: break;
        case 15: 
          { return symbol(sym.COMA);
          }
        case 87: break;
        case 16: 
          { return symbol(sym.PUNTO);
          }
        case 88: break;
        case 17: 
          { return symbol(sym.IGUAL);
          }
        case 89: break;
        case 18: 
          { return symbol(sym.OPSUMA);
          }
        case 90: break;
        case 19: 
          { return symbol(sym.OPRESTA);
          }
        case 91: break;
        case 20: 
          { return symbol(sym.OPMODULO);
          }
        case 92: break;
        case 21: 
          { return symbol(sym.OPMEN);
          }
        case 93: break;
        case 22: 
          { return symbol(sym.OPMAY);
          }
        case 94: break;
        case 23: 
          { return symbol(sym.OPNOT);
          }
        case 95: break;
        case 24: 
          { yybegin(CADENA);
                         strliteral = "\"";
          }
        case 96: break;
        case 25: 
          { strliteral += yytext();
          }
        case 97: break;
        case 26: 
          { yybegin(YYINITIAL);
                         strliteral += "\"";
                         return symbol(sym.STRING_LITERAL, strliteral);
          }
        case 98: break;
        case 27: 
          { return symbol(sym.COMENTARIO, yytext());
          }
        case 99: break;
        case 28: 
          { return symbol(sym.MULTIGUAL);
          }
        case 100: break;
        case 29: 
          { return symbol(sym.OPIGUAL);
          }
        case 101: break;
        case 30: 
          { return symbol(sym.MASIGUAL);
          }
        case 102: break;
        case 31: 
          { return symbol(sym.OPINCREMENT);
          }
        case 103: break;
        case 32: 
          { return symbol(sym.MENIGUAL);
          }
        case 104: break;
        case 33: 
          { return symbol(sym.OPDECREMENT);
          }
        case 105: break;
        case 34: 
          { return symbol(sym.OPMENIGUAL);
          }
        case 106: break;
        case 35: 
          { return symbol(sym.OPMAYIGUAL);
          }
        case 107: break;
        case 36: 
          { return symbol(sym.OPDISTINTO);
          }
        case 108: break;
        case 37: 
          { return symbol(sym.OPAND);
          }
        case 109: break;
        case 38: 
          { return symbol(sym.OPOR);
          }
        case 110: break;
        case 39: 
          { return symbol(sym.IF);
          }
        case 111: break;
        case 40: 
          { return symbol(sym.DO);
          }
        case 112: break;
        case 41: 
          { return symbol(sym.DECIMAL, yytext());
          }
        case 113: break;
        case 42: 
          { return symbol(sym.TINT);
          }
        case 114: break;
        case 43: 
          { return symbol(sym.OUT);
          }
        case 115: break;
        case 44: 
          { return symbol(sym.FOR);
          }
        case 116: break;
        case 45: 
          { return symbol(sym.NEW);
          }
        case 117: break;
        case 46: 
          { return symbol(sym.ARGS);
          }
        case 118: break;
        case 47: 
          { return symbol(sym.CASE);
          }
        case 119: break;
        case 48: 
          { return symbol(sym.TCHAR);
          }
        case 120: break;
        case 49: 
          { return symbol(sym.ELSE);
          }
        case 121: break;
        case 50: 
          { return symbol(sym.MAIN);
          }
        case 122: break;
        case 51: 
          { return symbol(sym.THIS);
          }
        case 123: break;
        case 52: 
          { return symbol(sym.TVOID);
          }
        case 124: break;
        case 53: 
          { return symbol(sym.NULL);
          }
        case 125: break;
        case 54: 
          { return symbol(sym.PRINT);
          }
        case 126: break;
        case 55: 
          { return symbol(sym.CLASE);
          }
        case 127: break;
        case 56: 
          { return symbol(sym.BREAK);
          }
        case 128: break;
        case 57: 
          { return symbol(sym.FINAL);
          }
        case 129: break;
        case 58: 
          { return symbol(sym.WHILE);
          }
        case 130: break;
        case 59: 
          { return symbol(sym.PUBLIC);
          }
        case 131: break;
        case 60: 
          { return symbol(sym.IMPORTA);
          }
        case 132: break;
        case 61: 
          { return symbol(sym.TOBJECT);
          }
        case 133: break;
        case 62: 
          { return symbol(sym.RETURN);
          }
        case 134: break;
        case 63: 
          { return symbol(sym.TDOUBLE);
          }
        case 135: break;
        case 64: 
          { return symbol(sym.STATIC);
          }
        case 136: break;
        case 65: 
          { return symbol(sym.TSTRING);
          }
        case 137: break;
        case 66: 
          { return symbol(sym.SWITCH);
          }
        case 138: break;
        case 67: 
          { return symbol(sym.SYSTEM);
          }
        case 139: break;
        case 68: 
          { return symbol(sym.PACKAGE);
          }
        case 140: break;
        case 69: 
          { return symbol(sym.PRIVATE);
          }
        case 141: break;
        case 70: 
          { return symbol(sym.TBOOLEAN);
          }
        case 142: break;
        case 71: 
          { return symbol(sym.DEFAULT);
          }
        case 143: break;
        case 72: 
          { return symbol(sym.PROTECTED);
          }
        case 144: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
